
CR_RC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800299c  0800299c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800299c  0800299c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800299c  0800299c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080029a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000014  080029b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080029b8  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001152b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024b1  00000000  00000000  00031567  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000726d  00000000  00000000  00033a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000aa0  00000000  00000000  0003ac88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a40  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000e5b3  00000000  00000000  0003c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a6a2  00000000  00000000  0004a71b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004dbb1  00000000  00000000  00054dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a296e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b18  00000000  00000000  000a29ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002934 	.word	0x08002934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002934 	.word	0x08002934

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <mem_cpy>:
void mem_cpy(void *dst, const void *src, uint32_t cnt)
{
	uint8_t *d = (uint8_t*) dst;
	const uint8_t *s = (const uint8_t*) src;

	if (cnt)
 8000220:	2a00      	cmp	r2, #0
 8000222:	d006      	beq.n	8000232 <mem_cpy+0x12>
	{
		do
		{
			*d++ = *s++;
 8000224:	780b      	ldrb	r3, [r1, #0]
 8000226:	7003      	strb	r3, [r0, #0]
		}
		while (--cnt);
 8000228:	3a01      	subs	r2, #1
			*d++ = *s++;
 800022a:	3001      	adds	r0, #1
 800022c:	3101      	adds	r1, #1
		while (--cnt);
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1f8      	bne.n	8000224 <mem_cpy+0x4>
	}
}
 8000232:	4770      	bx	lr

08000234 <mem_set>:
{
	uint8_t *d = (uint8_t*) dst;

	do
	{
		*d++ = (uint8_t) val;
 8000234:	7001      	strb	r1, [r0, #0]
	}
	while (--cnt);
 8000236:	3a01      	subs	r2, #1
		*d++ = (uint8_t) val;
 8000238:	3001      	adds	r0, #1
	while (--cnt);
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fa      	bne.n	8000234 <mem_set>
}
 800023e:	4770      	bx	lr

08000240 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000242:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct =
 8000244:	2214      	movs	r2, #20
 8000246:	2100      	movs	r1, #0
 8000248:	a803      	add	r0, sp, #12
 800024a:	f002 fb6b 	bl	8002924 <memset>
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b23      	ldr	r3, [pc, #140]	; (80002dc <MX_GPIO_Init+0x9c>)
 8000250:	6959      	ldr	r1, [r3, #20]
 8000252:	2080      	movs	r0, #128	; 0x80
 8000254:	03c0      	lsls	r0, r0, #15
 8000256:	4301      	orrs	r1, r0
 8000258:	6159      	str	r1, [r3, #20]
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	4002      	ands	r2, r0
 800025e:	9200      	str	r2, [sp, #0]
 8000260:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	6959      	ldr	r1, [r3, #20]
 8000264:	2080      	movs	r0, #128	; 0x80
 8000266:	0280      	lsls	r0, r0, #10
 8000268:	4301      	orrs	r1, r0
 800026a:	6159      	str	r1, [r3, #20]
 800026c:	695a      	ldr	r2, [r3, #20]
 800026e:	4002      	ands	r2, r0
 8000270:	9201      	str	r2, [sp, #4]
 8000272:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	02c9      	lsls	r1, r1, #11
 800027a:	430a      	orrs	r2, r1
 800027c:	615a      	str	r2, [r3, #20]
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	400b      	ands	r3, r1
 8000282:	9302      	str	r3, [sp, #8]
 8000284:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000286:	2790      	movs	r7, #144	; 0x90
 8000288:	05ff      	lsls	r7, r7, #23
 800028a:	2200      	movs	r2, #0
 800028c:	211f      	movs	r1, #31
 800028e:	0038      	movs	r0, r7
 8000290:	f000 fee8 	bl	8001064 <HAL_GPIO_WritePin>
	LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | SPI_NSS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS522_RST_GPIO_Port, RS522_RST_Pin, GPIO_PIN_RESET);
 8000294:	4d12      	ldr	r5, [pc, #72]	; (80002e0 <MX_GPIO_Init+0xa0>)
 8000296:	2200      	movs	r2, #0
 8000298:	2102      	movs	r1, #2
 800029a:	0028      	movs	r0, r5
 800029c:	f000 fee2 	bl	8001064 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PF0 PF1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80002a0:	2303      	movs	r3, #3
 80002a2:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002a4:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2400      	movs	r4, #0
 80002a8:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80002aa:	a903      	add	r1, sp, #12
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_GPIO_Init+0xa4>)
 80002ae:	f000 fe13 	bl	8000ed8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
	 SPI_NSS_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | SPI_NSS_Pin;
 80002b2:	231f      	movs	r3, #31
 80002b4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b6:	2601      	movs	r6, #1
 80002b8:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002be:	a903      	add	r1, sp, #12
 80002c0:	0038      	movs	r0, r7
 80002c2:	f000 fe09 	bl	8000ed8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS522_RST_Pin */
	GPIO_InitStruct.Pin = RS522_RST_Pin;
 80002c6:	2302      	movs	r3, #2
 80002c8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002cc:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ce:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(RS522_RST_GPIO_Port, &GPIO_InitStruct);
 80002d0:	a903      	add	r1, sp, #12
 80002d2:	0028      	movs	r0, r5
 80002d4:	f000 fe00 	bl	8000ed8 <HAL_GPIO_Init>

}
 80002d8:	b009      	add	sp, #36	; 0x24
 80002da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	48000400 	.word	0x48000400
 80002e4:	48001400 	.word	0x48001400

080002e8 <MX_CRC_Init>:
{
 80002e8:	b510      	push	{r4, lr}
	hcrc.Instance = CRC;
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <MX_CRC_Init+0x1c>)
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_CRC_Init+0x20>)
 80002ee:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80002f4:	60c3      	str	r3, [r0, #12]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80002f6:	6103      	str	r3, [r0, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80002f8:	3301      	adds	r3, #1
 80002fa:	6183      	str	r3, [r0, #24]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002fc:	f000 fd9c 	bl	8000e38 <HAL_CRC_Init>
}
 8000300:	bd10      	pop	{r4, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	2000004c 	.word	0x2000004c
 8000308:	40023000 	.word	0x40023000

0800030c <MX_RTC_Init>:
{
 800030c:	b570      	push	{r4, r5, r6, lr}
	hrtc.Instance = RTC;
 800030e:	4c12      	ldr	r4, [pc, #72]	; (8000358 <MX_RTC_Init+0x4c>)
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_RTC_Init+0x50>)
 8000312:	6023      	str	r3, [r4, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000314:	2500      	movs	r5, #0
 8000316:	6065      	str	r5, [r4, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000318:	237f      	movs	r3, #127	; 0x7f
 800031a:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = 255;
 800031c:	3380      	adds	r3, #128	; 0x80
 800031e:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000320:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000322:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000324:	61a5      	str	r5, [r4, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000326:	0020      	movs	r0, r4
 8000328:	f001 fa96 	bl	8001858 <HAL_RTC_Init>
	sTime.Hours = 0x0;
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <MX_RTC_Init+0x54>)
 800032e:	700d      	strb	r5, [r1, #0]
	sTime.Minutes = 0x0;
 8000330:	704d      	strb	r5, [r1, #1]
	sTime.Seconds = 0x0;
 8000332:	708d      	strb	r5, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000334:	60cd      	str	r5, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000336:	610d      	str	r5, [r1, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000338:	2201      	movs	r2, #1
 800033a:	0020      	movs	r0, r4
 800033c:	f001 fafa 	bl	8001934 <HAL_RTC_SetTime>
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000340:	4908      	ldr	r1, [pc, #32]	; (8000364 <MX_RTC_Init+0x58>)
 8000342:	2301      	movs	r3, #1
 8000344:	700b      	strb	r3, [r1, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8000346:	704b      	strb	r3, [r1, #1]
	sDate.Date = 0x1;
 8000348:	708b      	strb	r3, [r1, #2]
	sDate.Year = 0x0;
 800034a:	70cd      	strb	r5, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800034c:	2201      	movs	r2, #1
 800034e:	0020      	movs	r0, r4
 8000350:	f001 fb6e 	bl	8001a30 <HAL_RTC_SetDate>
}
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	200000e8 	.word	0x200000e8
 800035c:	40002800 	.word	0x40002800
 8000360:	20000038 	.word	0x20000038
 8000364:	20000034 	.word	0x20000034

08000368 <MX_SPI1_Init>:
{
 8000368:	b510      	push	{r4, lr}
	hspi1.Instance = SPI1;
 800036a:	480e      	ldr	r0, [pc, #56]	; (80003a4 <MX_SPI1_Init+0x3c>)
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI1_Init+0x40>)
 800036e:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000370:	2382      	movs	r3, #130	; 0x82
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000376:	2300      	movs	r3, #0
 8000378:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037a:	22e0      	movs	r2, #224	; 0xe0
 800037c:	00d2      	lsls	r2, r2, #3
 800037e:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000380:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0092      	lsls	r2, r2, #2
 8000388:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800038a:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800038c:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800038e:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000390:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000392:	3afa      	subs	r2, #250	; 0xfa
 8000394:	3aff      	subs	r2, #255	; 0xff
 8000396:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000398:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800039a:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800039c:	f001 fc8a 	bl	8001cb4 <HAL_SPI_Init>
}
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000108 	.word	0x20000108
 80003a8:	40013000 	.word	0x40013000

080003ac <MX_UART1_Init>:
 * @brief
 * @param
 * @retval
 */
static void MX_UART1_Init(void)
{
 80003ac:	b510      	push	{r4, lr}
	huart1.Instance = USART1;
 80003ae:	480b      	ldr	r0, [pc, #44]	; (80003dc <MX_UART1_Init+0x30>)
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_UART1_Init+0x34>)
 80003b2:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 80003b4:	23e1      	movs	r3, #225	; 0xe1
 80003b6:	025b      	lsls	r3, r3, #9
 80003b8:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	2300      	movs	r3, #0
 80003bc:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003be:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003c0:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003c2:	220c      	movs	r2, #12
 80003c4:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	61c3      	str	r3, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ca:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80003cc:	3308      	adds	r3, #8
 80003ce:	6243      	str	r3, [r0, #36]	; 0x24
	huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80003d0:	2380      	movs	r3, #128	; 0x80
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_UART_Init(&huart1) != HAL_OK) Error_Handler(); //(MAIN_FUNC, USART_DRV);
 80003d6:	f002 fa4b 	bl	8002870 <HAL_UART_Init>

}
 80003da:	bd10      	pop	{r4, pc}
 80003dc:	20000068 	.word	0x20000068
 80003e0:	40013800 	.word	0x40013800

080003e4 <SystemClock_Config>:
{
 80003e4:	b510      	push	{r4, lr}
 80003e6:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80003e8:	222c      	movs	r2, #44	; 0x2c
 80003ea:	2100      	movs	r1, #0
 80003ec:	a809      	add	r0, sp, #36	; 0x24
 80003ee:	f002 fa99 	bl	8002924 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80003f2:	2210      	movs	r2, #16
 80003f4:	2100      	movs	r1, #0
 80003f6:	a804      	add	r0, sp, #16
 80003f8:	f002 fa94 	bl	8002924 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80003fc:	2210      	movs	r2, #16
 80003fe:	2100      	movs	r1, #0
 8000400:	4668      	mov	r0, sp
 8000402:	f002 fa8f 	bl	8002924 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8000406:	230a      	movs	r3, #10
 8000408:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	3b09      	subs	r3, #9
 800040c:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	2210      	movs	r2, #16
 8000410:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000412:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2402      	movs	r4, #2
 8000416:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000418:	23c0      	movs	r3, #192	; 0xc0
 800041a:	035b      	lsls	r3, r3, #13
 800041c:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	a808      	add	r0, sp, #32
 8000420:	f000 fe26 	bl	8001070 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000424:	2307      	movs	r3, #7
 8000426:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2400      	movs	r4, #0
 800042c:	9406      	str	r4, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000430:	2101      	movs	r1, #1
 8000432:	a804      	add	r0, sp, #16
 8000434:	f001 f8a0 	bl	8001578 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_RTC;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <SystemClock_Config+0x6c>)
 800043a:	9300      	str	r3, [sp, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800043c:	9402      	str	r4, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	9301      	str	r3, [sp, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000444:	4668      	mov	r0, sp
 8000446:	f001 f945 	bl	80016d4 <HAL_RCCEx_PeriphCLKConfig>
}
 800044a:	b014      	add	sp, #80	; 0x50
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	00010001 	.word	0x00010001

08000454 <main>:
{
 8000454:	b510      	push	{r4, lr}
	HAL_Init();
 8000456:	f000 fc61 	bl	8000d1c <HAL_Init>
	SystemClock_Config();
 800045a:	f7ff ffc3 	bl	80003e4 <SystemClock_Config>
	MX_GPIO_Init();
 800045e:	f7ff feef 	bl	8000240 <MX_GPIO_Init>
	MX_CRC_Init();
 8000462:	f7ff ff41 	bl	80002e8 <MX_CRC_Init>
	MX_RTC_Init();
 8000466:	f7ff ff51 	bl	800030c <MX_RTC_Init>
	MX_SPI1_Init();
 800046a:	f7ff ff7d 	bl	8000368 <MX_SPI1_Init>
	MX_UART1_Init();
 800046e:	f7ff ff9d 	bl	80003ac <MX_UART1_Init>
	RC522_Init();
 8000472:	f000 fa33 	bl	80008dc <RC522_Init>
		RC522_Service();
 8000476:	f000 fa6f 	bl	8000958 <RC522_Service>
 800047a:	e7fc      	b.n	8000476 <main+0x22>

0800047c <HAL_UART_TxCpltCallback>:
}
 800047c:	4770      	bx	lr
	...

08000480 <HAL_UART_ErrorCallback>:
{
 8000480:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_PEFLAG(huart);
 8000482:	6803      	ldr	r3, [r0, #0]
 8000484:	2201      	movs	r2, #1
 8000486:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FEFLAG(huart);
 8000488:	6803      	ldr	r3, [r0, #0]
 800048a:	3201      	adds	r2, #1
 800048c:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800048e:	6803      	ldr	r3, [r0, #0]
 8000490:	2104      	movs	r1, #4
 8000492:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 8000494:	6803      	ldr	r3, [r0, #0]
 8000496:	310c      	adds	r1, #12
 8000498:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800049a:	6803      	ldr	r3, [r0, #0]
 800049c:	2408      	movs	r4, #8
 800049e:	621c      	str	r4, [r3, #32]
		SET_BIT(huart->Instance->RQR, UART_RXDATA_FLUSH_REQUEST);
 80004a0:	6801      	ldr	r1, [r0, #0]
 80004a2:	698b      	ldr	r3, [r1, #24]
 80004a4:	4323      	orrs	r3, r4
 80004a6:	618b      	str	r3, [r1, #24]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	67c3      	str	r3, [r0, #124]	; 0x7c
	COM_State = RX_ERROR;
 80004ac:	4b01      	ldr	r3, [pc, #4]	; (80004b4 <HAL_UART_ErrorCallback+0x34>)
 80004ae:	701a      	strb	r2, [r3, #0]
}
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	20000030 	.word	0x20000030

080004b8 <RC522_WriteRegister>:
 * @brief
 * @param
 * @retval
 */
static void RC522_WriteRegister(uint8_t addr, uint8_t val)
{
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	0005      	movs	r5, r0
 80004be:	000e      	movs	r6, r1
	uint8_t tx[2];
	
	mRC522_ChipSelect();
 80004c0:	2490      	movs	r4, #144	; 0x90
 80004c2:	05e4      	lsls	r4, r4, #23
 80004c4:	2200      	movs	r2, #0
 80004c6:	2110      	movs	r1, #16
 80004c8:	0020      	movs	r0, r4
 80004ca:	f000 fdcb 	bl	8001064 <HAL_GPIO_WritePin>
	tx[0] = (addr << 1) & 0x7E;
 80004ce:	006d      	lsls	r5, r5, #1
 80004d0:	207e      	movs	r0, #126	; 0x7e
 80004d2:	4028      	ands	r0, r5
 80004d4:	a901      	add	r1, sp, #4
 80004d6:	7008      	strb	r0, [r1, #0]
	tx[1] = val;
 80004d8:	704e      	strb	r6, [r1, #1]
	HAL_SPI_Transmit(&hspi1, tx, 2, 10);
 80004da:	230a      	movs	r3, #10
 80004dc:	2202      	movs	r2, #2
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <RC522_WriteRegister+0x3c>)
 80004e0:	f001 fc4e 	bl	8001d80 <HAL_SPI_Transmit>
	mRC522_ChipRelease();
 80004e4:	2201      	movs	r2, #1
 80004e6:	2110      	movs	r1, #16
 80004e8:	0020      	movs	r0, r4
 80004ea:	f000 fdbb 	bl	8001064 <HAL_GPIO_WritePin>
}
 80004ee:	b002      	add	sp, #8
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000108 	.word	0x20000108

080004f8 <RC522_ReadRegister>:
{
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	0007      	movs	r7, r0
	uint8_t tx[2] =
 80004fe:	ad03      	add	r5, sp, #12
 8000500:	2300      	movs	r3, #0
 8000502:	702b      	strb	r3, [r5, #0]
 8000504:	706b      	strb	r3, [r5, #1]
	uint8_t rx[2] =
 8000506:	ac02      	add	r4, sp, #8
 8000508:	7023      	strb	r3, [r4, #0]
 800050a:	7063      	strb	r3, [r4, #1]
	mRC522_ChipSelect();
 800050c:	2690      	movs	r6, #144	; 0x90
 800050e:	05f6      	lsls	r6, r6, #23
 8000510:	2200      	movs	r2, #0
 8000512:	2110      	movs	r1, #16
 8000514:	0030      	movs	r0, r6
 8000516:	f000 fda5 	bl	8001064 <HAL_GPIO_WritePin>
	tx[0] = ((addr << 1) & 0x7E) | 0x80;
 800051a:	007f      	lsls	r7, r7, #1
 800051c:	237e      	movs	r3, #126	; 0x7e
 800051e:	403b      	ands	r3, r7
 8000520:	2080      	movs	r0, #128	; 0x80
 8000522:	4240      	negs	r0, r0
 8000524:	4318      	orrs	r0, r3
 8000526:	7028      	strb	r0, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, 10);
 8000528:	230a      	movs	r3, #10
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	3b08      	subs	r3, #8
 800052e:	0022      	movs	r2, r4
 8000530:	0029      	movs	r1, r5
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <RC522_ReadRegister+0x50>)
 8000534:	f001 fd14 	bl	8001f60 <HAL_SPI_TransmitReceive>
	mRC522_ChipRelease();
 8000538:	2201      	movs	r2, #1
 800053a:	2110      	movs	r1, #16
 800053c:	0030      	movs	r0, r6
 800053e:	f000 fd91 	bl	8001064 <HAL_GPIO_WritePin>
	return (rx[1]);
 8000542:	7860      	ldrb	r0, [r4, #1]
}
 8000544:	b005      	add	sp, #20
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	20000108 	.word	0x20000108

0800054c <RC522_SetBitMask>:
 * @brief
 * @param
 * @retval
 */
static void RC522_SetBitMask(uint8_t reg, uint8_t mask)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
	RC522_WriteRegister(reg, RC522_ReadRegister(reg) | mask);
 8000552:	f7ff ffd1 	bl	80004f8 <RC522_ReadRegister>
 8000556:	4328      	orrs	r0, r5
 8000558:	b2c1      	uxtb	r1, r0
 800055a:	0020      	movs	r0, r4
 800055c:	f7ff ffac 	bl	80004b8 <RC522_WriteRegister>
}
 8000560:	bd70      	pop	{r4, r5, r6, pc}

08000562 <RC522_AntennaOn>:
 * @brief
 * @param
 * @retval
 */
static void RC522_AntennaOn(void)
{
 8000562:	b510      	push	{r4, lr}
	uint8_t temp;

	temp = RC522_ReadRegister(RC522_REG_TX_CONTROL);
 8000564:	2014      	movs	r0, #20
 8000566:	f7ff ffc7 	bl	80004f8 <RC522_ReadRegister>
	if ((temp & 0x03U) == 0U) RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
 800056a:	0783      	lsls	r3, r0, #30
 800056c:	d000      	beq.n	8000570 <RC522_AntennaOn+0xe>
}
 800056e:	bd10      	pop	{r4, pc}
	if ((temp & 0x03U) == 0U) RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
 8000570:	2103      	movs	r1, #3
 8000572:	2014      	movs	r0, #20
 8000574:	f7ff ffea 	bl	800054c <RC522_SetBitMask>
}
 8000578:	e7f9      	b.n	800056e <RC522_AntennaOn+0xc>

0800057a <RC522_ClearBitMask>:
{
 800057a:	b570      	push	{r4, r5, r6, lr}
 800057c:	0004      	movs	r4, r0
 800057e:	000d      	movs	r5, r1
	RC522_WriteRegister(reg, RC522_ReadRegister(reg) & (~mask));
 8000580:	f7ff ffba 	bl	80004f8 <RC522_ReadRegister>
 8000584:	b241      	sxtb	r1, r0
 8000586:	43a9      	bics	r1, r5
 8000588:	b2c9      	uxtb	r1, r1
 800058a:	0020      	movs	r0, r4
 800058c:	f7ff ff94 	bl	80004b8 <RC522_WriteRegister>
}
 8000590:	bd70      	pop	{r4, r5, r6, pc}
	...

08000594 <RC522_ToCard>:
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData,
        uint16_t *backLen)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	46ce      	mov	lr, r9
 8000598:	4647      	mov	r7, r8
 800059a:	b580      	push	{r7, lr}
 800059c:	b083      	sub	sp, #12
 800059e:	4680      	mov	r8, r0
 80005a0:	000d      	movs	r5, r1
 80005a2:	0016      	movs	r6, r2
 80005a4:	9301      	str	r3, [sp, #4]
	uint8_t irqEn = 0U;
	uint8_t waitIRq = 0U;
	uint32_t n, i, lastBits;
	RC522_StatusTypeDef status = MI_ERR;

	switch (command)
 80005a6:	280c      	cmp	r0, #12
 80005a8:	d021      	beq.n	80005ee <RC522_ToCard+0x5a>
 80005aa:	280e      	cmp	r0, #14
 80005ac:	d023      	beq.n	80005f6 <RC522_ToCard+0x62>
	uint8_t waitIRq = 0U;
 80005ae:	2700      	movs	r7, #0
	uint8_t irqEn = 0U;
 80005b0:	2300      	movs	r3, #0
 80005b2:	4699      	mov	r9, r3
			waitIRq = 0x30U;
			break;
		default:
			break;
	}
	RC522_WriteRegister(RC522_REG_COMM_IE_N, irqEn | 0x80U);
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	4249      	negs	r1, r1
 80005b8:	464b      	mov	r3, r9
 80005ba:	4319      	orrs	r1, r3
 80005bc:	b2c9      	uxtb	r1, r1
 80005be:	2002      	movs	r0, #2
 80005c0:	f7ff ff7a 	bl	80004b8 <RC522_WriteRegister>
	RC522_ClearBitMask(RC522_REG_COMM_IRQ, 0x80U);
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	2004      	movs	r0, #4
 80005c8:	f7ff ffd7 	bl	800057a <RC522_ClearBitMask>
	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	200a      	movs	r0, #10
 80005d0:	f7ff ffbc 	bl	800054c <RC522_SetBitMask>
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_IDLE);
 80005d4:	2100      	movs	r1, #0
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ff6e 	bl	80004b8 <RC522_WriteRegister>

	for (i = 0U; i < sendLen; i++)
 80005dc:	2400      	movs	r4, #0
 80005de:	42a6      	cmp	r6, r4
 80005e0:	d90d      	bls.n	80005fe <RC522_ToCard+0x6a>
	{
		RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);   //Writing data to the FIFO
 80005e2:	5d29      	ldrb	r1, [r5, r4]
 80005e4:	2009      	movs	r0, #9
 80005e6:	f7ff ff67 	bl	80004b8 <RC522_WriteRegister>
	for (i = 0U; i < sendLen; i++)
 80005ea:	3401      	adds	r4, #1
 80005ec:	e7f7      	b.n	80005de <RC522_ToCard+0x4a>
			waitIRq = 0x30U;
 80005ee:	2730      	movs	r7, #48	; 0x30
			irqEn = 0x77U;
 80005f0:	2377      	movs	r3, #119	; 0x77
 80005f2:	4699      	mov	r9, r3
			break;
 80005f4:	e7de      	b.n	80005b4 <RC522_ToCard+0x20>
			waitIRq = 0x10U;
 80005f6:	2710      	movs	r7, #16
			irqEn = 0x12U;
 80005f8:	2312      	movs	r3, #18
 80005fa:	4699      	mov	r9, r3
 80005fc:	e7da      	b.n	80005b4 <RC522_ToCard+0x20>
	}

	RC522_WriteRegister(RC522_REG_COMMAND, command);            //Execute the command
 80005fe:	4641      	mov	r1, r8
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff59 	bl	80004b8 <RC522_WriteRegister>

	if (command == PCD_TRANSCEIVE)
 8000606:	4643      	mov	r3, r8
 8000608:	2b0c      	cmp	r3, #12
 800060a:	d018      	beq.n	800063e <RC522_ToCard+0xaa>
	for (i = 0U; i < sendLen; i++)
 800060c:	24c8      	movs	r4, #200	; 0xc8
		/**
		 *   CommIrqReg[7..0]
		 *   Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		 */
//        if (eComState == COM_PACKET_RECEIVED) RS485_Service();
		n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
 800060e:	2004      	movs	r0, #4
 8000610:	f7ff ff72 	bl	80004f8 <RC522_ReadRegister>
 8000614:	0006      	movs	r6, r0
		--i;
 8000616:	3c01      	subs	r4, #1
	}
	while ((i != 0U) && ((n & 0x01U) == 0U) && ((n & waitIRq) == 0U));          // End of do...while loop
 8000618:	2c00      	cmp	r4, #0
 800061a:	d003      	beq.n	8000624 <RC522_ToCard+0x90>
 800061c:	07c3      	lsls	r3, r0, #31
 800061e:	d401      	bmi.n	8000624 <RC522_ToCard+0x90>
 8000620:	4207      	tst	r7, r0
 8000622:	d0f4      	beq.n	800060e <RC522_ToCard+0x7a>
	/**
	 *   StartSend=0
	 */
	RC522_ClearBitMask(RC522_REG_BIT_FRAMING, 0x80U);
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	200d      	movs	r0, #13
 8000628:	f7ff ffa7 	bl	800057a <RC522_ClearBitMask>
	
	if (i != 0U)
 800062c:	2c00      	cmp	r4, #0
 800062e:	d10b      	bne.n	8000648 <RC522_ToCard+0xb4>
	RC522_StatusTypeDef status = MI_ERR;
 8000630:	2401      	movs	r4, #1
			}
		}
		else status = MI_ERR;
	}
	return (status);
}
 8000632:	0020      	movs	r0, r4
 8000634:	b003      	add	sp, #12
 8000636:	bc0c      	pop	{r2, r3}
 8000638:	4690      	mov	r8, r2
 800063a:	4699      	mov	r9, r3
 800063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RC522_SetBitMask(RC522_REG_BIT_FRAMING, 0x80U);     //StartSend=1,transmission of data starts
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	200d      	movs	r0, #13
 8000642:	f7ff ff83 	bl	800054c <RC522_SetBitMask>
 8000646:	e7e1      	b.n	800060c <RC522_ToCard+0x78>
		if ((RC522_ReadRegister(RC522_REG_ERROR) & 0x1BU) == 0U)
 8000648:	2006      	movs	r0, #6
 800064a:	f7ff ff55 	bl	80004f8 <RC522_ReadRegister>
 800064e:	231b      	movs	r3, #27
 8000650:	4203      	tst	r3, r0
 8000652:	d136      	bne.n	80006c2 <RC522_ToCard+0x12e>
			if (n & irqEn & 0x01U) status = MI_NOTAGERR;
 8000654:	464b      	mov	r3, r9
 8000656:	4033      	ands	r3, r6
 8000658:	001e      	movs	r6, r3
 800065a:	07f3      	lsls	r3, r6, #31
 800065c:	d41d      	bmi.n	800069a <RC522_ToCard+0x106>
			status = MI_OK;
 800065e:	2400      	movs	r4, #0
			if (command == PCD_TRANSCEIVE)
 8000660:	4643      	mov	r3, r8
 8000662:	2b0c      	cmp	r3, #12
 8000664:	d1e5      	bne.n	8000632 <RC522_ToCard+0x9e>
				n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
 8000666:	200a      	movs	r0, #10
 8000668:	f7ff ff46 	bl	80004f8 <RC522_ReadRegister>
 800066c:	0006      	movs	r6, r0
 800066e:	4680      	mov	r8, r0
				lastBits = (RC522_ReadRegister(RC522_REG_CONTROL) & 0x07U);
 8000670:	200c      	movs	r0, #12
 8000672:	f7ff ff41 	bl	80004f8 <RC522_ReadRegister>
 8000676:	2307      	movs	r3, #7
 8000678:	4018      	ands	r0, r3
				if (lastBits != 0U) *backLen = ((n - 1U) * 8U + lastBits);
 800067a:	d010      	beq.n	800069e <RC522_ToCard+0x10a>
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <RC522_ToCard+0x134>)
 800067e:	469c      	mov	ip, r3
 8000680:	4466      	add	r6, ip
 8000682:	00f6      	lsls	r6, r6, #3
 8000684:	1830      	adds	r0, r6, r0
 8000686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000688:	8018      	strh	r0, [r3, #0]
				if (n == 0U) n = 1U;
 800068a:	4643      	mov	r3, r8
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00a      	beq.n	80006a6 <RC522_ToCard+0x112>
				if (n > RC522_BSIZE) n = RC522_BSIZE;
 8000690:	2b10      	cmp	r3, #16
 8000692:	d90a      	bls.n	80006aa <RC522_ToCard+0x116>
 8000694:	2310      	movs	r3, #16
 8000696:	4698      	mov	r8, r3
 8000698:	e007      	b.n	80006aa <RC522_ToCard+0x116>
			if (n & irqEn & 0x01U) status = MI_NOTAGERR;
 800069a:	2402      	movs	r4, #2
 800069c:	e7e0      	b.n	8000660 <RC522_ToCard+0xcc>
				else *backLen = (n * 8U);
 800069e:	00f6      	lsls	r6, r6, #3
 80006a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006a2:	801e      	strh	r6, [r3, #0]
 80006a4:	e7f1      	b.n	800068a <RC522_ToCard+0xf6>
				if (n == 0U) n = 1U;
 80006a6:	2301      	movs	r3, #1
 80006a8:	4698      	mov	r8, r3
				for (i = 0U; i < n; i++)
 80006aa:	2600      	movs	r6, #0
 80006ac:	e006      	b.n	80006bc <RC522_ToCard+0x128>
					backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
 80006ae:	9b01      	ldr	r3, [sp, #4]
 80006b0:	199f      	adds	r7, r3, r6
 80006b2:	2009      	movs	r0, #9
 80006b4:	f7ff ff20 	bl	80004f8 <RC522_ReadRegister>
 80006b8:	7038      	strb	r0, [r7, #0]
				for (i = 0U; i < n; i++)
 80006ba:	3601      	adds	r6, #1
 80006bc:	45b0      	cmp	r8, r6
 80006be:	d8f6      	bhi.n	80006ae <RC522_ToCard+0x11a>
 80006c0:	e7b7      	b.n	8000632 <RC522_ToCard+0x9e>
		else status = MI_ERR;
 80006c2:	2401      	movs	r4, #1
 80006c4:	e7b5      	b.n	8000632 <RC522_ToCard+0x9e>
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	1fffffff 	.word	0x1fffffff

080006cc <RC522_Request>:
{
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	0005      	movs	r5, r0
 80006d2:	000c      	movs	r4, r1
	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07U);	// TxLastBits = BitFramingReg[2..0]	???
 80006d4:	2107      	movs	r1, #7
 80006d6:	200d      	movs	r0, #13
 80006d8:	f7ff feee 	bl	80004b8 <RC522_WriteRegister>
	TagType[0] = reqMode;
 80006dc:	7025      	strb	r5, [r4, #0]
	status = RC522_ToCard(PCD_TRANSCEIVE, TagType, 1U, TagType, &backBits);
 80006de:	230e      	movs	r3, #14
 80006e0:	446b      	add	r3, sp
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	0023      	movs	r3, r4
 80006e6:	2201      	movs	r2, #1
 80006e8:	0021      	movs	r1, r4
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff ff52 	bl	8000594 <RC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10U)) status = MI_ERR;
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d106      	bne.n	8000702 <RC522_Request+0x36>
 80006f4:	230e      	movs	r3, #14
 80006f6:	446b      	add	r3, sp
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b10      	cmp	r3, #16
 80006fc:	d002      	beq.n	8000704 <RC522_Request+0x38>
 80006fe:	2001      	movs	r0, #1
 8000700:	e000      	b.n	8000704 <RC522_Request+0x38>
 8000702:	2001      	movs	r0, #1
}
 8000704:	b005      	add	sp, #20
 8000706:	bd30      	pop	{r4, r5, pc}

08000708 <RC522_Anticoll>:
 * @brief
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_Anticoll(uint8_t *serNum)
{
 8000708:	b510      	push	{r4, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	0004      	movs	r4, r0
	uint32_t bcnt;
	uint16_t blen;
	uint8_t snum = 0U;
	RC522_StatusTypeDef status;
	
	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0U);   // TxLastBists = BitFramingReg[2..0]
 800070e:	2100      	movs	r1, #0
 8000710:	200d      	movs	r0, #13
 8000712:	f7ff fed1 	bl	80004b8 <RC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000716:	2393      	movs	r3, #147	; 0x93
 8000718:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20U;
 800071a:	3b73      	subs	r3, #115	; 0x73
 800071c:	7063      	strb	r3, [r4, #1]
	status = RC522_ToCard(PCD_TRANSCEIVE, serNum, 2U, serNum, &blen);
 800071e:	3b12      	subs	r3, #18
 8000720:	446b      	add	r3, sp
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	0023      	movs	r3, r4
 8000726:	2202      	movs	r2, #2
 8000728:	0021      	movs	r1, r4
 800072a:	200c      	movs	r0, #12
 800072c:	f7ff ff32 	bl	8000594 <RC522_ToCard>
	
	if (status == MI_OK)
 8000730:	2800      	cmp	r0, #0
 8000732:	d10b      	bne.n	800074c <RC522_Anticoll+0x44>
	uint8_t snum = 0U;
 8000734:	2200      	movs	r2, #0
	{
		/**
		 *   Check card serial number
		 */
		for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000736:	2300      	movs	r3, #0
 8000738:	e002      	b.n	8000740 <RC522_Anticoll+0x38>
		{
			snum ^= serNum[bcnt];
 800073a:	5ce1      	ldrb	r1, [r4, r3]
 800073c:	404a      	eors	r2, r1
		for (bcnt = 0U; bcnt < 4U; bcnt++)
 800073e:	3301      	adds	r3, #1
 8000740:	2b03      	cmp	r3, #3
 8000742:	d9fa      	bls.n	800073a <RC522_Anticoll+0x32>
		}
		if (snum != serNum[bcnt]) status = MI_ERR;
 8000744:	5ce3      	ldrb	r3, [r4, r3]
 8000746:	4293      	cmp	r3, r2
 8000748:	d000      	beq.n	800074c <RC522_Anticoll+0x44>
 800074a:	2001      	movs	r0, #1
	}
	return (status);
}
 800074c:	b004      	add	sp, #16
 800074e:	bd10      	pop	{r4, pc}

08000750 <RC522_CalculateCRC>:
 * @brief
 * @param
 * @retval
 */
static void RC522_CalculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	0006      	movs	r6, r0
 8000754:	000d      	movs	r5, r1
 8000756:	0017      	movs	r7, r2
	uint32_t i, n;
	
	RC522_ClearBitMask(RC522_REG_DIV_IRQ, 0x04U);       // CRCIrq = 0
 8000758:	2104      	movs	r1, #4
 800075a:	2005      	movs	r0, #5
 800075c:	f7ff ff0d 	bl	800057a <RC522_ClearBitMask>
	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);      // Clear the FIFO pointer
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	200a      	movs	r0, #10
 8000764:	f7ff fef2 	bl	800054c <RC522_SetBitMask>
//	RC522_WriteRegister(RC522_REG_COMMAND, PCDLE);
	/**
	 *   Write_RC522(CommandReg, PCDLE);
	 *   Writing data to the FIFO
	 */
	for (i = 0U; i < len; i++)
 8000768:	2400      	movs	r4, #0
 800076a:	e004      	b.n	8000776 <RC522_CalculateCRC+0x26>
	{
		RC522_WriteRegister(RC522_REG_FIFO_DATA, *(pIndata + i));
 800076c:	5d31      	ldrb	r1, [r6, r4]
 800076e:	2009      	movs	r0, #9
 8000770:	f7ff fea2 	bl	80004b8 <RC522_WriteRegister>
	for (i = 0U; i < len; i++)
 8000774:	3401      	adds	r4, #1
 8000776:	42a5      	cmp	r5, r4
 8000778:	d8f8      	bhi.n	800076c <RC522_CalculateCRC+0x1c>
	}
	/**
	 *   Start CRC calculation
	 */
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_CALCCRC);
 800077a:	2103      	movs	r1, #3
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fe9b 	bl	80004b8 <RC522_WriteRegister>
	/**
	 *   Wait for CRC calculation to complete
	 */
	i = 0xFFU;
 8000782:	24ff      	movs	r4, #255	; 0xff
	
	do
	{
//        if (eComState == COM_PACKET_RECEIVED) RS485_Service();
		n = RC522_ReadRegister(RC522_REG_DIV_IRQ);
 8000784:	2005      	movs	r0, #5
 8000786:	f7ff feb7 	bl	80004f8 <RC522_ReadRegister>
		--i;
 800078a:	3c01      	subs	r4, #1
	}
	while ((i != 0U) && ((n & 0x04U) == 0U));              // wait for CRCIrq = 1
 800078c:	2c00      	cmp	r4, #0
 800078e:	d001      	beq.n	8000794 <RC522_CalculateCRC+0x44>
 8000790:	0743      	lsls	r3, r0, #29
 8000792:	d5f7      	bpl.n	8000784 <RC522_CalculateCRC+0x34>
	
//	RC522_WriteRegister(RC522_REG_COMMAND, PCDLE);
	/**
	 *   Read CRC calculation result
	 */
	pOutData[0] = RC522_ReadRegister(RC522_REG_CRC_RESULT_L);
 8000794:	2022      	movs	r0, #34	; 0x22
 8000796:	f7ff feaf 	bl	80004f8 <RC522_ReadRegister>
 800079a:	7038      	strb	r0, [r7, #0]
	pOutData[1] = RC522_ReadRegister(RC522_REG_CRC_RESULT_M);
 800079c:	2021      	movs	r0, #33	; 0x21
 800079e:	f7ff feab 	bl	80004f8 <RC522_ReadRegister>
 80007a2:	7078      	strb	r0, [r7, #1]
}
 80007a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007a6 <RC522_SelectTag>:
 * @brief
 * @param
 * @retval
 */
static uint8_t RC522_SelectTag(uint8_t *serNum)
{
 80007a6:	b510      	push	{r4, lr}
 80007a8:	b086      	sub	sp, #24
	uint32_t bcnt;
	uint16_t recb;
	uint8_t buffer[9], size;
	RC522_StatusTypeDef status;

	buffer[0] = PICC_SELECTTAG;
 80007aa:	ab03      	add	r3, sp, #12
 80007ac:	2293      	movs	r2, #147	; 0x93
 80007ae:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x70U;
 80007b0:	3a23      	subs	r2, #35	; 0x23
 80007b2:	705a      	strb	r2, [r3, #1]

	for (bcnt = 0U; bcnt < 5U; bcnt++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	e004      	b.n	80007c2 <RC522_SelectTag+0x1c>
	{
		buffer[bcnt + 2U] = *(serNum + bcnt);
 80007b8:	1c9a      	adds	r2, r3, #2
 80007ba:	5cc4      	ldrb	r4, [r0, r3]
 80007bc:	a903      	add	r1, sp, #12
 80007be:	548c      	strb	r4, [r1, r2]
	for (bcnt = 0U; bcnt < 5U; bcnt++)
 80007c0:	3301      	adds	r3, #1
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d9f8      	bls.n	80007b8 <RC522_SelectTag+0x12>
	}
	RC522_CalculateCRC(buffer, 7U, &buffer[7]);		//??
 80007c6:	2213      	movs	r2, #19
 80007c8:	446a      	add	r2, sp
 80007ca:	2107      	movs	r1, #7
 80007cc:	a803      	add	r0, sp, #12
 80007ce:	f7ff ffbf 	bl	8000750 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, buffer, 9U, buffer, &recb);
 80007d2:	2316      	movs	r3, #22
 80007d4:	446b      	add	r3, sp
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	ab03      	add	r3, sp, #12
 80007da:	2209      	movs	r2, #9
 80007dc:	0019      	movs	r1, r3
 80007de:	200c      	movs	r0, #12
 80007e0:	f7ff fed8 	bl	8000594 <RC522_ToCard>
	if ((status == MI_OK) && (recb == 0x18U)) size = buffer[0];
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d109      	bne.n	80007fc <RC522_SelectTag+0x56>
 80007e8:	2316      	movs	r3, #22
 80007ea:	446b      	add	r3, sp
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	2b18      	cmp	r3, #24
 80007f0:	d001      	beq.n	80007f6 <RC522_SelectTag+0x50>
	else size = 0U;
 80007f2:	2000      	movs	r0, #0
 80007f4:	e003      	b.n	80007fe <RC522_SelectTag+0x58>
	if ((status == MI_OK) && (recb == 0x18U)) size = buffer[0];
 80007f6:	ab03      	add	r3, sp, #12
 80007f8:	7818      	ldrb	r0, [r3, #0]
 80007fa:	e000      	b.n	80007fe <RC522_SelectTag+0x58>
	else size = 0U;
 80007fc:	2000      	movs	r0, #0
	return (size);
}
 80007fe:	b006      	add	sp, #24
 8000800:	bd10      	pop	{r4, pc}

08000802 <RC522_Read>:
 * @brief
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_Read(uint8_t blockAddr, uint8_t *recvData)
{
 8000802:	b530      	push	{r4, r5, lr}
 8000804:	b087      	sub	sp, #28
 8000806:	000d      	movs	r5, r1
	RC522_StatusTypeDef status;
	uint16_t unLen;
	uint8_t sendData[8];
	sendData[0] = PICC_READ;
 8000808:	ac03      	add	r4, sp, #12
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	7023      	strb	r3, [r4, #0]
	sendData[1] = blockAddr;
 800080e:	7060      	strb	r0, [r4, #1]
	RC522_CalculateCRC(sendData, 2U, &sendData[2]);
 8000810:	220e      	movs	r2, #14
 8000812:	446a      	add	r2, sp
 8000814:	2102      	movs	r1, #2
 8000816:	0020      	movs	r0, r4
 8000818:	f7ff ff9a 	bl	8000750 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, sendData, 4U, recvData, &unLen);
 800081c:	2316      	movs	r3, #22
 800081e:	446b      	add	r3, sp
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	002b      	movs	r3, r5
 8000824:	2204      	movs	r2, #4
 8000826:	0021      	movs	r1, r4
 8000828:	200c      	movs	r0, #12
 800082a:	f7ff feb3 	bl	8000594 <RC522_ToCard>
	if ((status != MI_OK) || (unLen != 0x90U)) status = MI_ERR;
 800082e:	2800      	cmp	r0, #0
 8000830:	d106      	bne.n	8000840 <RC522_Read+0x3e>
 8000832:	2316      	movs	r3, #22
 8000834:	446b      	add	r3, sp
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	2b90      	cmp	r3, #144	; 0x90
 800083a:	d002      	beq.n	8000842 <RC522_Read+0x40>
 800083c:	2001      	movs	r0, #1
 800083e:	e000      	b.n	8000842 <RC522_Read+0x40>
 8000840:	2001      	movs	r0, #1
	return (status);
}
 8000842:	b007      	add	sp, #28
 8000844:	bd30      	pop	{r4, r5, pc}

08000846 <RC522_Halt>:
 * @brief
 * @param
 * @retval
 */
static void RC522_Halt(void)
{
 8000846:	b510      	push	{r4, lr}
 8000848:	b084      	sub	sp, #16
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 800084a:	ac02      	add	r4, sp, #8
 800084c:	2350      	movs	r3, #80	; 0x50
 800084e:	7023      	strb	r3, [r4, #0]
	buff[1] = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	7063      	strb	r3, [r4, #1]
	RC522_CalculateCRC(buff, 2U, &buff[2]);
 8000854:	220a      	movs	r2, #10
 8000856:	446a      	add	r2, sp
 8000858:	2102      	movs	r1, #2
 800085a:	0020      	movs	r0, r4
 800085c:	f7ff ff78 	bl	8000750 <RC522_CalculateCRC>
	RC522_ToCard(PCD_TRANSCEIVE, buff, 4U, buff, &unLen);
 8000860:	230e      	movs	r3, #14
 8000862:	446b      	add	r3, sp
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	0023      	movs	r3, r4
 8000868:	2204      	movs	r2, #4
 800086a:	0021      	movs	r1, r4
 800086c:	200c      	movs	r0, #12
 800086e:	f7ff fe91 	bl	8000594 <RC522_ToCard>
	RC522_ClearBitMask(0x08U, 0x08U);
 8000872:	2108      	movs	r1, #8
 8000874:	2008      	movs	r0, #8
 8000876:	f7ff fe80 	bl	800057a <RC522_ClearBitMask>
}
 800087a:	b004      	add	sp, #16
 800087c:	bd10      	pop	{r4, pc}

0800087e <RC522_Auth>:
{
 800087e:	b530      	push	{r4, r5, lr}
 8000880:	b087      	sub	sp, #28
	buff[0] = authMode;
 8000882:	ac02      	add	r4, sp, #8
 8000884:	7020      	strb	r0, [r4, #0]
	buff[1] = BlockAddr;
 8000886:	7061      	strb	r1, [r4, #1]
	for (bcnt = 0U; bcnt < 6U; bcnt++)
 8000888:	2100      	movs	r1, #0
 800088a:	e004      	b.n	8000896 <RC522_Auth+0x18>
		buff[bcnt + 2U] = *(Sectorkey + bcnt);
 800088c:	1c88      	adds	r0, r1, #2
 800088e:	5c55      	ldrb	r5, [r2, r1]
 8000890:	ac02      	add	r4, sp, #8
 8000892:	5425      	strb	r5, [r4, r0]
	for (bcnt = 0U; bcnt < 6U; bcnt++)
 8000894:	3101      	adds	r1, #1
 8000896:	2905      	cmp	r1, #5
 8000898:	d9f8      	bls.n	800088c <RC522_Auth+0xe>
	for (bcnt = 0U; bcnt < 4U; bcnt++)
 800089a:	2200      	movs	r2, #0
 800089c:	e005      	b.n	80008aa <RC522_Auth+0x2c>
		buff[bcnt + 8U] = *(serNum + bcnt);
 800089e:	0011      	movs	r1, r2
 80008a0:	3108      	adds	r1, #8
 80008a2:	5c9c      	ldrb	r4, [r3, r2]
 80008a4:	a802      	add	r0, sp, #8
 80008a6:	5444      	strb	r4, [r0, r1]
	for (bcnt = 0U; bcnt < 4U; bcnt++)
 80008a8:	3201      	adds	r2, #1
 80008aa:	2a03      	cmp	r2, #3
 80008ac:	d9f7      	bls.n	800089e <RC522_Auth+0x20>
	status = RC522_ToCard(PCD_AUTHENT, buff, 12U, buff, &recb);
 80008ae:	2316      	movs	r3, #22
 80008b0:	446b      	add	r3, sp
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	ab02      	add	r3, sp, #8
 80008b6:	220c      	movs	r2, #12
 80008b8:	0019      	movs	r1, r3
 80008ba:	200e      	movs	r0, #14
 80008bc:	f7ff fe6a 	bl	8000594 <RC522_ToCard>
 80008c0:	1e04      	subs	r4, r0, #0
	if ((status != MI_OK) || ((RC522_ReadRegister(RC522_REG_STATUS2) & 0x08U) == 0U)) status = MI_ERR;
 80008c2:	d003      	beq.n	80008cc <RC522_Auth+0x4e>
 80008c4:	2401      	movs	r4, #1
}
 80008c6:	0020      	movs	r0, r4
 80008c8:	b007      	add	sp, #28
 80008ca:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || ((RC522_ReadRegister(RC522_REG_STATUS2) & 0x08U) == 0U)) status = MI_ERR;
 80008cc:	2008      	movs	r0, #8
 80008ce:	f7ff fe13 	bl	80004f8 <RC522_ReadRegister>
 80008d2:	0703      	lsls	r3, r0, #28
 80008d4:	d4f7      	bmi.n	80008c6 <RC522_Auth+0x48>
 80008d6:	2401      	movs	r4, #1
 80008d8:	e7f5      	b.n	80008c6 <RC522_Auth+0x48>
	...

080008dc <RC522_Init>:
{
 80008dc:	b510      	push	{r4, lr}
	mRC522_ChipRelease();
 80008de:	2090      	movs	r0, #144	; 0x90
 80008e0:	2201      	movs	r2, #1
 80008e2:	2110      	movs	r1, #16
 80008e4:	05c0      	lsls	r0, r0, #23
 80008e6:	f000 fbbd 	bl	8001064 <HAL_GPIO_WritePin>
	mRC522_ResetAssert();
 80008ea:	4c1a      	ldr	r4, [pc, #104]	; (8000954 <RC522_Init+0x78>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	2102      	movs	r1, #2
 80008f0:	0020      	movs	r0, r4
 80008f2:	f000 fbb7 	bl	8001064 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80008f6:	200a      	movs	r0, #10
 80008f8:	f000 fa32 	bl	8000d60 <HAL_Delay>
	mRC522_ResetRelease();
 80008fc:	2201      	movs	r2, #1
 80008fe:	2102      	movs	r1, #2
 8000900:	0020      	movs	r0, r4
 8000902:	f000 fbaf 	bl	8001064 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000906:	2064      	movs	r0, #100	; 0x64
 8000908:	f000 fa2a 	bl	8000d60 <HAL_Delay>
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_RESETPHASE);
 800090c:	210f      	movs	r1, #15
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fdd2 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_MODE, 0x8D);
 8000914:	218d      	movs	r1, #141	; 0x8d
 8000916:	202a      	movs	r0, #42	; 0x2a
 8000918:	f7ff fdce 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3E);
 800091c:	213e      	movs	r1, #62	; 0x3e
 800091e:	202b      	movs	r0, #43	; 0x2b
 8000920:	f7ff fdca 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30);
 8000924:	211e      	movs	r1, #30
 8000926:	202d      	movs	r0, #45	; 0x2d
 8000928:	f7ff fdc6 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0);
 800092c:	2100      	movs	r1, #0
 800092e:	202c      	movs	r0, #44	; 0x2c
 8000930:	f7ff fdc2 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_RF_CFG, 0x70);
 8000934:	2170      	movs	r1, #112	; 0x70
 8000936:	2026      	movs	r0, #38	; 0x26
 8000938:	f7ff fdbe 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40);
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	2015      	movs	r0, #21
 8000940:	f7ff fdba 	bl	80004b8 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_MODE, 0x3D);
 8000944:	213d      	movs	r1, #61	; 0x3d
 8000946:	2011      	movs	r0, #17
 8000948:	f7ff fdb6 	bl	80004b8 <RC522_WriteRegister>
	RC522_AntennaOn(); // Open the antenna
 800094c:	f7ff fe09 	bl	8000562 <RC522_AntennaOn>
}
 8000950:	bd10      	pop	{r4, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	48000400 	.word	0x48000400

08000958 <RC522_Service>:
{
 8000958:	b510      	push	{r4, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
	status = RC522_Request(PICC_REQIDL, card_id);
 800095c:	a912      	add	r1, sp, #72	; 0x48
 800095e:	2026      	movs	r0, #38	; 0x26
 8000960:	f7ff feb4 	bl	80006cc <RC522_Request>
	if (status == MI_OK) status = RC522_Anticoll(card_id);
 8000964:	2800      	cmp	r0, #0
 8000966:	d00b      	beq.n	8000980 <RC522_Service+0x28>
	if (status == MI_OK) sz = RC522_SelectTag(card_id);
 8000968:	2800      	cmp	r0, #0
 800096a:	d00d      	beq.n	8000988 <RC522_Service+0x30>
	HAL_StatusTypeDef state = HAL_ERROR;
 800096c:	2401      	movs	r4, #1
	if (state == HAL_OK)
 800096e:	2c00      	cmp	r4, #0
 8000970:	d04a      	beq.n	8000a08 <RC522_Service+0xb0>
	if (state == HAL_OK)
 8000972:	2c00      	cmp	r4, #0
 8000974:	d100      	bne.n	8000978 <RC522_Service+0x20>
 8000976:	e081      	b.n	8000a7c <RC522_Service+0x124>
	RC522_Halt();
 8000978:	f7ff ff65 	bl	8000846 <RC522_Halt>
}
 800097c:	b014      	add	sp, #80	; 0x50
 800097e:	bd10      	pop	{r4, pc}
	if (status == MI_OK) status = RC522_Anticoll(card_id);
 8000980:	a812      	add	r0, sp, #72	; 0x48
 8000982:	f7ff fec1 	bl	8000708 <RC522_Anticoll>
 8000986:	e7ef      	b.n	8000968 <RC522_Service+0x10>
	if (status == MI_OK) sz = RC522_SelectTag(card_id);
 8000988:	a812      	add	r0, sp, #72	; 0x48
 800098a:	f7ff ff0c 	bl	80007a6 <RC522_SelectTag>
	if (sz != 0)
 800098e:	2800      	cmp	r0, #0
 8000990:	d101      	bne.n	8000996 <RC522_Service+0x3e>
	HAL_StatusTypeDef state = HAL_ERROR;
 8000992:	2401      	movs	r4, #1
 8000994:	e7ed      	b.n	8000972 <RC522_Service+0x1a>
		ZEROFILL(buff, sizeof(buff));
 8000996:	2244      	movs	r2, #68	; 0x44
 8000998:	2100      	movs	r1, #0
 800099a:	a801      	add	r0, sp, #4
 800099c:	f7ff fc4a 	bl	8000234 <mem_set>
		mem_cpy(buff, "S00\0", 4);
 80009a0:	2204      	movs	r2, #4
 80009a2:	4953      	ldr	r1, [pc, #332]	; (8000af0 <RC522_Service+0x198>)
 80009a4:	a801      	add	r0, sp, #4
 80009a6:	f7ff fc3b 	bl	8000220 <mem_cpy>
		status = RC522_Auth(PICC_AUTHENT1A, 0, mifare_keya, card_id);
 80009aa:	ab12      	add	r3, sp, #72	; 0x48
 80009ac:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <RC522_Service+0x19c>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	2060      	movs	r0, #96	; 0x60
 80009b2:	f7ff ff64 	bl	800087e <RC522_Auth>
		if (status == MI_OK) status = RC522_Read(0, &buff[4]);
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d00f      	beq.n	80009da <RC522_Service+0x82>
		if (status == MI_OK) status = RC522_Read(1, &buff[20]);
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d011      	beq.n	80009e2 <RC522_Service+0x8a>
		if (status == MI_OK) status = RC522_Read(2, &buff[36]);
 80009be:	2800      	cmp	r0, #0
 80009c0:	d014      	beq.n	80009ec <RC522_Service+0x94>
		if (status == MI_OK) status = RC522_Read(3, &buff[52]);
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d017      	beq.n	80009f6 <RC522_Service+0x9e>
		if (status == MI_OK) state = HAL_UART_Transmit(&huart1, buff, sizeof(buff), 100);
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d11a      	bne.n	8000a00 <RC522_Service+0xa8>
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	2244      	movs	r2, #68	; 0x44
 80009ce:	a901      	add	r1, sp, #4
 80009d0:	4849      	ldr	r0, [pc, #292]	; (8000af8 <RC522_Service+0x1a0>)
 80009d2:	f001 fea1 	bl	8002718 <HAL_UART_Transmit>
 80009d6:	0004      	movs	r4, r0
 80009d8:	e7c9      	b.n	800096e <RC522_Service+0x16>
		if (status == MI_OK) status = RC522_Read(0, &buff[4]);
 80009da:	a902      	add	r1, sp, #8
 80009dc:	f7ff ff11 	bl	8000802 <RC522_Read>
 80009e0:	e7eb      	b.n	80009ba <RC522_Service+0x62>
		if (status == MI_OK) status = RC522_Read(1, &buff[20]);
 80009e2:	a906      	add	r1, sp, #24
 80009e4:	3001      	adds	r0, #1
 80009e6:	f7ff ff0c 	bl	8000802 <RC522_Read>
 80009ea:	e7e8      	b.n	80009be <RC522_Service+0x66>
		if (status == MI_OK) status = RC522_Read(2, &buff[36]);
 80009ec:	a90a      	add	r1, sp, #40	; 0x28
 80009ee:	3002      	adds	r0, #2
 80009f0:	f7ff ff07 	bl	8000802 <RC522_Read>
 80009f4:	e7e5      	b.n	80009c2 <RC522_Service+0x6a>
		if (status == MI_OK) status = RC522_Read(3, &buff[52]);
 80009f6:	a90e      	add	r1, sp, #56	; 0x38
 80009f8:	3003      	adds	r0, #3
 80009fa:	f7ff ff02 	bl	8000802 <RC522_Read>
 80009fe:	e7e2      	b.n	80009c6 <RC522_Service+0x6e>
		else RC522_Halt();
 8000a00:	f7ff ff21 	bl	8000846 <RC522_Halt>
	HAL_StatusTypeDef state = HAL_ERROR;
 8000a04:	2401      	movs	r4, #1
 8000a06:	e7b4      	b.n	8000972 <RC522_Service+0x1a>
		ZEROFILL(buff, sizeof(buff));
 8000a08:	2244      	movs	r2, #68	; 0x44
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	a801      	add	r0, sp, #4
 8000a0e:	f7ff fc11 	bl	8000234 <mem_set>
		mem_cpy(buff, "S01\0", 4);
 8000a12:	4937      	ldr	r1, [pc, #220]	; (8000af0 <RC522_Service+0x198>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	3108      	adds	r1, #8
 8000a18:	a801      	add	r0, sp, #4
 8000a1a:	f7ff fc01 	bl	8000220 <mem_cpy>
		status = RC522_Auth(PICC_AUTHENT1A, 4, mifare_keya, card_id);
 8000a1e:	ab12      	add	r3, sp, #72	; 0x48
 8000a20:	4a34      	ldr	r2, [pc, #208]	; (8000af4 <RC522_Service+0x19c>)
 8000a22:	2104      	movs	r1, #4
 8000a24:	2060      	movs	r0, #96	; 0x60
 8000a26:	f7ff ff2a 	bl	800087e <RC522_Auth>
		if (status == MI_OK) status = RC522_Read(4, &buff[4]);
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d00f      	beq.n	8000a4e <RC522_Service+0xf6>
		if (status == MI_OK) status = RC522_Read(5, &buff[20]);
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d012      	beq.n	8000a58 <RC522_Service+0x100>
		if (status == MI_OK) status = RC522_Read(6, &buff[36]);
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d015      	beq.n	8000a62 <RC522_Service+0x10a>
		if (status == MI_OK) status = RC522_Read(7, &buff[52]);
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d018      	beq.n	8000a6c <RC522_Service+0x114>
		if (status == MI_OK) state = HAL_UART_Transmit(&huart1, buff, sizeof(buff), 100);
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d11b      	bne.n	8000a76 <RC522_Service+0x11e>
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	2244      	movs	r2, #68	; 0x44
 8000a42:	a901      	add	r1, sp, #4
 8000a44:	482c      	ldr	r0, [pc, #176]	; (8000af8 <RC522_Service+0x1a0>)
 8000a46:	f001 fe67 	bl	8002718 <HAL_UART_Transmit>
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e791      	b.n	8000972 <RC522_Service+0x1a>
		if (status == MI_OK) status = RC522_Read(4, &buff[4]);
 8000a4e:	a902      	add	r1, sp, #8
 8000a50:	3004      	adds	r0, #4
 8000a52:	f7ff fed6 	bl	8000802 <RC522_Read>
 8000a56:	e7ea      	b.n	8000a2e <RC522_Service+0xd6>
		if (status == MI_OK) status = RC522_Read(5, &buff[20]);
 8000a58:	a906      	add	r1, sp, #24
 8000a5a:	3005      	adds	r0, #5
 8000a5c:	f7ff fed1 	bl	8000802 <RC522_Read>
 8000a60:	e7e7      	b.n	8000a32 <RC522_Service+0xda>
		if (status == MI_OK) status = RC522_Read(6, &buff[36]);
 8000a62:	a90a      	add	r1, sp, #40	; 0x28
 8000a64:	3006      	adds	r0, #6
 8000a66:	f7ff fecc 	bl	8000802 <RC522_Read>
 8000a6a:	e7e4      	b.n	8000a36 <RC522_Service+0xde>
		if (status == MI_OK) status = RC522_Read(7, &buff[52]);
 8000a6c:	a90e      	add	r1, sp, #56	; 0x38
 8000a6e:	3007      	adds	r0, #7
 8000a70:	f7ff fec7 	bl	8000802 <RC522_Read>
 8000a74:	e7e1      	b.n	8000a3a <RC522_Service+0xe2>
		else RC522_Halt();
 8000a76:	f7ff fee6 	bl	8000846 <RC522_Halt>
 8000a7a:	e77a      	b.n	8000972 <RC522_Service+0x1a>
		ZEROFILL(buff, sizeof(buff));
 8000a7c:	2244      	movs	r2, #68	; 0x44
 8000a7e:	2100      	movs	r1, #0
 8000a80:	a801      	add	r0, sp, #4
 8000a82:	f7ff fbd7 	bl	8000234 <mem_set>
		mem_cpy(buff, "S02\0", 4);
 8000a86:	491a      	ldr	r1, [pc, #104]	; (8000af0 <RC522_Service+0x198>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	3110      	adds	r1, #16
 8000a8c:	a801      	add	r0, sp, #4
 8000a8e:	f7ff fbc7 	bl	8000220 <mem_cpy>
		status = RC522_Auth(PICC_AUTHENT1A, 8, mifare_keya, card_id);
 8000a92:	ab12      	add	r3, sp, #72	; 0x48
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <RC522_Service+0x19c>)
 8000a96:	2108      	movs	r1, #8
 8000a98:	2060      	movs	r0, #96	; 0x60
 8000a9a:	f7ff fef0 	bl	800087e <RC522_Auth>
		if (status == MI_OK) status = RC522_Read(8, &buff[4]);
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d00a      	beq.n	8000ab8 <RC522_Service+0x160>
		if (status == MI_OK) status = RC522_Read(9, &buff[20]);
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d00d      	beq.n	8000ac2 <RC522_Service+0x16a>
		if (status == MI_OK) status = RC522_Read(10, &buff[36]);
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d010      	beq.n	8000acc <RC522_Service+0x174>
		if (status == MI_OK) status = RC522_Read(11, &buff[52]);
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d013      	beq.n	8000ad6 <RC522_Service+0x17e>
		if (status == MI_OK) state = HAL_UART_Transmit(&huart1, buff, sizeof(buff), 100);
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d016      	beq.n	8000ae0 <RC522_Service+0x188>
		else RC522_Halt();
 8000ab2:	f7ff fec8 	bl	8000846 <RC522_Halt>
 8000ab6:	e75f      	b.n	8000978 <RC522_Service+0x20>
		if (status == MI_OK) status = RC522_Read(8, &buff[4]);
 8000ab8:	a902      	add	r1, sp, #8
 8000aba:	3008      	adds	r0, #8
 8000abc:	f7ff fea1 	bl	8000802 <RC522_Read>
 8000ac0:	e7ef      	b.n	8000aa2 <RC522_Service+0x14a>
		if (status == MI_OK) status = RC522_Read(9, &buff[20]);
 8000ac2:	a906      	add	r1, sp, #24
 8000ac4:	3009      	adds	r0, #9
 8000ac6:	f7ff fe9c 	bl	8000802 <RC522_Read>
 8000aca:	e7ec      	b.n	8000aa6 <RC522_Service+0x14e>
		if (status == MI_OK) status = RC522_Read(10, &buff[36]);
 8000acc:	a90a      	add	r1, sp, #40	; 0x28
 8000ace:	300a      	adds	r0, #10
 8000ad0:	f7ff fe97 	bl	8000802 <RC522_Read>
 8000ad4:	e7e9      	b.n	8000aaa <RC522_Service+0x152>
		if (status == MI_OK) status = RC522_Read(11, &buff[52]);
 8000ad6:	a90e      	add	r1, sp, #56	; 0x38
 8000ad8:	300b      	adds	r0, #11
 8000ada:	f7ff fe92 	bl	8000802 <RC522_Read>
 8000ade:	e7e6      	b.n	8000aae <RC522_Service+0x156>
		if (status == MI_OK) state = HAL_UART_Transmit(&huart1, buff, sizeof(buff), 100);
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	2244      	movs	r2, #68	; 0x44
 8000ae4:	a901      	add	r1, sp, #4
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <RC522_Service+0x1a0>)
 8000ae8:	f001 fe16 	bl	8002718 <HAL_UART_Transmit>
 8000aec:	e744      	b.n	8000978 <RC522_Service+0x20>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	0800294c 	.word	0x0800294c
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000068 	.word	0x20000068

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x2c>)
 8000b00:	6999      	ldr	r1, [r3, #24]
 8000b02:	2201      	movs	r2, #1
 8000b04:	4311      	orrs	r1, r2
 8000b06:	6199      	str	r1, [r3, #24]
 8000b08:	6999      	ldr	r1, [r3, #24]
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	0549      	lsls	r1, r1, #21
 8000b16:	430a      	orrs	r2, r1
 8000b18:	61da      	str	r2, [r3, #28]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	b002      	add	sp, #8
 8000b24:	4770      	bx	lr
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b2c:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000b2e:	6802      	ldr	r2, [r0, #0]
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_CRC_MspInit+0x24>)
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d001      	beq.n	8000b3a <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b36:	b002      	add	sp, #8
 8000b38:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b3a:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_CRC_MspInit+0x28>)
 8000b3c:	6951      	ldr	r1, [r2, #20]
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	4319      	orrs	r1, r3
 8000b42:	6151      	str	r1, [r2, #20]
 8000b44:	6952      	ldr	r2, [r2, #20]
 8000b46:	4013      	ands	r3, r2
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	9b01      	ldr	r3, [sp, #4]
}
 8000b4c:	e7f3      	b.n	8000b36 <HAL_CRC_MspInit+0xa>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40023000 	.word	0x40023000
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000b58:	6802      	ldr	r2, [r0, #0]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_RTC_MspInit+0x18>)
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d000      	beq.n	8000b62 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b60:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_RTC_MspInit+0x1c>)
 8000b64:	6a11      	ldr	r1, [r2, #32]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6213      	str	r3, [r2, #32]
}
 8000b6e:	e7f7      	b.n	8000b60 <HAL_RTC_MspInit+0x8>
 8000b70:	40002800 	.word	0x40002800
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	2214      	movs	r2, #20
 8000b80:	2100      	movs	r1, #0
 8000b82:	a803      	add	r0, sp, #12
 8000b84:	f001 fece 	bl	8002924 <memset>
  if(hspi->Instance==SPI1)
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_SPI_MspInit+0x5c>)
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d001      	beq.n	8000b94 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b90:	b008      	add	sp, #32
 8000b92:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_SPI_MspInit+0x60>)
 8000b96:	6999      	ldr	r1, [r3, #24]
 8000b98:	2080      	movs	r0, #128	; 0x80
 8000b9a:	0140      	lsls	r0, r0, #5
 8000b9c:	4301      	orrs	r1, r0
 8000b9e:	6199      	str	r1, [r3, #24]
 8000ba0:	699a      	ldr	r2, [r3, #24]
 8000ba2:	4002      	ands	r2, r0
 8000ba4:	9201      	str	r2, [sp, #4]
 8000ba6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	0289      	lsls	r1, r1, #10
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bba:	23e0      	movs	r3, #224	; 0xe0
 8000bbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	3bde      	subs	r3, #222	; 0xde
 8000bc0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	2090      	movs	r0, #144	; 0x90
 8000bc8:	a903      	add	r1, sp, #12
 8000bca:	05c0      	lsls	r0, r0, #23
 8000bcc:	f000 f984 	bl	8000ed8 <HAL_GPIO_Init>
}
 8000bd0:	e7de      	b.n	8000b90 <HAL_SPI_MspInit+0x18>
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	2214      	movs	r2, #20
 8000be4:	2100      	movs	r1, #0
 8000be6:	a803      	add	r0, sp, #12
 8000be8:	f001 fe9c 	bl	8002924 <memset>
  if(huart->Instance==USART1)
 8000bec:	6822      	ldr	r2, [r4, #0]
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0x70>)
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d001      	beq.n	8000bf8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf4:	b008      	add	sp, #32
 8000bf6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_UART_MspInit+0x74>)
 8000bfa:	6999      	ldr	r1, [r3, #24]
 8000bfc:	2080      	movs	r0, #128	; 0x80
 8000bfe:	01c0      	lsls	r0, r0, #7
 8000c00:	4301      	orrs	r1, r0
 8000c02:	6199      	str	r1, [r3, #24]
 8000c04:	699a      	ldr	r2, [r3, #24]
 8000c06:	4002      	ands	r2, r0
 8000c08:	9201      	str	r2, [sp, #4]
 8000c0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	0289      	lsls	r1, r1, #10
 8000c12:	430a      	orrs	r2, r1
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	400b      	ands	r3, r1
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	3301      	adds	r3, #1
 8000c2a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c2c:	3b02      	subs	r3, #2
 8000c2e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	2090      	movs	r0, #144	; 0x90
 8000c32:	a903      	add	r1, sp, #12
 8000c34:	05c0      	lsls	r0, r0, #23
 8000c36:	f000 f94f 	bl	8000ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	201b      	movs	r0, #27
 8000c40:	f000 f8a0 	bl	8000d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c44:	201b      	movs	r0, #27
 8000c46:	f000 f8cf 	bl	8000de8 <HAL_NVIC_EnableIRQ>
}
 8000c4a:	e7d3      	b.n	8000bf4 <HAL_UART_MspInit+0x18>
 8000c4c:	40013800 	.word	0x40013800
 8000c50:	40021000 	.word	0x40021000

08000c54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c54:	4770      	bx	lr

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler>

08000c58 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 f86d 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bd10      	pop	{r4, pc}

08000c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c66:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART1_IRQHandler+0xc>)
 8000c68:	f001 fb02 	bl	8002270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	20000068 	.word	0x20000068

08000c74 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c74:	4770      	bx	lr
	...

08000c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ca2:	f7ff ffe7 	bl	8000c74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ca6:	f001 fe19 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000caa:	f7ff fbd3 	bl	8000454 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   r0, =_estack
 8000cb0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cbc:	080029a4 	.word	0x080029a4
  ldr r2, =_sbss
 8000cc0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cc4:	20000170 	.word	0x20000170

08000cc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_IRQHandler>
	...

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_InitTick+0x44>)
 8000cd2:	7819      	ldrb	r1, [r3, #0]
 8000cd4:	20fa      	movs	r0, #250	; 0xfa
 8000cd6:	0080      	lsls	r0, r0, #2
 8000cd8:	f7ff fa16 	bl	8000108 <__udivsi3>
 8000cdc:	0001      	movs	r1, r0
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_InitTick+0x48>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f7ff fa11 	bl	8000108 <__udivsi3>
 8000ce6:	f000 f88b 	bl	8000e00 <HAL_SYSTICK_Config>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d10d      	bne.n	8000d0a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	2c03      	cmp	r4, #3
 8000cf0:	d901      	bls.n	8000cf6 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	e00a      	b.n	8000d0c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	4240      	negs	r0, r0
 8000cfe:	f000 f841 	bl	8000d84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_InitTick+0x4c>)
 8000d04:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 8000d06:	2000      	movs	r0, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000d0a:	2001      	movs	r0, #1
}
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000010 	.word	0x20000010

08000d1c <HAL_Init>:
{
 8000d1c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1e:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_Init+0x1c>)
 8000d20:	6813      	ldr	r3, [r2, #0]
 8000d22:	2110      	movs	r1, #16
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ffcf 	bl	8000ccc <HAL_InitTick>
  HAL_MspInit();
 8000d2e:	f7ff fee5 	bl	8000afc <HAL_MspInit>
}
 8000d32:	2000      	movs	r0, #0
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40022000 	.word	0x40022000

08000d3c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <HAL_IncTick+0x10>)
 8000d3e:	6811      	ldr	r1, [r2, #0]
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_IncTick+0x14>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	185b      	adds	r3, r3, r1
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	4770      	bx	lr
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	2000016c 	.word	0x2000016c
 8000d50:	2000000c 	.word	0x2000000c

08000d54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d54:	4b01      	ldr	r3, [pc, #4]	; (8000d5c <HAL_GetTick+0x8>)
 8000d56:	6818      	ldr	r0, [r3, #0]
}
 8000d58:	4770      	bx	lr
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	2000016c 	.word	0x2000016c

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff fff6 	bl	8000d54 <HAL_GetTick>
 8000d68:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	1c63      	adds	r3, r4, #1
 8000d6c:	d002      	beq.n	8000d74 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_Delay+0x20>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	1b40      	subs	r0, r0, r5
 8000d7a:	42a0      	cmp	r0, r4
 8000d7c:	d3fa      	bcc.n	8000d74 <HAL_Delay+0x14>
  {
  }
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	2000000c 	.word	0x2000000c

08000d84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d84:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000d86:	2800      	cmp	r0, #0
 8000d88:	db11      	blt.n	8000dae <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8a:	0883      	lsrs	r3, r0, #2
 8000d8c:	4d14      	ldr	r5, [pc, #80]	; (8000de0 <HAL_NVIC_SetPriority+0x5c>)
 8000d8e:	33c0      	adds	r3, #192	; 0xc0
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	595c      	ldr	r4, [r3, r5]
 8000d94:	2203      	movs	r2, #3
 8000d96:	4010      	ands	r0, r2
 8000d98:	00c0      	lsls	r0, r0, #3
 8000d9a:	32fc      	adds	r2, #252	; 0xfc
 8000d9c:	0016      	movs	r6, r2
 8000d9e:	4086      	lsls	r6, r0
 8000da0:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da2:	0189      	lsls	r1, r1, #6
 8000da4:	400a      	ands	r2, r1
 8000da6:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	4322      	orrs	r2, r4
 8000daa:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000dac:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dae:	b2c0      	uxtb	r0, r0
 8000db0:	230f      	movs	r3, #15
 8000db2:	4003      	ands	r3, r0
 8000db4:	3b08      	subs	r3, #8
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3306      	adds	r3, #6
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_NVIC_SetPriority+0x60>)
 8000dbe:	4694      	mov	ip, r2
 8000dc0:	4463      	add	r3, ip
 8000dc2:	685d      	ldr	r5, [r3, #4]
 8000dc4:	2403      	movs	r4, #3
 8000dc6:	4020      	ands	r0, r4
 8000dc8:	00c0      	lsls	r0, r0, #3
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	0014      	movs	r4, r2
 8000dce:	4084      	lsls	r4, r0
 8000dd0:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd2:	0189      	lsls	r1, r1, #6
 8000dd4:	4011      	ands	r1, r2
 8000dd6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd8:	4329      	orrs	r1, r5
 8000dda:	6059      	str	r1, [r3, #4]
 8000ddc:	e7e6      	b.n	8000dac <HAL_NVIC_SetPriority+0x28>
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000de8:	2800      	cmp	r0, #0
 8000dea:	db05      	blt.n	8000df8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dec:	231f      	movs	r3, #31
 8000dee:	4018      	ands	r0, r3
 8000df0:	3b1e      	subs	r3, #30
 8000df2:	4083      	lsls	r3, r0
 8000df4:	4a01      	ldr	r2, [pc, #4]	; (8000dfc <HAL_NVIC_EnableIRQ+0x14>)
 8000df6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000df8:	4770      	bx	lr
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	3801      	subs	r0, #1
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_SYSTICK_Config+0x2c>)
 8000e04:	4298      	cmp	r0, r3
 8000e06:	d80f      	bhi.n	8000e28 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_SYSTICK_Config+0x30>)
 8000e0a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <HAL_SYSTICK_Config+0x34>)
 8000e0e:	6a03      	ldr	r3, [r0, #32]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	21c0      	movs	r1, #192	; 0xc0
 8000e16:	0609      	lsls	r1, r1, #24
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e20:	3307      	adds	r3, #7
 8000e22:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e26:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e28:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000e2a:	e7fc      	b.n	8000e26 <HAL_SYSTICK_Config+0x26>
 8000e2c:	00ffffff 	.word	0x00ffffff
 8000e30:	e000e010 	.word	0xe000e010
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e38:	b510      	push	{r4, lr}
 8000e3a:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e3c:	d025      	beq.n	8000e8a <HAL_CRC_Init+0x52>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e3e:	7d43      	ldrb	r3, [r0, #21]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d01a      	beq.n	8000e7a <HAL_CRC_Init+0x42>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e44:	2302      	movs	r3, #2
 8000e46:	7563      	strb	r3, [r4, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000e48:	7923      	ldrb	r3, [r4, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d119      	bne.n	8000e82 <HAL_CRC_Init+0x4a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4252      	negs	r2, r2
 8000e54:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000e56:	6822      	ldr	r2, [r4, #0]
 8000e58:	6893      	ldr	r3, [r2, #8]
 8000e5a:	2160      	movs	r1, #96	; 0x60
 8000e5c:	438b      	bics	r3, r1
 8000e5e:	68e1      	ldr	r1, [r4, #12]
 8000e60:	430b      	orrs	r3, r1
 8000e62:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	6893      	ldr	r3, [r2, #8]
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	438b      	bics	r3, r1
 8000e6c:	6921      	ldr	r1, [r4, #16]
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e72:	2301      	movs	r3, #1
 8000e74:	7563      	strb	r3, [r4, #21]

  /* Return function status */
  return HAL_OK;
 8000e76:	2000      	movs	r0, #0
}
 8000e78:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000e7a:	7503      	strb	r3, [r0, #20]
    HAL_CRC_MspInit(hcrc);
 8000e7c:	f7ff fe56 	bl	8000b2c <HAL_CRC_MspInit>
 8000e80:	e7e0      	b.n	8000e44 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	68a2      	ldr	r2, [r4, #8]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	e7e5      	b.n	8000e56 <HAL_CRC_Init+0x1e>
    return HAL_ERROR;
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e7f4      	b.n	8000e78 <HAL_CRC_Init+0x40>

08000e8e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e8e:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e90:	2321      	movs	r3, #33	; 0x21
 8000e92:	5cc3      	ldrb	r3, [r0, r3]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d003      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000e9e:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ea0:	6802      	ldr	r2, [r0, #0]
 8000ea2:	6813      	ldr	r3, [r2, #0]
 8000ea4:	210e      	movs	r1, #14
 8000ea6:	438b      	bics	r3, r1
 8000ea8:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eaa:	6801      	ldr	r1, [r0, #0]
 8000eac:	680a      	ldr	r2, [r1, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	439a      	bics	r2, r3
 8000eb2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000eba:	40a1      	lsls	r1, r4
 8000ebc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	2221      	movs	r2, #33	; 0x21
 8000ec0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000ec2:	331f      	adds	r3, #31
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000ec8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000ece:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e7e4      	b.n	8000e9e <HAL_DMA_Abort_IT+0x10>
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	e7e2      	b.n	8000e9e <HAL_DMA_Abort_IT+0x10>

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	46c6      	mov	lr, r8
 8000edc:	b500      	push	{lr}
 8000ede:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000ee0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e038      	b.n	8000f56 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee4:	2603      	movs	r6, #3
 8000ee6:	e000      	b.n	8000eea <HAL_GPIO_Init+0x12>
 8000ee8:	2600      	movs	r6, #0
 8000eea:	40ae      	lsls	r6, r5
 8000eec:	0035      	movs	r5, r6
 8000eee:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ef0:	3402      	adds	r4, #2
 8000ef2:	00a4      	lsls	r4, r4, #2
 8000ef4:	4e55      	ldr	r6, [pc, #340]	; (800104c <HAL_GPIO_Init+0x174>)
 8000ef6:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ef8:	4c55      	ldr	r4, [pc, #340]	; (8001050 <HAL_GPIO_Init+0x178>)
 8000efa:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000efc:	4642      	mov	r2, r8
 8000efe:	43d4      	mvns	r4, r2
 8000f00:	002e      	movs	r6, r5
 8000f02:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f04:	684a      	ldr	r2, [r1, #4]
 8000f06:	03d2      	lsls	r2, r2, #15
 8000f08:	d502      	bpl.n	8000f10 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000f0a:	4642      	mov	r2, r8
 8000f0c:	4315      	orrs	r5, r2
 8000f0e:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8000f10:	4d4f      	ldr	r5, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x178>)
 8000f12:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000f14:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000f16:	002e      	movs	r6, r5
 8000f18:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f1a:	684a      	ldr	r2, [r1, #4]
 8000f1c:	0392      	lsls	r2, r2, #14
 8000f1e:	d502      	bpl.n	8000f26 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000f20:	4642      	mov	r2, r8
 8000f22:	4315      	orrs	r5, r2
 8000f24:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8000f26:	4d4a      	ldr	r5, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x178>)
 8000f28:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8000f2c:	002e      	movs	r6, r5
 8000f2e:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f30:	684a      	ldr	r2, [r1, #4]
 8000f32:	02d2      	lsls	r2, r2, #11
 8000f34:	d502      	bpl.n	8000f3c <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000f36:	4642      	mov	r2, r8
 8000f38:	4315      	orrs	r5, r2
 8000f3a:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8000f3c:	4d44      	ldr	r5, [pc, #272]	; (8001050 <HAL_GPIO_Init+0x178>)
 8000f3e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000f40:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000f42:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	684a      	ldr	r2, [r1, #4]
 8000f46:	0292      	lsls	r2, r2, #10
 8000f48:	d502      	bpl.n	8000f50 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000f4a:	4642      	mov	r2, r8
 8000f4c:	432a      	orrs	r2, r5
 8000f4e:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8000f50:	4a3f      	ldr	r2, [pc, #252]	; (8001050 <HAL_GPIO_Init+0x178>)
 8000f52:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000f54:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	680a      	ldr	r2, [r1, #0]
 8000f58:	0014      	movs	r4, r2
 8000f5a:	40dc      	lsrs	r4, r3
 8000f5c:	d071      	beq.n	8001042 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f5e:	2501      	movs	r5, #1
 8000f60:	409d      	lsls	r5, r3
 8000f62:	402a      	ands	r2, r5
 8000f64:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 8000f66:	d0f5      	beq.n	8000f54 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	684c      	ldr	r4, [r1, #4]
 8000f6a:	2c02      	cmp	r4, #2
 8000f6c:	d001      	beq.n	8000f72 <HAL_GPIO_Init+0x9a>
 8000f6e:	2c12      	cmp	r4, #18
 8000f70:	d10e      	bne.n	8000f90 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8000f72:	08dc      	lsrs	r4, r3, #3
 8000f74:	3408      	adds	r4, #8
 8000f76:	00a4      	lsls	r4, r4, #2
 8000f78:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7a:	2607      	movs	r6, #7
 8000f7c:	401e      	ands	r6, r3
 8000f7e:	00b6      	lsls	r6, r6, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	40b2      	lsls	r2, r6
 8000f84:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f86:	690a      	ldr	r2, [r1, #16]
 8000f88:	40b2      	lsls	r2, r6
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000f8e:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8000f90:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f92:	005f      	lsls	r7, r3, #1
 8000f94:	2403      	movs	r4, #3
 8000f96:	0026      	movs	r6, r4
 8000f98:	40be      	lsls	r6, r7
 8000f9a:	43f6      	mvns	r6, r6
 8000f9c:	4032      	ands	r2, r6
 8000f9e:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa0:	684a      	ldr	r2, [r1, #4]
 8000fa2:	4014      	ands	r4, r2
 8000fa4:	40bc      	lsls	r4, r7
 8000fa6:	4662      	mov	r2, ip
 8000fa8:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000faa:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fac:	684c      	ldr	r4, [r1, #4]
 8000fae:	1e62      	subs	r2, r4, #1
 8000fb0:	2a01      	cmp	r2, #1
 8000fb2:	d903      	bls.n	8000fbc <HAL_GPIO_Init+0xe4>
 8000fb4:	2c11      	cmp	r4, #17
 8000fb6:	d001      	beq.n	8000fbc <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	2c12      	cmp	r4, #18
 8000fba:	d110      	bne.n	8000fde <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 8000fbc:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fbe:	4034      	ands	r4, r6
 8000fc0:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc2:	68cc      	ldr	r4, [r1, #12]
 8000fc4:	40bc      	lsls	r4, r7
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8000fca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fcc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fce:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fd0:	684a      	ldr	r2, [r1, #4]
 8000fd2:	0912      	lsrs	r2, r2, #4
 8000fd4:	2501      	movs	r5, #1
 8000fd6:	4015      	ands	r5, r2
 8000fd8:	409d      	lsls	r5, r3
 8000fda:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 8000fdc:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fde:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fe0:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fe2:	688c      	ldr	r4, [r1, #8]
 8000fe4:	40bc      	lsls	r4, r7
 8000fe6:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000fe8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fea:	684a      	ldr	r2, [r1, #4]
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	d5b1      	bpl.n	8000f54 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4d18      	ldr	r5, [pc, #96]	; (8001054 <HAL_GPIO_Init+0x17c>)
 8000ff2:	69ae      	ldr	r6, [r5, #24]
 8000ff4:	2401      	movs	r4, #1
 8000ff6:	4326      	orrs	r6, r4
 8000ff8:	61ae      	str	r6, [r5, #24]
 8000ffa:	69ad      	ldr	r5, [r5, #24]
 8000ffc:	402c      	ands	r4, r5
 8000ffe:	9401      	str	r4, [sp, #4]
 8001000:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001002:	089c      	lsrs	r4, r3, #2
 8001004:	1ca5      	adds	r5, r4, #2
 8001006:	00ad      	lsls	r5, r5, #2
 8001008:	4e10      	ldr	r6, [pc, #64]	; (800104c <HAL_GPIO_Init+0x174>)
 800100a:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100c:	2503      	movs	r5, #3
 800100e:	401d      	ands	r5, r3
 8001010:	00ad      	lsls	r5, r5, #2
 8001012:	260f      	movs	r6, #15
 8001014:	40ae      	lsls	r6, r5
 8001016:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001018:	2690      	movs	r6, #144	; 0x90
 800101a:	05f6      	lsls	r6, r6, #23
 800101c:	42b0      	cmp	r0, r6
 800101e:	d100      	bne.n	8001022 <HAL_GPIO_Init+0x14a>
 8001020:	e762      	b.n	8000ee8 <HAL_GPIO_Init+0x10>
 8001022:	4e0d      	ldr	r6, [pc, #52]	; (8001058 <HAL_GPIO_Init+0x180>)
 8001024:	42b0      	cmp	r0, r6
 8001026:	d008      	beq.n	800103a <HAL_GPIO_Init+0x162>
 8001028:	4e0c      	ldr	r6, [pc, #48]	; (800105c <HAL_GPIO_Init+0x184>)
 800102a:	42b0      	cmp	r0, r6
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x166>
 800102e:	4e0c      	ldr	r6, [pc, #48]	; (8001060 <HAL_GPIO_Init+0x188>)
 8001030:	42b0      	cmp	r0, r6
 8001032:	d100      	bne.n	8001036 <HAL_GPIO_Init+0x15e>
 8001034:	e756      	b.n	8000ee4 <HAL_GPIO_Init+0xc>
 8001036:	2605      	movs	r6, #5
 8001038:	e757      	b.n	8000eea <HAL_GPIO_Init+0x12>
 800103a:	2601      	movs	r6, #1
 800103c:	e755      	b.n	8000eea <HAL_GPIO_Init+0x12>
 800103e:	2602      	movs	r6, #2
 8001040:	e753      	b.n	8000eea <HAL_GPIO_Init+0x12>
  } 
}
 8001042:	b002      	add	sp, #8
 8001044:	bc04      	pop	{r2}
 8001046:	4690      	mov	r8, r2
 8001048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40010000 	.word	0x40010000
 8001050:	40010400 	.word	0x40010400
 8001054:	40021000 	.word	0x40021000
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	48000c00 	.word	0x48000c00

08001064 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001064:	2a00      	cmp	r2, #0
 8001066:	d101      	bne.n	800106c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001068:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800106a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106c:	6181      	str	r1, [r0, #24]
 800106e:	e7fc      	b.n	800106a <HAL_GPIO_WritePin+0x6>

08001070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b570      	push	{r4, r5, r6, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0xa>
 8001078:	e232      	b.n	80014e0 <HAL_RCC_OscConfig+0x470>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	6803      	ldr	r3, [r0, #0]
 800107c:	07db      	lsls	r3, r3, #31
 800107e:	d526      	bpl.n	80010ce <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001080:	4bae      	ldr	r3, [pc, #696]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	230c      	movs	r3, #12
 8001086:	4013      	ands	r3, r2
 8001088:	2b04      	cmp	r3, #4
 800108a:	d018      	beq.n	80010be <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800108c:	4bab      	ldr	r3, [pc, #684]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	230c      	movs	r3, #12
 8001092:	4013      	ands	r3, r2
 8001094:	2b08      	cmp	r3, #8
 8001096:	d00e      	beq.n	80010b6 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d03c      	beq.n	8001118 <HAL_RCC_OscConfig+0xa8>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d151      	bne.n	8001146 <HAL_RCC_OscConfig+0xd6>
 80010a2:	4ba6      	ldr	r3, [pc, #664]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	49a6      	ldr	r1, [pc, #664]	; (8001340 <HAL_RCC_OscConfig+0x2d0>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	49a5      	ldr	r1, [pc, #660]	; (8001344 <HAL_RCC_OscConfig+0x2d4>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e036      	b.n	8001124 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b6:	4ba1      	ldr	r3, [pc, #644]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	03db      	lsls	r3, r3, #15
 80010bc:	d5ec      	bpl.n	8001098 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010be:	4b9f      	ldr	r3, [pc, #636]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	039b      	lsls	r3, r3, #14
 80010c4:	d503      	bpl.n	80010ce <HAL_RCC_OscConfig+0x5e>
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <HAL_RCC_OscConfig+0x5e>
 80010cc:	e20b      	b.n	80014e6 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	079b      	lsls	r3, r3, #30
 80010d2:	d573      	bpl.n	80011bc <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010d4:	4b99      	ldr	r3, [pc, #612]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	220c      	movs	r2, #12
 80010da:	421a      	tst	r2, r3
 80010dc:	d05d      	beq.n	800119a <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010de:	4b97      	ldr	r3, [pc, #604]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	230c      	movs	r3, #12
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d053      	beq.n	8001192 <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ea:	68e3      	ldr	r3, [r4, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d100      	bne.n	80010f2 <HAL_RCC_OscConfig+0x82>
 80010f0:	e086      	b.n	8001200 <HAL_RCC_OscConfig+0x190>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f2:	4a92      	ldr	r2, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80010f4:	6813      	ldr	r3, [r2, #0]
 80010f6:	2101      	movs	r1, #1
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fe2a 	bl	8000d54 <HAL_GetTick>
 8001100:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	4b8e      	ldr	r3, [pc, #568]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	079b      	lsls	r3, r3, #30
 8001108:	d471      	bmi.n	80011ee <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fe23 	bl	8000d54 <HAL_GetTick>
 800110e:	1b40      	subs	r0, r0, r5
 8001110:	2802      	cmp	r0, #2
 8001112:	d9f6      	bls.n	8001102 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8001114:	2003      	movs	r0, #3
 8001116:	e1e4      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	4a88      	ldr	r2, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800111a:	6811      	ldr	r1, [r2, #0]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	025b      	lsls	r3, r3, #9
 8001120:	430b      	orrs	r3, r1
 8001122:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d025      	beq.n	8001176 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800112a:	f7ff fe13 	bl	8000d54 <HAL_GetTick>
 800112e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001130:	4b82      	ldr	r3, [pc, #520]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	039b      	lsls	r3, r3, #14
 8001136:	d4ca      	bmi.n	80010ce <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fe0c 	bl	8000d54 <HAL_GetTick>
 800113c:	1b40      	subs	r0, r0, r5
 800113e:	2864      	cmp	r0, #100	; 0x64
 8001140:	d9f6      	bls.n	8001130 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8001142:	2003      	movs	r0, #3
 8001144:	e1cd      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001146:	2b05      	cmp	r3, #5
 8001148:	d009      	beq.n	800115e <HAL_RCC_OscConfig+0xee>
 800114a:	4b7c      	ldr	r3, [pc, #496]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	497c      	ldr	r1, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x2d0>)
 8001150:	400a      	ands	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	497b      	ldr	r1, [pc, #492]	; (8001344 <HAL_RCC_OscConfig+0x2d4>)
 8001158:	400a      	ands	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e7e2      	b.n	8001124 <HAL_RCC_OscConfig+0xb4>
 800115e:	4b77      	ldr	r3, [pc, #476]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	02d2      	lsls	r2, r2, #11
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	6819      	ldr	r1, [r3, #0]
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0252      	lsls	r2, r2, #9
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e7d6      	b.n	8001124 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 8001176:	f7ff fded 	bl	8000d54 <HAL_GetTick>
 800117a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117c:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	039b      	lsls	r3, r3, #14
 8001182:	d5a4      	bpl.n	80010ce <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fde6 	bl	8000d54 <HAL_GetTick>
 8001188:	1b40      	subs	r0, r0, r5
 800118a:	2864      	cmp	r0, #100	; 0x64
 800118c:	d9f6      	bls.n	800117c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800118e:	2003      	movs	r0, #3
 8001190:	e1a7      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001192:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	03db      	lsls	r3, r3, #15
 8001198:	d4a7      	bmi.n	80010ea <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	079b      	lsls	r3, r3, #30
 80011a0:	d504      	bpl.n	80011ac <HAL_RCC_OscConfig+0x13c>
 80011a2:	68e3      	ldr	r3, [r4, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_OscConfig+0x13c>
        return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
 80011aa:	e19a      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4963      	ldr	r1, [pc, #396]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80011ae:	680b      	ldr	r3, [r1, #0]
 80011b0:	22f8      	movs	r2, #248	; 0xf8
 80011b2:	4393      	bics	r3, r2
 80011b4:	6922      	ldr	r2, [r4, #16]
 80011b6:	00d2      	lsls	r2, r2, #3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	071b      	lsls	r3, r3, #28
 80011c0:	d544      	bpl.n	800124c <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c2:	69e3      	ldr	r3, [r4, #28]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d02e      	beq.n	8001226 <HAL_RCC_OscConfig+0x1b6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c8:	4a5c      	ldr	r2, [pc, #368]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80011ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80011cc:	2101      	movs	r1, #1
 80011ce:	430b      	orrs	r3, r1
 80011d0:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fdbf 	bl	8000d54 <HAL_GetTick>
 80011d6:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d8:	4b58      	ldr	r3, [pc, #352]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	079b      	lsls	r3, r3, #30
 80011de:	d435      	bmi.n	800124c <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e0:	f7ff fdb8 	bl	8000d54 <HAL_GetTick>
 80011e4:	1b40      	subs	r0, r0, r5
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d9f6      	bls.n	80011d8 <HAL_RCC_OscConfig+0x168>
        {
          return HAL_TIMEOUT;
 80011ea:	2003      	movs	r0, #3
 80011ec:	e179      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4953      	ldr	r1, [pc, #332]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80011f0:	680b      	ldr	r3, [r1, #0]
 80011f2:	22f8      	movs	r2, #248	; 0xf8
 80011f4:	4393      	bics	r3, r2
 80011f6:	6922      	ldr	r2, [r4, #16]
 80011f8:	00d2      	lsls	r2, r2, #3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e7dd      	b.n	80011bc <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001200:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	438b      	bics	r3, r1
 8001208:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800120a:	f7ff fda3 	bl	8000d54 <HAL_GetTick>
 800120e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	079b      	lsls	r3, r3, #30
 8001216:	d5d1      	bpl.n	80011bc <HAL_RCC_OscConfig+0x14c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fd9c 	bl	8000d54 <HAL_GetTick>
 800121c:	1b40      	subs	r0, r0, r5
 800121e:	2802      	cmp	r0, #2
 8001220:	d9f6      	bls.n	8001210 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
 8001224:	e15d      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001226:	4a45      	ldr	r2, [pc, #276]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001228:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800122a:	2101      	movs	r1, #1
 800122c:	438b      	bics	r3, r1
 800122e:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fd90 	bl	8000d54 <HAL_GetTick>
 8001234:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	079b      	lsls	r3, r3, #30
 800123c:	d506      	bpl.n	800124c <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fd89 	bl	8000d54 <HAL_GetTick>
 8001242:	1b40      	subs	r0, r0, r5
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_TIMEOUT;
 8001248:	2003      	movs	r0, #3
 800124a:	e14a      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	075b      	lsls	r3, r3, #29
 8001250:	d400      	bmi.n	8001254 <HAL_RCC_OscConfig+0x1e4>
 8001252:	e07f      	b.n	8001354 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001254:	4b39      	ldr	r3, [pc, #228]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	d41d      	bmi.n	8001298 <HAL_RCC_OscConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4a37      	ldr	r2, [pc, #220]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800125e:	69d1      	ldr	r1, [r2, #28]
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	0540      	lsls	r0, r0, #21
 8001264:	4301      	orrs	r1, r0
 8001266:	61d1      	str	r1, [r2, #28]
 8001268:	69d3      	ldr	r3, [r2, #28]
 800126a:	4003      	ands	r3, r0
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001270:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_RCC_OscConfig+0x2d8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	d510      	bpl.n	800129c <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127a:	68a3      	ldr	r3, [r4, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d021      	beq.n	80012c4 <HAL_RCC_OscConfig+0x254>
 8001280:	2b00      	cmp	r3, #0
 8001282:	d136      	bne.n	80012f2 <HAL_RCC_OscConfig+0x282>
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	2101      	movs	r1, #1
 800128a:	438a      	bics	r2, r1
 800128c:	621a      	str	r2, [r3, #32]
 800128e:	6a1a      	ldr	r2, [r3, #32]
 8001290:	3103      	adds	r1, #3
 8001292:	438a      	bics	r2, r1
 8001294:	621a      	str	r2, [r3, #32]
 8001296:	e01a      	b.n	80012ce <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8001298:	2500      	movs	r5, #0
 800129a:	e7ea      	b.n	8001272 <HAL_RCC_OscConfig+0x202>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129c:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <HAL_RCC_OscConfig+0x2d8>)
 800129e:	6811      	ldr	r1, [r2, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	430b      	orrs	r3, r1
 80012a6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012a8:	f7ff fd54 	bl	8000d54 <HAL_GetTick>
 80012ac:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_RCC_OscConfig+0x2d8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	d4e1      	bmi.n	800127a <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b6:	f7ff fd4d 	bl	8000d54 <HAL_GetTick>
 80012ba:	1b80      	subs	r0, r0, r6
 80012bc:	2864      	cmp	r0, #100	; 0x64
 80012be:	d9f6      	bls.n	80012ae <HAL_RCC_OscConfig+0x23e>
          return HAL_TIMEOUT;
 80012c0:	2003      	movs	r0, #3
 80012c2:	e10e      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80012c6:	6a13      	ldr	r3, [r2, #32]
 80012c8:	2101      	movs	r1, #1
 80012ca:	430b      	orrs	r3, r1
 80012cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ce:	68a3      	ldr	r3, [r4, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d024      	beq.n	800131e <HAL_RCC_OscConfig+0x2ae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fd3e 	bl	8000d54 <HAL_GetTick>
 80012d8:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	079b      	lsls	r3, r3, #30
 80012e0:	d436      	bmi.n	8001350 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fd37 	bl	8000d54 <HAL_GetTick>
 80012e6:	1b80      	subs	r0, r0, r6
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_RCC_OscConfig+0x2dc>)
 80012ea:	4298      	cmp	r0, r3
 80012ec:	d9f5      	bls.n	80012da <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 80012ee:	2003      	movs	r0, #3
 80012f0:	e0f7      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d009      	beq.n	800130a <HAL_RCC_OscConfig+0x29a>
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	2101      	movs	r1, #1
 80012fc:	438a      	bics	r2, r1
 80012fe:	621a      	str	r2, [r3, #32]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	3103      	adds	r1, #3
 8001304:	438a      	bics	r2, r1
 8001306:	621a      	str	r2, [r3, #32]
 8001308:	e7e1      	b.n	80012ce <HAL_RCC_OscConfig+0x25e>
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	2104      	movs	r1, #4
 8001310:	430a      	orrs	r2, r1
 8001312:	621a      	str	r2, [r3, #32]
 8001314:	6a1a      	ldr	r2, [r3, #32]
 8001316:	3903      	subs	r1, #3
 8001318:	430a      	orrs	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	e7d7      	b.n	80012ce <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fd19 	bl	8000d54 <HAL_GetTick>
 8001322:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_OscConfig+0x2cc>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	079b      	lsls	r3, r3, #30
 800132a:	d511      	bpl.n	8001350 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7ff fd12 	bl	8000d54 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_RCC_OscConfig+0x2dc>)
 8001334:	4298      	cmp	r0, r3
 8001336:	d9f5      	bls.n	8001324 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e0d2      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
 800133c:	40021000 	.word	0x40021000
 8001340:	fffeffff 	.word	0xfffeffff
 8001344:	fffbffff 	.word	0xfffbffff
 8001348:	40007000 	.word	0x40007000
 800134c:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001350:	2d01      	cmp	r5, #1
 8001352:	d033      	beq.n	80013bc <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	06db      	lsls	r3, r3, #27
 8001358:	d510      	bpl.n	800137c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800135a:	6963      	ldr	r3, [r4, #20]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d033      	beq.n	80013c8 <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001360:	3305      	adds	r3, #5
 8001362:	d151      	bne.n	8001408 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001364:	4a64      	ldr	r2, [pc, #400]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 8001366:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001368:	2104      	movs	r1, #4
 800136a:	438b      	bics	r3, r1
 800136c:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800136e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001370:	31f4      	adds	r1, #244	; 0xf4
 8001372:	438b      	bics	r3, r1
 8001374:	69a1      	ldr	r1, [r4, #24]
 8001376:	00c9      	lsls	r1, r1, #3
 8001378:	430b      	orrs	r3, r1
 800137a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137c:	6a23      	ldr	r3, [r4, #32]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <HAL_RCC_OscConfig+0x314>
 8001382:	e0b2      	b.n	80014ea <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 8001386:	6851      	ldr	r1, [r2, #4]
 8001388:	220c      	movs	r2, #12
 800138a:	400a      	ands	r2, r1
 800138c:	2a08      	cmp	r2, #8
 800138e:	d100      	bne.n	8001392 <HAL_RCC_OscConfig+0x322>
 8001390:	e08a      	b.n	80014a8 <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001392:	2b02      	cmp	r3, #2
 8001394:	d04f      	beq.n	8001436 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4a58      	ldr	r2, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 8001398:	6813      	ldr	r3, [r2, #0]
 800139a:	4958      	ldr	r1, [pc, #352]	; (80014fc <HAL_RCC_OscConfig+0x48c>)
 800139c:	400b      	ands	r3, r1
 800139e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fcd8 	bl	8000d54 <HAL_GetTick>
 80013a4:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	019b      	lsls	r3, r3, #6
 80013ac:	d57a      	bpl.n	80014a4 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fcd1 	bl	8000d54 <HAL_GetTick>
 80013b2:	1b00      	subs	r0, r0, r4
 80013b4:	2802      	cmp	r0, #2
 80013b6:	d9f6      	bls.n	80013a6 <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 80013b8:	2003      	movs	r0, #3
 80013ba:	e092      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 80013be:	69d3      	ldr	r3, [r2, #28]
 80013c0:	494f      	ldr	r1, [pc, #316]	; (8001500 <HAL_RCC_OscConfig+0x490>)
 80013c2:	400b      	ands	r3, r1
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	e7c5      	b.n	8001354 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 80013ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013cc:	2104      	movs	r1, #4
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	3903      	subs	r1, #3
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80013da:	f7ff fcbb 	bl	8000d54 <HAL_GetTick>
 80013de:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	079b      	lsls	r3, r3, #30
 80013e6:	d406      	bmi.n	80013f6 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013e8:	f7ff fcb4 	bl	8000d54 <HAL_GetTick>
 80013ec:	1b40      	subs	r0, r0, r5
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9f6      	bls.n	80013e0 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 80013f2:	2003      	movs	r0, #3
 80013f4:	e075      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013f6:	4940      	ldr	r1, [pc, #256]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 80013f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80013fa:	22f8      	movs	r2, #248	; 0xf8
 80013fc:	4393      	bics	r3, r2
 80013fe:	69a2      	ldr	r2, [r4, #24]
 8001400:	00d2      	lsls	r2, r2, #3
 8001402:	4313      	orrs	r3, r2
 8001404:	634b      	str	r3, [r1, #52]	; 0x34
 8001406:	e7b9      	b.n	800137c <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001408:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 800140a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140c:	2104      	movs	r1, #4
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001414:	3903      	subs	r1, #3
 8001416:	438a      	bics	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800141a:	f7ff fc9b 	bl	8000d54 <HAL_GetTick>
 800141e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	079b      	lsls	r3, r3, #30
 8001426:	d5a9      	bpl.n	800137c <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001428:	f7ff fc94 	bl	8000d54 <HAL_GetTick>
 800142c:	1b40      	subs	r0, r0, r5
 800142e:	2802      	cmp	r0, #2
 8001430:	d9f6      	bls.n	8001420 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8001432:	2003      	movs	r0, #3
 8001434:	e055      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_DISABLE();
 8001436:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	4930      	ldr	r1, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x48c>)
 800143c:	400b      	ands	r3, r1
 800143e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001440:	f7ff fc88 	bl	8000d54 <HAL_GetTick>
 8001444:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	019b      	lsls	r3, r3, #6
 800144c:	d506      	bpl.n	800145c <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fc81 	bl	8000d54 <HAL_GetTick>
 8001452:	1b40      	subs	r0, r0, r5
 8001454:	2802      	cmp	r0, #2
 8001456:	d9f6      	bls.n	8001446 <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8001458:	2003      	movs	r0, #3
 800145a:	e042      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	210f      	movs	r1, #15
 8001462:	438a      	bics	r2, r1
 8001464:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001466:	430a      	orrs	r2, r1
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4925      	ldr	r1, [pc, #148]	; (8001504 <HAL_RCC_OscConfig+0x494>)
 800146e:	400a      	ands	r2, r1
 8001470:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001472:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001474:	4301      	orrs	r1, r0
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800147a:	6819      	ldr	r1, [r3, #0]
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	0452      	lsls	r2, r2, #17
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001484:	f7ff fc66 	bl	8000d54 <HAL_GetTick>
 8001488:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	019b      	lsls	r3, r3, #6
 8001490:	d406      	bmi.n	80014a0 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff fc5f 	bl	8000d54 <HAL_GetTick>
 8001496:	1b00      	subs	r0, r0, r4
 8001498:	2802      	cmp	r0, #2
 800149a:	d9f6      	bls.n	800148a <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 800149c:	2003      	movs	r0, #3
 800149e:	e020      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }

  return HAL_OK;
 80014a0:	2000      	movs	r0, #0
 80014a2:	e01e      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
 80014a4:	2000      	movs	r0, #0
 80014a6:	e01c      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x47e>
        pll_config  = RCC->CFGR;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_OscConfig+0x488>)
 80014ae:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4013      	ands	r3, r2
 80014b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014ba:	4283      	cmp	r3, r0
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x452>
          return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
 80014c0:	e00f      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014c2:	230f      	movs	r3, #15
 80014c4:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 80014cc:	2001      	movs	r0, #1
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014d0:	23f0      	movs	r3, #240	; 0xf0
 80014d2:	039b      	lsls	r3, r3, #14
 80014d4:	401a      	ands	r2, r3
 80014d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d00a      	beq.n	80014f2 <HAL_RCC_OscConfig+0x482>
          return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	b002      	add	sp, #8
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
 80014e8:	e7fb      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e7f9      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
        return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e7f7      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 80014f2:	2000      	movs	r0, #0
 80014f4:	e7f5      	b.n	80014e2 <HAL_RCC_OscConfig+0x472>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40021000 	.word	0x40021000
 80014fc:	feffffff 	.word	0xfeffffff
 8001500:	efffffff 	.word	0xefffffff
 8001504:	ffc2ffff 	.word	0xffc2ffff

08001508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800150c:	aa04      	add	r2, sp, #16
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_RCC_GetSysClockFreq+0x64>)
 8001510:	0018      	movs	r0, r3
 8001512:	c832      	ldmia	r0!, {r1, r4, r5}
 8001514:	c232      	stmia	r2!, {r1, r4, r5}
 8001516:	0011      	movs	r1, r2
 8001518:	6802      	ldr	r2, [r0, #0]
 800151a:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800151c:	466a      	mov	r2, sp
 800151e:	3310      	adds	r3, #16
 8001520:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001522:	c213      	stmia	r2!, {r0, r1, r4}
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_RCC_GetSysClockFreq+0x68>)
 800152a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800152c:	230c      	movs	r3, #12
 800152e:	4013      	ands	r3, r2
 8001530:	2b08      	cmp	r3, #8
 8001532:	d119      	bne.n	8001568 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001534:	0c91      	lsrs	r1, r2, #18
 8001536:	3307      	adds	r3, #7
 8001538:	4019      	ands	r1, r3
 800153a:	a804      	add	r0, sp, #16
 800153c:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800153e:	490c      	ldr	r1, [pc, #48]	; (8001570 <HAL_RCC_GetSysClockFreq+0x68>)
 8001540:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001542:	400b      	ands	r3, r1
 8001544:	4669      	mov	r1, sp
 8001546:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001548:	03d3      	lsls	r3, r2, #15
 800154a:	d408      	bmi.n	800155e <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800154c:	0163      	lsls	r3, r4, #5
 800154e:	1b1b      	subs	r3, r3, r4
 8001550:	0198      	lsls	r0, r3, #6
 8001552:	1ac0      	subs	r0, r0, r3
 8001554:	00c0      	lsls	r0, r0, #3
 8001556:	1904      	adds	r4, r0, r4
 8001558:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800155a:	b009      	add	sp, #36	; 0x24
 800155c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001560:	f7fe fdd2 	bl	8000108 <__udivsi3>
 8001564:	4360      	muls	r0, r4
 8001566:	e7f8      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800156a:	e7f6      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x52>
 800156c:	08002964 	.word	0x08002964
 8001570:	40021000 	.word	0x40021000
 8001574:	007a1200 	.word	0x007a1200

08001578 <HAL_RCC_ClockConfig>:
{
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	0004      	movs	r4, r0
 800157c:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800157e:	2800      	cmp	r0, #0
 8001580:	d100      	bne.n	8001584 <HAL_RCC_ClockConfig+0xc>
 8001582:	e081      	b.n	8001688 <HAL_RCC_ClockConfig+0x110>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b42      	ldr	r3, [pc, #264]	; (8001690 <HAL_RCC_ClockConfig+0x118>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	4013      	ands	r3, r2
 800158c:	428b      	cmp	r3, r1
 800158e:	d20b      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001590:	493f      	ldr	r1, [pc, #252]	; (8001690 <HAL_RCC_ClockConfig+0x118>)
 8001592:	680b      	ldr	r3, [r1, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4393      	bics	r3, r2
 8001598:	432b      	orrs	r3, r5
 800159a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159c:	680b      	ldr	r3, [r1, #0]
 800159e:	401a      	ands	r2, r3
 80015a0:	42aa      	cmp	r2, r5
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
 80015a6:	e070      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	079a      	lsls	r2, r3, #30
 80015ac:	d50e      	bpl.n	80015cc <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ae:	075b      	lsls	r3, r3, #29
 80015b0:	d505      	bpl.n	80015be <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015b2:	4a38      	ldr	r2, [pc, #224]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 80015b4:	6851      	ldr	r1, [r2, #4]
 80015b6:	23e0      	movs	r3, #224	; 0xe0
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	430b      	orrs	r3, r1
 80015bc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015be:	4a35      	ldr	r2, [pc, #212]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 80015c0:	6853      	ldr	r3, [r2, #4]
 80015c2:	21f0      	movs	r1, #240	; 0xf0
 80015c4:	438b      	bics	r3, r1
 80015c6:	68a1      	ldr	r1, [r4, #8]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	07db      	lsls	r3, r3, #31
 80015d0:	d52d      	bpl.n	800162e <HAL_RCC_ClockConfig+0xb6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	6863      	ldr	r3, [r4, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d01e      	beq.n	8001616 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d022      	beq.n	8001622 <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	0792      	lsls	r2, r2, #30
 80015e2:	d553      	bpl.n	800168c <HAL_RCC_ClockConfig+0x114>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e4:	492b      	ldr	r1, [pc, #172]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 80015e6:	684a      	ldr	r2, [r1, #4]
 80015e8:	2003      	movs	r0, #3
 80015ea:	4382      	bics	r2, r0
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80015f0:	f7ff fbb0 	bl	8000d54 <HAL_GetTick>
 80015f4:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	220c      	movs	r2, #12
 80015fc:	401a      	ands	r2, r3
 80015fe:	6863      	ldr	r3, [r4, #4]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	429a      	cmp	r2, r3
 8001604:	d013      	beq.n	800162e <HAL_RCC_ClockConfig+0xb6>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001606:	f7ff fba5 	bl	8000d54 <HAL_GetTick>
 800160a:	1b80      	subs	r0, r0, r6
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_RCC_ClockConfig+0x120>)
 800160e:	4298      	cmp	r0, r3
 8001610:	d9f1      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001612:	2003      	movs	r0, #3
 8001614:	e039      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	0392      	lsls	r2, r2, #14
 800161c:	d4e2      	bmi.n	80015e4 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 800161e:	2001      	movs	r0, #1
 8001620:	e033      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	0192      	lsls	r2, r2, #6
 8001628:	d4dc      	bmi.n	80015e4 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 800162a:	2001      	movs	r0, #1
 800162c:	e02d      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_RCC_ClockConfig+0x118>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2301      	movs	r3, #1
 8001634:	4013      	ands	r3, r2
 8001636:	42ab      	cmp	r3, r5
 8001638:	d90b      	bls.n	8001652 <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4915      	ldr	r1, [pc, #84]	; (8001690 <HAL_RCC_ClockConfig+0x118>)
 800163c:	680b      	ldr	r3, [r1, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	4393      	bics	r3, r2
 8001642:	432b      	orrs	r3, r5
 8001644:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	680b      	ldr	r3, [r1, #0]
 8001648:	401a      	ands	r2, r3
 800164a:	42aa      	cmp	r2, r5
 800164c:	d001      	beq.n	8001652 <HAL_RCC_ClockConfig+0xda>
      return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e01b      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	075b      	lsls	r3, r3, #29
 8001656:	d506      	bpl.n	8001666 <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 800165a:	6853      	ldr	r3, [r2, #4]
 800165c:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_RCC_ClockConfig+0x124>)
 800165e:	400b      	ands	r3, r1
 8001660:	68e1      	ldr	r1, [r4, #12]
 8001662:	430b      	orrs	r3, r1
 8001664:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001666:	f7ff ff4f 	bl	8001508 <HAL_RCC_GetSysClockFreq>
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x11c>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	0912      	lsrs	r2, r2, #4
 8001670:	230f      	movs	r3, #15
 8001672:	4013      	ands	r3, r2
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_RCC_ClockConfig+0x128>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	40d8      	lsrs	r0, r3
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x12c>)
 800167c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff fb24 	bl	8000ccc <HAL_InitTick>
  return HAL_OK;
 8001684:	2000      	movs	r0, #0
 8001686:	e000      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
    return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
}
 800168a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
 800168e:	e7fc      	b.n	800168a <HAL_RCC_ClockConfig+0x112>
 8001690:	40022000 	.word	0x40022000
 8001694:	40021000 	.word	0x40021000
 8001698:	00001388 	.word	0x00001388
 800169c:	fffff8ff 	.word	0xfffff8ff
 80016a0:	08002984 	.word	0x08002984
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80016a8:	4b01      	ldr	r3, [pc, #4]	; (80016b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80016aa:	6818      	ldr	r0, [r3, #0]
}
 80016ac:	4770      	bx	lr
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000008 	.word	0x20000008

080016b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016b6:	f7ff fff7 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	0a12      	lsrs	r2, r2, #8
 80016c0:	2307      	movs	r3, #7
 80016c2:	4013      	ands	r3, r2
 80016c4:	4a02      	ldr	r2, [pc, #8]	; (80016d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	40d8      	lsrs	r0, r3
}    
 80016ca:	bd10      	pop	{r4, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	08002994 	.word	0x08002994

080016d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016da:	6803      	ldr	r3, [r0, #0]
 80016dc:	03db      	lsls	r3, r3, #15
 80016de:	d535      	bpl.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	d448      	bmi.n	800177a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	4a3a      	ldr	r2, [pc, #232]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80016ea:	69d1      	ldr	r1, [r2, #28]
 80016ec:	2080      	movs	r0, #128	; 0x80
 80016ee:	0540      	lsls	r0, r0, #21
 80016f0:	4301      	orrs	r1, r0
 80016f2:	61d1      	str	r1, [r2, #28]
 80016f4:	69d3      	ldr	r3, [r2, #28]
 80016f6:	4003      	ands	r3, r0
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016fc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	05db      	lsls	r3, r3, #23
 8001704:	d53b      	bpl.n	800177e <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	22c0      	movs	r2, #192	; 0xc0
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001710:	d013      	beq.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001712:	6861      	ldr	r1, [r4, #4]
 8001714:	400a      	ands	r2, r1
 8001716:	429a      	cmp	r2, r3
 8001718:	d00f      	beq.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800171c:	6a18      	ldr	r0, [r3, #32]
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001720:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001722:	6a1e      	ldr	r6, [r3, #32]
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0249      	lsls	r1, r1, #9
 8001728:	4331      	orrs	r1, r6
 800172a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800172c:	6a19      	ldr	r1, [r3, #32]
 800172e:	4e2c      	ldr	r6, [pc, #176]	; (80017e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001730:	4031      	ands	r1, r6
 8001732:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001734:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001736:	07c3      	lsls	r3, r0, #31
 8001738:	d435      	bmi.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800173a:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800173c:	6a13      	ldr	r3, [r2, #32]
 800173e:	4927      	ldr	r1, [pc, #156]	; (80017dc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001740:	400b      	ands	r3, r1
 8001742:	6861      	ldr	r1, [r4, #4]
 8001744:	430b      	orrs	r3, r1
 8001746:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001748:	2d01      	cmp	r5, #1
 800174a:	d03b      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	07db      	lsls	r3, r3, #31
 8001750:	d506      	bpl.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001752:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001754:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001756:	2103      	movs	r1, #3
 8001758:	438b      	bics	r3, r1
 800175a:	68a1      	ldr	r1, [r4, #8]
 800175c:	430b      	orrs	r3, r1
 800175e:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	069b      	lsls	r3, r3, #26
 8001764:	d533      	bpl.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001766:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001768:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800176a:	2110      	movs	r1, #16
 800176c:	438b      	bics	r3, r1
 800176e:	68e1      	ldr	r1, [r4, #12]
 8001770:	430b      	orrs	r3, r1
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001774:	2000      	movs	r0, #0
}
 8001776:	b002      	add	sp, #8
 8001778:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2500      	movs	r5, #0
 800177c:	e7bf      	b.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001780:	6811      	ldr	r1, [r2, #0]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	430b      	orrs	r3, r1
 8001788:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800178a:	f7ff fae3 	bl	8000d54 <HAL_GetTick>
 800178e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	d4b6      	bmi.n	8001706 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001798:	f7ff fadc 	bl	8000d54 <HAL_GetTick>
 800179c:	1b80      	subs	r0, r0, r6
 800179e:	2864      	cmp	r0, #100	; 0x64
 80017a0:	d9f6      	bls.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 80017a2:	2003      	movs	r0, #3
 80017a4:	e7e7      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 80017a6:	f7ff fad5 	bl	8000d54 <HAL_GetTick>
 80017aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	079b      	lsls	r3, r3, #30
 80017b2:	d4c2      	bmi.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff face 	bl	8000d54 <HAL_GetTick>
 80017b8:	1b80      	subs	r0, r0, r6
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80017bc:	4298      	cmp	r0, r3
 80017be:	d9f5      	bls.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 80017c0:	2003      	movs	r0, #3
 80017c2:	e7d8      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	69d3      	ldr	r3, [r2, #28]
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80017c8:	400b      	ands	r3, r1
 80017ca:	61d3      	str	r3, [r2, #28]
 80017cc:	e7be      	b.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80017ce:	2000      	movs	r0, #0
 80017d0:	e7d1      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	fffffcff 	.word	0xfffffcff
 80017e0:	fffeffff 	.word	0xfffeffff
 80017e4:	00001388 	.word	0x00001388
 80017e8:	efffffff 	.word	0xefffffff

080017ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017f0:	6802      	ldr	r2, [r0, #0]
 80017f2:	68d3      	ldr	r3, [r2, #12]
 80017f4:	21a0      	movs	r1, #160	; 0xa0
 80017f6:	438b      	bics	r3, r1
 80017f8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80017fa:	f7ff faab 	bl	8000d54 <HAL_GetTick>
 80017fe:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	069b      	lsls	r3, r3, #26
 8001806:	d408      	bmi.n	800181a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001808:	f7ff faa4 	bl	8000d54 <HAL_GetTick>
 800180c:	1b40      	subs	r0, r0, r5
 800180e:	23fa      	movs	r3, #250	; 0xfa
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4298      	cmp	r0, r3
 8001814:	d9f4      	bls.n	8001800 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8001816:	2003      	movs	r0, #3
 8001818:	e000      	b.n	800181c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800181a:	2000      	movs	r0, #0
}
 800181c:	bd70      	pop	{r4, r5, r6, pc}

0800181e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800181e:	b570      	push	{r4, r5, r6, lr}
 8001820:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	0652      	lsls	r2, r2, #25
 8001828:	d501      	bpl.n	800182e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800182a:	2000      	movs	r0, #0
}
 800182c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800182e:	2201      	movs	r2, #1
 8001830:	4252      	negs	r2, r2
 8001832:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001834:	f7ff fa8e 	bl	8000d54 <HAL_GetTick>
 8001838:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	065b      	lsls	r3, r3, #25
 8001840:	d408      	bmi.n	8001854 <RTC_EnterInitMode+0x36>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001842:	f7ff fa87 	bl	8000d54 <HAL_GetTick>
 8001846:	1b40      	subs	r0, r0, r5
 8001848:	23fa      	movs	r3, #250	; 0xfa
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4298      	cmp	r0, r3
 800184e:	d9f4      	bls.n	800183a <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001850:	2003      	movs	r0, #3
 8001852:	e7eb      	b.n	800182c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
 8001856:	e7e9      	b.n	800182c <RTC_EnterInitMode+0xe>

08001858 <HAL_RTC_Init>:
{
 8001858:	b570      	push	{r4, r5, r6, lr}
 800185a:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 800185c:	d057      	beq.n	800190e <HAL_RTC_Init+0xb6>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800185e:	7f43      	ldrb	r3, [r0, #29]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d03c      	beq.n	80018de <HAL_RTC_Init+0x86>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001864:	2302      	movs	r3, #2
 8001866:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	22ca      	movs	r2, #202	; 0xca
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	3a77      	subs	r2, #119	; 0x77
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001874:	0020      	movs	r0, r4
 8001876:	f7ff ffd2 	bl	800181e <RTC_EnterInitMode>
 800187a:	1e05      	subs	r5, r0, #0
 800187c:	d133      	bne.n	80018e6 <HAL_RTC_Init+0x8e>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800187e:	6822      	ldr	r2, [r4, #0]
 8001880:	6893      	ldr	r3, [r2, #8]
 8001882:	4924      	ldr	r1, [pc, #144]	; (8001914 <HAL_RTC_Init+0xbc>)
 8001884:	400b      	ands	r3, r1
 8001886:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001888:	6821      	ldr	r1, [r4, #0]
 800188a:	688a      	ldr	r2, [r1, #8]
 800188c:	6863      	ldr	r3, [r4, #4]
 800188e:	6920      	ldr	r0, [r4, #16]
 8001890:	4303      	orrs	r3, r0
 8001892:	6960      	ldr	r0, [r4, #20]
 8001894:	4303      	orrs	r3, r0
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800189a:	6823      	ldr	r3, [r4, #0]
 800189c:	68e2      	ldr	r2, [r4, #12]
 800189e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80018a0:	6821      	ldr	r1, [r4, #0]
 80018a2:	690b      	ldr	r3, [r1, #16]
 80018a4:	68a2      	ldr	r2, [r4, #8]
 80018a6:	0412      	lsls	r2, r2, #16
 80018a8:	4313      	orrs	r3, r2
 80018aa:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	68d3      	ldr	r3, [r2, #12]
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	438b      	bics	r3, r1
 80018b4:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	069b      	lsls	r3, r3, #26
 80018bc:	d51b      	bpl.n	80018f6 <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018c2:	4915      	ldr	r1, [pc, #84]	; (8001918 <HAL_RTC_Init+0xc0>)
 80018c4:	400b      	ands	r3, r1
 80018c6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018cc:	69a1      	ldr	r1, [r4, #24]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	22ff      	movs	r2, #255	; 0xff
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80018d8:	2301      	movs	r3, #1
 80018da:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80018dc:	e009      	b.n	80018f2 <HAL_RTC_Init+0x9a>
    hrtc->Lock = HAL_UNLOCKED;
 80018de:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80018e0:	f7ff f93a 	bl	8000b58 <HAL_RTC_MspInit>
 80018e4:	e7be      	b.n	8001864 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	22ff      	movs	r2, #255	; 0xff
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80018ec:	2304      	movs	r3, #4
 80018ee:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80018f0:	2501      	movs	r5, #1
}
 80018f2:	0028      	movs	r0, r5
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80018f6:	0020      	movs	r0, r4
 80018f8:	f7ff ff78 	bl	80017ec <HAL_RTC_WaitForSynchro>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d0de      	beq.n	80018be <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001906:	2304      	movs	r3, #4
 8001908:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800190a:	2501      	movs	r5, #1
 800190c:	e7f1      	b.n	80018f2 <HAL_RTC_Init+0x9a>
    return HAL_ERROR;
 800190e:	2501      	movs	r5, #1
 8001910:	e7ef      	b.n	80018f2 <HAL_RTC_Init+0x9a>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	ff8fffbf 	.word	0xff8fffbf
 8001918:	fffbffff 	.word	0xfffbffff

0800191c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800191c:	2300      	movs	r3, #0

  while (Value >= 10U)
 800191e:	e002      	b.n	8001926 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001920:	3301      	adds	r3, #1
    Value -= 10U;
 8001922:	380a      	subs	r0, #10
 8001924:	b2c0      	uxtb	r0, r0
  while (Value >= 10U)
 8001926:	2809      	cmp	r0, #9
 8001928:	d8fa      	bhi.n	8001920 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4318      	orrs	r0, r3
}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_RTC_SetTime>:
{
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	0004      	movs	r4, r0
 8001938:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 800193a:	7f03      	ldrb	r3, [r0, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d100      	bne.n	8001942 <HAL_RTC_SetTime+0xe>
 8001940:	e070      	b.n	8001a24 <HAL_RTC_SetTime+0xf0>
 8001942:	2301      	movs	r3, #1
 8001944:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001946:	3301      	adds	r3, #1
 8001948:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 800194a:	2a00      	cmp	r2, #0
 800194c:	d141      	bne.n	80019d2 <HAL_RTC_SetTime+0x9e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800194e:	6803      	ldr	r3, [r0, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	065b      	lsls	r3, r3, #25
 8001954:	d401      	bmi.n	800195a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800195a:	7830      	ldrb	r0, [r6, #0]
 800195c:	f7ff ffde 	bl	800191c <RTC_ByteToBcd2>
 8001960:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001962:	7870      	ldrb	r0, [r6, #1]
 8001964:	f7ff ffda 	bl	800191c <RTC_ByteToBcd2>
 8001968:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800196a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800196c:	78b0      	ldrb	r0, [r6, #2]
 800196e:	f7ff ffd5 	bl	800191c <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001972:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001974:	78f0      	ldrb	r0, [r6, #3]
 8001976:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001978:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	22ca      	movs	r2, #202	; 0xca
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	3a77      	subs	r2, #119	; 0x77
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001986:	0020      	movs	r0, r4
 8001988:	f7ff ff49 	bl	800181e <RTC_EnterInitMode>
 800198c:	1e07      	subs	r7, r0, #0
 800198e:	d131      	bne.n	80019f4 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	4825      	ldr	r0, [pc, #148]	; (8001a28 <HAL_RTC_SetTime+0xf4>)
 8001994:	4005      	ands	r5, r0
 8001996:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	6893      	ldr	r3, [r2, #8]
 800199c:	4923      	ldr	r1, [pc, #140]	; (8001a2c <HAL_RTC_SetTime+0xf8>)
 800199e:	400b      	ands	r3, r1
 80019a0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80019a2:	6821      	ldr	r1, [r4, #0]
 80019a4:	688b      	ldr	r3, [r1, #8]
 80019a6:	68f2      	ldr	r2, [r6, #12]
 80019a8:	6930      	ldr	r0, [r6, #16]
 80019aa:	4302      	orrs	r2, r0
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80019b0:	6822      	ldr	r2, [r4, #0]
 80019b2:	68d3      	ldr	r3, [r2, #12]
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	438b      	bics	r3, r1
 80019b8:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	069b      	lsls	r3, r3, #26
 80019c0:	d522      	bpl.n	8001a08 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80019c8:	2301      	movs	r3, #1
 80019ca:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80019cc:	2300      	movs	r3, #0
 80019ce:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 80019d0:	e018      	b.n	8001a04 <HAL_RTC_SetTime+0xd0>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80019d2:	6803      	ldr	r3, [r0, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	065b      	lsls	r3, r3, #25
 80019d8:	d401      	bmi.n	80019de <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80019de:	7835      	ldrb	r5, [r6, #0]
 80019e0:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80019e2:	7870      	ldrb	r0, [r6, #1]
 80019e4:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80019e6:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80019e8:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80019ea:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80019ec:	78f0      	ldrb	r0, [r6, #3]
 80019ee:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80019f0:	4305      	orrs	r5, r0
 80019f2:	e7c2      	b.n	800197a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	22ff      	movs	r2, #255	; 0xff
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019fa:	2304      	movs	r3, #4
 80019fc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80019fe:	2300      	movs	r3, #0
 8001a00:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001a02:	2701      	movs	r7, #1
}
 8001a04:	0038      	movs	r0, r7
 8001a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a08:	0020      	movs	r0, r4
 8001a0a:	f7ff feef 	bl	80017ec <HAL_RTC_WaitForSynchro>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d0d7      	beq.n	80019c2 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	22ff      	movs	r2, #255	; 0xff
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001a20:	2701      	movs	r7, #1
 8001a22:	e7ef      	b.n	8001a04 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 8001a24:	2702      	movs	r7, #2
 8001a26:	e7ed      	b.n	8001a04 <HAL_RTC_SetTime+0xd0>
 8001a28:	007f7f7f 	.word	0x007f7f7f
 8001a2c:	fffbffff 	.word	0xfffbffff

08001a30 <HAL_RTC_SetDate>:
{
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	0004      	movs	r4, r0
 8001a34:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8001a36:	7f03      	ldrb	r3, [r0, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d061      	beq.n	8001b00 <HAL_RTC_SetDate+0xd0>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a40:	3301      	adds	r3, #1
 8001a42:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d106      	bne.n	8001a56 <HAL_RTC_SetDate+0x26>
 8001a48:	784b      	ldrb	r3, [r1, #1]
 8001a4a:	06d9      	lsls	r1, r3, #27
 8001a4c:	d503      	bpl.n	8001a56 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001a4e:	2110      	movs	r1, #16
 8001a50:	438b      	bics	r3, r1
 8001a52:	330a      	adds	r3, #10
 8001a54:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d12f      	bne.n	8001aba <HAL_RTC_SetDate+0x8a>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a5a:	78f0      	ldrb	r0, [r6, #3]
 8001a5c:	f7ff ff5e 	bl	800191c <RTC_ByteToBcd2>
 8001a60:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001a62:	7870      	ldrb	r0, [r6, #1]
 8001a64:	f7ff ff5a 	bl	800191c <RTC_ByteToBcd2>
 8001a68:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a6a:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001a6c:	78b0      	ldrb	r0, [r6, #2]
 8001a6e:	f7ff ff55 	bl	800191c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001a72:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << 13U));
 8001a74:	7830      	ldrb	r0, [r6, #0]
 8001a76:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a78:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	22ca      	movs	r2, #202	; 0xca
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	3a77      	subs	r2, #119	; 0x77
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a86:	0020      	movs	r0, r4
 8001a88:	f7ff fec9 	bl	800181e <RTC_EnterInitMode>
 8001a8c:	1e06      	subs	r6, r0, #0
 8001a8e:	d11f      	bne.n	8001ad0 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	481c      	ldr	r0, [pc, #112]	; (8001b04 <HAL_RTC_SetDate+0xd4>)
 8001a94:	4005      	ands	r5, r0
 8001a96:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	68d3      	ldr	r3, [r2, #12]
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	438b      	bics	r3, r1
 8001aa0:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	069b      	lsls	r3, r3, #26
 8001aa8:	d51c      	bpl.n	8001ae4 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8001ab8:	e012      	b.n	8001ae0 <HAL_RTC_SetDate+0xb0>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001aba:	78f5      	ldrb	r5, [r6, #3]
 8001abc:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001abe:	7870      	ldrb	r0, [r6, #1]
 8001ac0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001ac2:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8001ac4:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001ac6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001ac8:	7830      	ldrb	r0, [r6, #0]
 8001aca:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001acc:	4305      	orrs	r5, r0
 8001ace:	e7d4      	b.n	8001a7a <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	22ff      	movs	r2, #255	; 0xff
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001ada:	2300      	movs	r3, #0
 8001adc:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001ade:	2601      	movs	r6, #1
}
 8001ae0:	0030      	movs	r0, r6
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ae4:	0020      	movs	r0, r4
 8001ae6:	f7ff fe81 	bl	80017ec <HAL_RTC_WaitForSynchro>
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d0dd      	beq.n	8001aaa <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	22ff      	movs	r2, #255	; 0xff
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001af4:	2304      	movs	r3, #4
 8001af6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001af8:	2300      	movs	r3, #0
 8001afa:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001afc:	2601      	movs	r6, #1
 8001afe:	e7ef      	b.n	8001ae0 <HAL_RTC_SetDate+0xb0>
  __HAL_LOCK(hrtc);
 8001b00:	2602      	movs	r6, #2
 8001b02:	e7ed      	b.n	8001ae0 <HAL_RTC_SetDate+0xb0>
 8001b04:	00ffff3f 	.word	0x00ffff3f

08001b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	0006      	movs	r6, r0
 8001b0c:	000c      	movs	r4, r1
 8001b0e:	0017      	movs	r7, r2
 8001b10:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b12:	6833      	ldr	r3, [r6, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4023      	ands	r3, r4
 8001b18:	1b1b      	subs	r3, r3, r4
 8001b1a:	425a      	negs	r2, r3
 8001b1c:	4153      	adcs	r3, r2
 8001b1e:	42bb      	cmp	r3, r7
 8001b20:	d03b      	beq.n	8001b9a <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b22:	1c6b      	adds	r3, r5, #1
 8001b24:	d0f5      	beq.n	8001b12 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001b26:	f7ff f915 	bl	8000d54 <HAL_GetTick>
 8001b2a:	9b06      	ldr	r3, [sp, #24]
 8001b2c:	1ac0      	subs	r0, r0, r3
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d201      	bcs.n	8001b36 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	d1ed      	bne.n	8001b12 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b36:	6832      	ldr	r2, [r6, #0]
 8001b38:	6853      	ldr	r3, [r2, #4]
 8001b3a:	21e0      	movs	r1, #224	; 0xe0
 8001b3c:	438b      	bics	r3, r1
 8001b3e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b40:	2382      	movs	r3, #130	; 0x82
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	6872      	ldr	r2, [r6, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d00c      	beq.n	8001b64 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d016      	beq.n	8001b82 <SPI_WaitFlagStateUntilTimeout+0x7a>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b54:	235d      	movs	r3, #93	; 0x5d
 8001b56:	2201      	movs	r2, #1
 8001b58:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 8001b60:	2003      	movs	r0, #3
 8001b62:	e01b      	b.n	8001b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b64:	68b3      	ldr	r3, [r6, #8]
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	0212      	lsls	r2, r2, #8
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	00d2      	lsls	r2, r2, #3
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d1e9      	bne.n	8001b4a <SPI_WaitFlagStateUntilTimeout+0x42>
          __HAL_SPI_DISABLE(hspi);
 8001b76:	6832      	ldr	r2, [r6, #0]
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	438b      	bics	r3, r1
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e7e3      	b.n	8001b4a <SPI_WaitFlagStateUntilTimeout+0x42>
          SPI_RESET_CRC(hspi);
 8001b82:	6832      	ldr	r2, [r6, #0]
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <SPI_WaitFlagStateUntilTimeout+0x98>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	6832      	ldr	r2, [r6, #0]
 8001b8e:	6811      	ldr	r1, [r2, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e7dc      	b.n	8001b54 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8001b9a:	2000      	movs	r0, #0
}
 8001b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	ffffdfff 	.word	0xffffdfff

08001ba4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	0007      	movs	r7, r0
 8001ba8:	000c      	movs	r4, r1
 8001baa:	0015      	movs	r5, r2
 8001bac:	001e      	movs	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001bae:	e001      	b.n	8001bb4 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8001bb0:	1c73      	adds	r3, r6, #1
 8001bb2:	d10c      	bne.n	8001bce <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	6893      	ldr	r3, [r2, #8]
 8001bb8:	4023      	ands	r3, r4
 8001bba:	42ab      	cmp	r3, r5
 8001bbc:	d041      	beq.n	8001c42 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001bbe:	23c0      	movs	r3, #192	; 0xc0
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	429c      	cmp	r4, r3
 8001bc4:	d1f4      	bne.n	8001bb0 <SPI_WaitFifoStateUntilTimeout+0xc>
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	d1f2      	bne.n	8001bb0 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001bca:	7b13      	ldrb	r3, [r2, #12]
 8001bcc:	e7f0      	b.n	8001bb0 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001bce:	f7ff f8c1 	bl	8000d54 <HAL_GetTick>
 8001bd2:	9b06      	ldr	r3, [sp, #24]
 8001bd4:	1ac0      	subs	r0, r0, r3
 8001bd6:	42b0      	cmp	r0, r6
 8001bd8:	d201      	bcs.n	8001bde <SPI_WaitFifoStateUntilTimeout+0x3a>
 8001bda:	2e00      	cmp	r6, #0
 8001bdc:	d1ea      	bne.n	8001bb4 <SPI_WaitFifoStateUntilTimeout+0x10>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	6853      	ldr	r3, [r2, #4]
 8001be2:	21e0      	movs	r1, #224	; 0xe0
 8001be4:	438b      	bics	r3, r1
 8001be6:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001be8:	2382      	movs	r3, #130	; 0x82
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d00c      	beq.n	8001c0c <SPI_WaitFifoStateUntilTimeout+0x68>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d016      	beq.n	8001c2a <SPI_WaitFifoStateUntilTimeout+0x86>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bfc:	235d      	movs	r3, #93	; 0x5d
 8001bfe:	2201      	movs	r2, #1
 8001c00:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001c02:	3b01      	subs	r3, #1
 8001c04:	2200      	movs	r2, #0
 8001c06:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e01b      	b.n	8001c44 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	0212      	lsls	r2, r2, #8
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <SPI_WaitFifoStateUntilTimeout+0x7a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	00d2      	lsls	r2, r2, #3
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d1e9      	bne.n	8001bf2 <SPI_WaitFifoStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	438b      	bics	r3, r1
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e7e3      	b.n	8001bf2 <SPI_WaitFifoStateUntilTimeout+0x4e>
          SPI_RESET_CRC(hspi);
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	4906      	ldr	r1, [pc, #24]	; (8001c48 <SPI_WaitFifoStateUntilTimeout+0xa4>)
 8001c30:	400b      	ands	r3, r1
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	019b      	lsls	r3, r3, #6
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e7dc      	b.n	8001bfc <SPI_WaitFifoStateUntilTimeout+0x58>
      }
    }
  }

  return HAL_OK;
 8001c42:	2000      	movs	r0, #0
}
 8001c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	ffffdfff 	.word	0xffffdfff

08001c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	0004      	movs	r4, r0
 8001c52:	000d      	movs	r5, r1
 8001c54:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c56:	21c0      	movs	r1, #192	; 0xc0
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	002b      	movs	r3, r5
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	0149      	lsls	r1, r1, #5
 8001c60:	f7ff ffa0 	bl	8001ba4 <SPI_WaitFifoStateUntilTimeout>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d118      	bne.n	8001c9a <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c68:	9600      	str	r6, [sp, #0]
 8001c6a:	002b      	movs	r3, r5
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	0020      	movs	r0, r4
 8001c72:	f7ff ff49 	bl	8001b08 <SPI_WaitFlagStateUntilTimeout>
 8001c76:	2800      	cmp	r0, #0
 8001c78:	d116      	bne.n	8001ca8 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c7a:	21c0      	movs	r1, #192	; 0xc0
 8001c7c:	9600      	str	r6, [sp, #0]
 8001c7e:	002b      	movs	r3, r5
 8001c80:	2200      	movs	r2, #0
 8001c82:	00c9      	lsls	r1, r1, #3
 8001c84:	0020      	movs	r0, r4
 8001c86:	f7ff ff8d 	bl	8001ba4 <SPI_WaitFifoStateUntilTimeout>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d00a      	beq.n	8001ca4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c90:	2220      	movs	r2, #32
 8001c92:	4313      	orrs	r3, r2
 8001c94:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001c96:	2003      	movs	r0, #3
 8001c98:	e004      	b.n	8001ca4 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ca2:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ca8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001caa:	2220      	movs	r2, #32
 8001cac:	4313      	orrs	r3, r2
 8001cae:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	e7f7      	b.n	8001ca4 <SPI_EndRxTxTransaction+0x58>

08001cb4 <HAL_SPI_Init>:
{
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8001cb8:	d05e      	beq.n	8001d78 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cbe:	335d      	adds	r3, #93	; 0x5d
 8001cc0:	5cc3      	ldrb	r3, [r0, r3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d04c      	beq.n	8001d60 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cc6:	235d      	movs	r3, #93	; 0x5d
 8001cc8:	2202      	movs	r2, #2
 8001cca:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001ccc:	6822      	ldr	r2, [r4, #0]
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	438b      	bics	r3, r1
 8001cd4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd6:	68e3      	ldr	r3, [r4, #12]
 8001cd8:	22e0      	movs	r2, #224	; 0xe0
 8001cda:	00d2      	lsls	r2, r2, #3
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d945      	bls.n	8001d6c <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ce0:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ce2:	21f0      	movs	r1, #240	; 0xf0
 8001ce4:	0109      	lsls	r1, r1, #4
 8001ce6:	428b      	cmp	r3, r1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_SPI_Init+0x42>
 8001cea:	21e0      	movs	r1, #224	; 0xe0
 8001cec:	00c9      	lsls	r1, r1, #3
 8001cee:	428b      	cmp	r3, r1
 8001cf0:	d001      	beq.n	8001cf6 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001cf6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cfc:	21e0      	movs	r1, #224	; 0xe0
 8001cfe:	00c9      	lsls	r1, r1, #3
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d936      	bls.n	8001d72 <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d04:	2302      	movs	r3, #2
 8001d06:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d08:	6863      	ldr	r3, [r4, #4]
 8001d0a:	68a1      	ldr	r1, [r4, #8]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	6921      	ldr	r1, [r4, #16]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6961      	ldr	r1, [r4, #20]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0089      	lsls	r1, r1, #2
 8001d1a:	69a0      	ldr	r0, [r4, #24]
 8001d1c:	4001      	ands	r1, r0
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	69e1      	ldr	r1, [r4, #28]
 8001d22:	430b      	orrs	r3, r1
 8001d24:	6a21      	ldr	r1, [r4, #32]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	6821      	ldr	r1, [r4, #0]
 8001d2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d2c:	4303      	orrs	r3, r0
 8001d2e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001d30:	8b61      	ldrh	r1, [r4, #26]
 8001d32:	2304      	movs	r3, #4
 8001d34:	400b      	ands	r3, r1
 8001d36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	68e1      	ldr	r1, [r4, #12]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	69d3      	ldr	r3, [r2, #28]
 8001d4c:	490b      	ldr	r1, [pc, #44]	; (8001d7c <HAL_SPI_Init+0xc8>)
 8001d4e:	400b      	ands	r3, r1
 8001d50:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d56:	335d      	adds	r3, #93	; 0x5d
 8001d58:	2201      	movs	r2, #1
 8001d5a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001d5c:	2000      	movs	r0, #0
}
 8001d5e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001d60:	335c      	adds	r3, #92	; 0x5c
 8001d62:	2200      	movs	r2, #0
 8001d64:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8001d66:	f7fe ff07 	bl	8000b78 <HAL_SPI_MspInit>
 8001d6a:	e7ac      	b.n	8001cc6 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	0152      	lsls	r2, r2, #5
 8001d70:	e7b7      	b.n	8001ce2 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001d72:	2301      	movs	r3, #1
 8001d74:	6323      	str	r3, [r4, #48]	; 0x30
 8001d76:	e7c7      	b.n	8001d08 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e7f0      	b.n	8001d5e <HAL_SPI_Init+0xaa>
 8001d7c:	fffff7ff 	.word	0xfffff7ff

08001d80 <HAL_SPI_Transmit>:
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	0004      	movs	r4, r0
 8001d86:	9101      	str	r1, [sp, #4]
 8001d88:	0016      	movs	r6, r2
 8001d8a:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8001d8c:	235c      	movs	r3, #92	; 0x5c
 8001d8e:	5cc3      	ldrb	r3, [r0, r3]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d100      	bne.n	8001d96 <HAL_SPI_Transmit+0x16>
 8001d94:	e0e2      	b.n	8001f5c <HAL_SPI_Transmit+0x1dc>
 8001d96:	235c      	movs	r3, #92	; 0x5c
 8001d98:	2201      	movs	r2, #1
 8001d9a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001d9c:	f7fe ffda 	bl	8000d54 <HAL_GetTick>
 8001da0:	0005      	movs	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001da2:	235d      	movs	r3, #93	; 0x5d
 8001da4:	5ce3      	ldrb	r3, [r4, r3]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d008      	beq.n	8001dbc <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8001daa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001dac:	235d      	movs	r3, #93	; 0x5d
 8001dae:	2201      	movs	r2, #1
 8001db0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001db2:	3b01      	subs	r3, #1
 8001db4:	2200      	movs	r2, #0
 8001db6:	54e2      	strb	r2, [r4, r3]
}
 8001db8:	b005      	add	sp, #20
 8001dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8001dbc:	9901      	ldr	r1, [sp, #4]
 8001dbe:	2900      	cmp	r1, #0
 8001dc0:	d100      	bne.n	8001dc4 <HAL_SPI_Transmit+0x44>
 8001dc2:	e0bd      	b.n	8001f40 <HAL_SPI_Transmit+0x1c0>
 8001dc4:	2e00      	cmp	r6, #0
 8001dc6:	d100      	bne.n	8001dca <HAL_SPI_Transmit+0x4a>
 8001dc8:	e0bc      	b.n	8001f44 <HAL_SPI_Transmit+0x1c4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dca:	335c      	adds	r3, #92	; 0x5c
 8001dcc:	2203      	movs	r2, #3
 8001dce:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dd4:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001dd6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001dd8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dda:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ddc:	3241      	adds	r2, #65	; 0x41
 8001dde:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8001de0:	3202      	adds	r2, #2
 8001de2:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8001de4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001de6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	68a2      	ldr	r2, [r4, #8]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d01d      	beq.n	8001e2e <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	0652      	lsls	r2, r2, #25
 8001df8:	d403      	bmi.n	8001e02 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e02:	23e0      	movs	r3, #224	; 0xe0
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	68e2      	ldr	r2, [r4, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d935      	bls.n	8001e78 <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e0c:	6863      	ldr	r3, [r4, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_SPI_Transmit+0x96>
 8001e12:	2e01      	cmp	r6, #1
 8001e14:	d11d      	bne.n	8001e52 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e20:	3302      	adds	r3, #2
 8001e22:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001e24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001e2c:	e011      	b.n	8001e52 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	6811      	ldr	r1, [r2, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	01db      	lsls	r3, r3, #7
 8001e36:	430b      	orrs	r3, r1
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e7da      	b.n	8001df2 <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e3c:	f7fe ff8a 	bl	8000d54 <HAL_GetTick>
 8001e40:	1b40      	subs	r0, r0, r5
 8001e42:	42b8      	cmp	r0, r7
 8001e44:	d302      	bcc.n	8001e4c <HAL_SPI_Transmit+0xcc>
 8001e46:	1c7b      	adds	r3, r7, #1
 8001e48:	d000      	beq.n	8001e4c <HAL_SPI_Transmit+0xcc>
 8001e4a:	e07d      	b.n	8001f48 <HAL_SPI_Transmit+0x1c8>
 8001e4c:	2f00      	cmp	r7, #0
 8001e4e:	d100      	bne.n	8001e52 <HAL_SPI_Transmit+0xd2>
 8001e50:	e07c      	b.n	8001f4c <HAL_SPI_Transmit+0x1cc>
    while (hspi->TxXferCount > 0U)
 8001e52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d05a      	beq.n	8001f10 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	0792      	lsls	r2, r2, #30
 8001e60:	d5ec      	bpl.n	8001e3c <HAL_SPI_Transmit+0xbc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e64:	8812      	ldrh	r2, [r2, #0]
 8001e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001e6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001e76:	e7ec      	b.n	8001e52 <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e78:	6863      	ldr	r3, [r4, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_SPI_Transmit+0x102>
 8001e7e:	2e01      	cmp	r6, #1
 8001e80:	d12f      	bne.n	8001ee2 <HAL_SPI_Transmit+0x162>
      if (hspi->TxXferCount > 1U)
 8001e82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d90b      	bls.n	8001ea2 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e94:	3302      	adds	r3, #2
 8001e96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001e98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e9a:	3b02      	subs	r3, #2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001ea0:	e01f      	b.n	8001ee2 <HAL_SPI_Transmit+0x162>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	6822      	ldr	r2, [r4, #0]
 8001ea8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr ++;
 8001eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eac:	3301      	adds	r3, #1
 8001eae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001eb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001eb8:	e013      	b.n	8001ee2 <HAL_SPI_Transmit+0x162>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8001ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8001ec6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001ece:	e008      	b.n	8001ee2 <HAL_SPI_Transmit+0x162>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed0:	f7fe ff40 	bl	8000d54 <HAL_GetTick>
 8001ed4:	1b40      	subs	r0, r0, r5
 8001ed6:	42b8      	cmp	r0, r7
 8001ed8:	d301      	bcc.n	8001ede <HAL_SPI_Transmit+0x15e>
 8001eda:	1c7b      	adds	r3, r7, #1
 8001edc:	d138      	bne.n	8001f50 <HAL_SPI_Transmit+0x1d0>
 8001ede:	2f00      	cmp	r7, #0
 8001ee0:	d038      	beq.n	8001f54 <HAL_SPI_Transmit+0x1d4>
    while (hspi->TxXferCount > 0U)
 8001ee2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	6893      	ldr	r3, [r2, #8]
 8001eee:	079b      	lsls	r3, r3, #30
 8001ef0:	d5ee      	bpl.n	8001ed0 <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 8001ef2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d9df      	bls.n	8001eba <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f02:	3302      	adds	r3, #2
 8001f04:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001f06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f08:	3b02      	subs	r3, #2
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001f0e:	e7e8      	b.n	8001ee2 <HAL_SPI_Transmit+0x162>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f10:	002a      	movs	r2, r5
 8001f12:	0039      	movs	r1, r7
 8001f14:	0020      	movs	r0, r4
 8001f16:	f7ff fe99 	bl	8001c4c <SPI_EndRxTxTransaction>
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f22:	68a3      	ldr	r3, [r4, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <HAL_SPI_Transmit+0x1b6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f28:	9303      	str	r3, [sp, #12]
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	9203      	str	r2, [sp, #12]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	9303      	str	r3, [sp, #12]
 8001f34:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f36:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_SPI_Transmit+0x1d8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e735      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e733      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
 8001f44:	2001      	movs	r0, #1
 8001f46:	e731      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001f48:	2003      	movs	r0, #3
 8001f4a:	e72f      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	e72d      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001f50:	2003      	movs	r0, #3
 8001f52:	e72b      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
 8001f54:	2003      	movs	r0, #3
 8001f56:	e729      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e727      	b.n	8001dac <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	e72b      	b.n	8001db8 <HAL_SPI_Transmit+0x38>

08001f60 <HAL_SPI_TransmitReceive>:
{
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	b083      	sub	sp, #12
 8001f64:	0004      	movs	r4, r0
 8001f66:	000e      	movs	r6, r1
 8001f68:	9201      	str	r2, [sp, #4]
 8001f6a:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001f6c:	235c      	movs	r3, #92	; 0x5c
 8001f6e:	5cc3      	ldrb	r3, [r0, r3]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d100      	bne.n	8001f76 <HAL_SPI_TransmitReceive+0x16>
 8001f74:	e157      	b.n	8002226 <HAL_SPI_TransmitReceive+0x2c6>
 8001f76:	235c      	movs	r3, #92	; 0x5c
 8001f78:	2201      	movs	r2, #1
 8001f7a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001f7c:	f7fe feea 	bl	8000d54 <HAL_GetTick>
 8001f80:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 8001f82:	235d      	movs	r3, #93	; 0x5d
 8001f84:	5ce3      	ldrb	r3, [r4, r3]
 8001f86:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001f88:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d014      	beq.n	8001fb8 <HAL_SPI_TransmitReceive+0x58>
 8001f8e:	2182      	movs	r1, #130	; 0x82
 8001f90:	0049      	lsls	r1, r1, #1
 8001f92:	428a      	cmp	r2, r1
 8001f94:	d008      	beq.n	8001fa8 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8001f96:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001f98:	235d      	movs	r3, #93	; 0x5d
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	54e2      	strb	r2, [r4, r3]
}
 8001fa4:	b003      	add	sp, #12
 8001fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fa8:	68a2      	ldr	r2, [r4, #8]
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d000      	beq.n	8001fb0 <HAL_SPI_TransmitReceive+0x50>
 8001fae:	e12c      	b.n	800220a <HAL_SPI_TransmitReceive+0x2aa>
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d001      	beq.n	8001fb8 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	e7ef      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	d100      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x5e>
 8001fbc:	e127      	b.n	800220e <HAL_SPI_TransmitReceive+0x2ae>
 8001fbe:	9b01      	ldr	r3, [sp, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d100      	bne.n	8001fc6 <HAL_SPI_TransmitReceive+0x66>
 8001fc4:	e125      	b.n	8002212 <HAL_SPI_TransmitReceive+0x2b2>
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d100      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x6c>
 8001fca:	e124      	b.n	8002216 <HAL_SPI_TransmitReceive+0x2b6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fcc:	235d      	movs	r3, #93	; 0x5d
 8001fce:	5ce3      	ldrb	r3, [r4, r3]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d002      	beq.n	8001fda <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fd4:	235d      	movs	r3, #93	; 0x5d
 8001fd6:	2205      	movs	r2, #5
 8001fd8:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fde:	9a01      	ldr	r2, [sp, #4]
 8001fe0:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001fe2:	2246      	movs	r2, #70	; 0x46
 8001fe4:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 8001fe6:	3a02      	subs	r2, #2
 8001fe8:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fea:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001fec:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001fee:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8001ff0:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001ff2:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001ff4:	23e0      	movs	r3, #224	; 0xe0
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	68e2      	ldr	r2, [r4, #12]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d801      	bhi.n	8002002 <HAL_SPI_TransmitReceive+0xa2>
 8001ffe:	2d01      	cmp	r5, #1
 8002000:	d923      	bls.n	800204a <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	6853      	ldr	r3, [r2, #4]
 8002006:	4989      	ldr	r1, [pc, #548]	; (800222c <HAL_SPI_TransmitReceive+0x2cc>)
 8002008:	400b      	ands	r3, r1
 800200a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	0652      	lsls	r2, r2, #25
 8002012:	d403      	bmi.n	800201c <HAL_SPI_TransmitReceive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800201c:	23e0      	movs	r3, #224	; 0xe0
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	68e2      	ldr	r2, [r4, #12]
 8002022:	429a      	cmp	r2, r3
 8002024:	d956      	bls.n	80020d4 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_SPI_TransmitReceive+0xd0>
 800202c:	2d01      	cmp	r5, #1
 800202e:	d10a      	bne.n	8002046 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800203a:	3302      	adds	r3, #2
 800203c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800203e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002040:	3b01      	subs	r3, #1
 8002042:	b29b      	uxth	r3, r3
 8002044:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002046:	2501      	movs	r5, #1
 8002048:	e024      	b.n	8002094 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800204a:	6822      	ldr	r2, [r4, #0]
 800204c:	6851      	ldr	r1, [r2, #4]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	015b      	lsls	r3, r3, #5
 8002052:	430b      	orrs	r3, r1
 8002054:	6053      	str	r3, [r2, #4]
 8002056:	e7d9      	b.n	800200c <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	07d2      	lsls	r2, r2, #31
 800205e:	d510      	bpl.n	8002082 <HAL_SPI_TransmitReceive+0x122>
 8002060:	2246      	movs	r2, #70	; 0x46
 8002062:	5aa2      	ldrh	r2, [r4, r2]
 8002064:	b292      	uxth	r2, r2
 8002066:	2a00      	cmp	r2, #0
 8002068:	d00b      	beq.n	8002082 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800206e:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002072:	3302      	adds	r3, #2
 8002074:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002076:	2246      	movs	r2, #70	; 0x46
 8002078:	5aa3      	ldrh	r3, [r4, r2]
 800207a:	3b01      	subs	r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8002080:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002082:	f7fe fe67 	bl	8000d54 <HAL_GetTick>
 8002086:	1bc0      	subs	r0, r0, r7
 8002088:	9b08      	ldr	r3, [sp, #32]
 800208a:	4298      	cmp	r0, r3
 800208c:	d302      	bcc.n	8002094 <HAL_SPI_TransmitReceive+0x134>
 800208e:	3301      	adds	r3, #1
 8002090:	d000      	beq.n	8002094 <HAL_SPI_TransmitReceive+0x134>
 8002092:	e0c2      	b.n	800221a <HAL_SPI_TransmitReceive+0x2ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002094:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x148>
 800209c:	3346      	adds	r3, #70	; 0x46
 800209e:	5ae3      	ldrh	r3, [r4, r3]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d100      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x148>
 80020a6:	e0a4      	b.n	80021f2 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	0792      	lsls	r2, r2, #30
 80020ae:	d5d3      	bpl.n	8002058 <HAL_SPI_TransmitReceive+0xf8>
 80020b0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80020b2:	b292      	uxth	r2, r2
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d0cf      	beq.n	8002058 <HAL_SPI_TransmitReceive+0xf8>
 80020b8:	2d01      	cmp	r5, #1
 80020ba:	d1cd      	bne.n	8002058 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020c4:	3302      	adds	r3, #2
 80020c6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80020c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80020d0:	2500      	movs	r5, #0
 80020d2:	e7c1      	b.n	8002058 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_SPI_TransmitReceive+0x17e>
 80020da:	2d01      	cmp	r5, #1
 80020dc:	d10e      	bne.n	80020fc <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 80020de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d90c      	bls.n	8002100 <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020ea:	8812      	ldrh	r2, [r2, #0]
 80020ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020f0:	3302      	adds	r3, #2
 80020f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020f6:	3b02      	subs	r3, #2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80020fc:	2501      	movs	r5, #1
 80020fe:	e046      	b.n	800218e <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	6822      	ldr	r2, [r4, #0]
 8002106:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800210a:	3301      	adds	r3, #1
 800210c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800210e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002110:	3b01      	subs	r3, #1
 8002112:	b29b      	uxth	r3, r3
 8002114:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002116:	e7f1      	b.n	80020fc <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 8002118:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800211a:	b292      	uxth	r2, r2
 800211c:	2a01      	cmp	r2, #1
 800211e:	d90b      	bls.n	8002138 <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002120:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002122:	8812      	ldrh	r2, [r2, #0]
 8002124:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002128:	3302      	adds	r3, #2
 800212a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800212c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800212e:	3b02      	subs	r3, #2
 8002130:	b29b      	uxth	r3, r3
 8002132:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002134:	2500      	movs	r5, #0
 8002136:	e03d      	b.n	80021b4 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002138:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800213e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002140:	3301      	adds	r3, #1
 8002142:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002144:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002146:	3b01      	subs	r3, #1
 8002148:	b29b      	uxth	r3, r3
 800214a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800214c:	2500      	movs	r5, #0
 800214e:	e031      	b.n	80021b4 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6851      	ldr	r1, [r2, #4]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	430b      	orrs	r3, r1
 800215a:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800215c:	2501      	movs	r5, #1
 800215e:	e00b      	b.n	8002178 <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002160:	7b1b      	ldrb	r3, [r3, #12]
 8002162:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002164:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8002166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002168:	3301      	adds	r3, #1
 800216a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800216c:	2246      	movs	r2, #70	; 0x46
 800216e:	5aa3      	ldrh	r3, [r4, r2]
 8002170:	3b01      	subs	r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8002176:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002178:	f7fe fdec 	bl	8000d54 <HAL_GetTick>
 800217c:	1bc0      	subs	r0, r0, r7
 800217e:	9b08      	ldr	r3, [sp, #32]
 8002180:	4298      	cmp	r0, r3
 8002182:	d301      	bcc.n	8002188 <HAL_SPI_TransmitReceive+0x228>
 8002184:	3301      	adds	r3, #1
 8002186:	d14a      	bne.n	800221e <HAL_SPI_TransmitReceive+0x2be>
 8002188:	9b08      	ldr	r3, [sp, #32]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d049      	beq.n	8002222 <HAL_SPI_TransmitReceive+0x2c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800218e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <HAL_SPI_TransmitReceive+0x240>
 8002196:	3346      	adds	r3, #70	; 0x46
 8002198:	5ae3      	ldrh	r3, [r4, r3]
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d028      	beq.n	80021f2 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	0792      	lsls	r2, r2, #30
 80021a6:	d505      	bpl.n	80021b4 <HAL_SPI_TransmitReceive+0x254>
 80021a8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80021aa:	b292      	uxth	r2, r2
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x254>
 80021b0:	2d01      	cmp	r5, #1
 80021b2:	d0b1      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	07d2      	lsls	r2, r2, #31
 80021ba:	d5dd      	bpl.n	8002178 <HAL_SPI_TransmitReceive+0x218>
 80021bc:	2246      	movs	r2, #70	; 0x46
 80021be:	5aa2      	ldrh	r2, [r4, r2]
 80021c0:	b292      	uxth	r2, r2
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d0d8      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 80021c6:	2246      	movs	r2, #70	; 0x46
 80021c8:	5aa2      	ldrh	r2, [r4, r2]
 80021ca:	b292      	uxth	r2, r2
 80021cc:	2a01      	cmp	r2, #1
 80021ce:	d9c7      	bls.n	8002160 <HAL_SPI_TransmitReceive+0x200>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021d4:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80021d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d8:	3302      	adds	r3, #2
 80021da:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80021dc:	2246      	movs	r2, #70	; 0x46
 80021de:	5aa3      	ldrh	r3, [r4, r2]
 80021e0:	3b02      	subs	r3, #2
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 80021e6:	5aa3      	ldrh	r3, [r4, r2]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d9b0      	bls.n	8002150 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 80021ee:	2501      	movs	r5, #1
 80021f0:	e7c2      	b.n	8002178 <HAL_SPI_TransmitReceive+0x218>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f2:	003a      	movs	r2, r7
 80021f4:	9908      	ldr	r1, [sp, #32]
 80021f6:	0020      	movs	r0, r4
 80021f8:	f7ff fd28 	bl	8001c4c <SPI_EndRxTxTransaction>
 80021fc:	2800      	cmp	r0, #0
 80021fe:	d100      	bne.n	8002202 <HAL_SPI_TransmitReceive+0x2a2>
 8002200:	e6ca      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002202:	2320      	movs	r3, #32
 8002204:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002206:	2001      	movs	r0, #1
 8002208:	e6c6      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 800220a:	2002      	movs	r0, #2
 800220c:	e6c4      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 800220e:	2001      	movs	r0, #1
 8002210:	e6c2      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
 8002212:	2001      	movs	r0, #1
 8002214:	e6c0      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
 8002216:	2001      	movs	r0, #1
 8002218:	e6be      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
 800221c:	e6bc      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
 8002220:	e6ba      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
 8002222:	2003      	movs	r0, #3
 8002224:	e6b8      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8002226:	2002      	movs	r0, #2
 8002228:	e6bc      	b.n	8001fa4 <HAL_SPI_TransmitReceive+0x44>
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	ffffefff 	.word	0xffffefff

08002230 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002230:	6802      	ldr	r2, [r0, #0]
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	4906      	ldr	r1, [pc, #24]	; (8002250 <UART_EndRxTransfer+0x20>)
 8002236:	400b      	ands	r3, r1
 8002238:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223a:	6802      	ldr	r2, [r0, #0]
 800223c:	6893      	ldr	r3, [r2, #8]
 800223e:	3123      	adds	r1, #35	; 0x23
 8002240:	31ff      	adds	r1, #255	; 0xff
 8002242:	438b      	bics	r3, r1
 8002244:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002246:	2320      	movs	r3, #32
 8002248:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	6603      	str	r3, [r0, #96]	; 0x60
}
 800224e:	4770      	bx	lr
 8002250:	fffffedf 	.word	0xfffffedf

08002254 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002254:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002256:	6802      	ldr	r2, [r0, #0]
 8002258:	6813      	ldr	r3, [r2, #0]
 800225a:	2140      	movs	r1, #64	; 0x40
 800225c:	438b      	bics	r3, r1
 800225e:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002260:	2320      	movs	r3, #32
 8002262:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002264:	2300      	movs	r3, #0
 8002266:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002268:	f7fe f908 	bl	800047c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800226c:	bd10      	pop	{r4, pc}
	...

08002270 <HAL_UART_IRQHandler>:
{
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002274:	6801      	ldr	r1, [r0, #0]
 8002276:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002278:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800227a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800227c:	4a4d      	ldr	r2, [pc, #308]	; (80023b4 <HAL_UART_IRQHandler+0x144>)
 800227e:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8002280:	d10a      	bne.n	8002298 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002282:	069e      	lsls	r6, r3, #26
 8002284:	d508      	bpl.n	8002298 <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002286:	0686      	lsls	r6, r0, #26
 8002288:	d506      	bpl.n	8002298 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800228a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800228c:	2b00      	cmp	r3, #0
 800228e:	d100      	bne.n	8002292 <HAL_UART_IRQHandler+0x22>
 8002290:	e08b      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
        huart->RxISR(huart);
 8002292:	0020      	movs	r0, r4
 8002294:	4798      	blx	r3
 8002296:	e088      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
  if ((errorflags != 0U)
 8002298:	2a00      	cmp	r2, #0
 800229a:	d078      	beq.n	800238e <HAL_UART_IRQHandler+0x11e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800229c:	2201      	movs	r2, #1
 800229e:	402a      	ands	r2, r5
 80022a0:	d103      	bne.n	80022aa <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80022a2:	2590      	movs	r5, #144	; 0x90
 80022a4:	006d      	lsls	r5, r5, #1
 80022a6:	4228      	tst	r0, r5
 80022a8:	d071      	beq.n	800238e <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80022aa:	07dd      	lsls	r5, r3, #31
 80022ac:	d506      	bpl.n	80022bc <HAL_UART_IRQHandler+0x4c>
 80022ae:	05c5      	lsls	r5, r0, #23
 80022b0:	d504      	bpl.n	80022bc <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80022b2:	2501      	movs	r5, #1
 80022b4:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022b6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80022b8:	4329      	orrs	r1, r5
 80022ba:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022bc:	0799      	lsls	r1, r3, #30
 80022be:	d508      	bpl.n	80022d2 <HAL_UART_IRQHandler+0x62>
 80022c0:	2a00      	cmp	r2, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80022c4:	6821      	ldr	r1, [r4, #0]
 80022c6:	2502      	movs	r5, #2
 80022c8:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ca:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80022cc:	3502      	adds	r5, #2
 80022ce:	4329      	orrs	r1, r5
 80022d0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022d2:	0759      	lsls	r1, r3, #29
 80022d4:	d508      	bpl.n	80022e8 <HAL_UART_IRQHandler+0x78>
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022da:	6821      	ldr	r1, [r4, #0]
 80022dc:	2504      	movs	r5, #4
 80022de:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022e0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80022e2:	3d02      	subs	r5, #2
 80022e4:	4329      	orrs	r1, r5
 80022e6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022e8:	0719      	lsls	r1, r3, #28
 80022ea:	d509      	bpl.n	8002300 <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022ec:	0681      	lsls	r1, r0, #26
 80022ee:	d401      	bmi.n	80022f4 <HAL_UART_IRQHandler+0x84>
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d005      	beq.n	8002300 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	2108      	movs	r1, #8
 80022f8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022fa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80022fc:	430a      	orrs	r2, r1
 80022fe:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002300:	051a      	lsls	r2, r3, #20
 8002302:	d509      	bpl.n	8002318 <HAL_UART_IRQHandler+0xa8>
 8002304:	0142      	lsls	r2, r0, #5
 8002306:	d507      	bpl.n	8002318 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0109      	lsls	r1, r1, #4
 800230e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002310:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002312:	2120      	movs	r1, #32
 8002314:	430a      	orrs	r2, r1
 8002316:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002318:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800231a:	2a00      	cmp	r2, #0
 800231c:	d045      	beq.n	80023aa <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800231e:	069b      	lsls	r3, r3, #26
 8002320:	d506      	bpl.n	8002330 <HAL_UART_IRQHandler+0xc0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002322:	0683      	lsls	r3, r0, #26
 8002324:	d504      	bpl.n	8002330 <HAL_UART_IRQHandler+0xc0>
        if (huart->RxISR != NULL)
 8002326:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_IRQHandler+0xc0>
          huart->RxISR(huart);
 800232c:	0020      	movs	r0, r4
 800232e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002330:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	065b      	lsls	r3, r3, #25
 8002338:	d402      	bmi.n	8002340 <HAL_UART_IRQHandler+0xd0>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800233a:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800233c:	4213      	tst	r3, r2
 800233e:	d020      	beq.n	8002382 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8002340:	0020      	movs	r0, r4
 8002342:	f7ff ff75 	bl	8002230 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	0652      	lsls	r2, r2, #25
 800234c:	d515      	bpl.n	800237a <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	438a      	bics	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002356:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_UART_IRQHandler+0x102>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800235c:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_UART_IRQHandler+0x148>)
 800235e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002360:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002362:	f7fe fd94 	bl	8000e8e <HAL_DMA_Abort_IT>
 8002366:	2800      	cmp	r0, #0
 8002368:	d01f      	beq.n	80023aa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800236a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800236c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800236e:	4798      	blx	r3
 8002370:	e01b      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
            HAL_UART_ErrorCallback(huart);
 8002372:	0020      	movs	r0, r4
 8002374:	f7fe f884 	bl	8000480 <HAL_UART_ErrorCallback>
 8002378:	e017      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
          HAL_UART_ErrorCallback(huart);
 800237a:	0020      	movs	r0, r4
 800237c:	f7fe f880 	bl	8000480 <HAL_UART_ErrorCallback>
 8002380:	e013      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
        HAL_UART_ErrorCallback(huart);
 8002382:	0020      	movs	r0, r4
 8002384:	f7fe f87c 	bl	8000480 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002388:	2300      	movs	r3, #0
 800238a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800238c:	e00d      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800238e:	061a      	lsls	r2, r3, #24
 8002390:	d507      	bpl.n	80023a2 <HAL_UART_IRQHandler+0x132>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002392:	0602      	lsls	r2, r0, #24
 8002394:	d505      	bpl.n	80023a2 <HAL_UART_IRQHandler+0x132>
    if (huart->TxISR != NULL)
 8002396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 800239c:	0020      	movs	r0, r4
 800239e:	4798      	blx	r3
 80023a0:	e003      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80023a2:	065b      	lsls	r3, r3, #25
 80023a4:	d501      	bpl.n	80023aa <HAL_UART_IRQHandler+0x13a>
 80023a6:	0643      	lsls	r3, r0, #25
 80023a8:	d400      	bmi.n	80023ac <HAL_UART_IRQHandler+0x13c>
}
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 80023ac:	0020      	movs	r0, r4
 80023ae:	f7ff ff51 	bl	8002254 <UART_EndTransmit_IT>
    return;
 80023b2:	e7fa      	b.n	80023aa <HAL_UART_IRQHandler+0x13a>
 80023b4:	0000080f 	.word	0x0000080f
 80023b8:	080023bd 	.word	0x080023bd

080023bc <UART_DMAAbortOnError>:
{
 80023bc:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80023be:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	225a      	movs	r2, #90	; 0x5a
 80023c4:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80023c6:	3a08      	subs	r2, #8
 80023c8:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 80023ca:	f7fe f859 	bl	8000480 <HAL_UART_ErrorCallback>
}
 80023ce:	bd10      	pop	{r4, pc}

080023d0 <UART_SetConfig>:
{
 80023d0:	b510      	push	{r4, lr}
 80023d2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023d4:	6883      	ldr	r3, [r0, #8]
 80023d6:	6902      	ldr	r2, [r0, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	6942      	ldr	r2, [r0, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	69c2      	ldr	r2, [r0, #28]
 80023e0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023e2:	6801      	ldr	r1, [r0, #0]
 80023e4:	680a      	ldr	r2, [r1, #0]
 80023e6:	4864      	ldr	r0, [pc, #400]	; (8002578 <UART_SetConfig+0x1a8>)
 80023e8:	4002      	ands	r2, r0
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	6853      	ldr	r3, [r2, #4]
 80023f2:	4962      	ldr	r1, [pc, #392]	; (800257c <UART_SetConfig+0x1ac>)
 80023f4:	400b      	ands	r3, r1
 80023f6:	68e1      	ldr	r1, [r4, #12]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80023fc:	6a22      	ldr	r2, [r4, #32]
 80023fe:	69a3      	ldr	r3, [r4, #24]
 8002400:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002402:	6821      	ldr	r1, [r4, #0]
 8002404:	688b      	ldr	r3, [r1, #8]
 8002406:	485e      	ldr	r0, [pc, #376]	; (8002580 <UART_SetConfig+0x1b0>)
 8002408:	4003      	ands	r3, r0
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <UART_SetConfig+0x1b4>)
 8002410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002412:	2303      	movs	r3, #3
 8002414:	4013      	ands	r3, r2
 8002416:	2b01      	cmp	r3, #1
 8002418:	d024      	beq.n	8002464 <UART_SetConfig+0x94>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <UART_SetConfig+0x5a>
 800241e:	2b02      	cmp	r3, #2
 8002420:	d022      	beq.n	8002468 <UART_SetConfig+0x98>
 8002422:	2b03      	cmp	r3, #3
 8002424:	d022      	beq.n	800246c <UART_SetConfig+0x9c>
 8002426:	2310      	movs	r3, #16
 8002428:	e000      	b.n	800242c <UART_SetConfig+0x5c>
 800242a:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	0212      	lsls	r2, r2, #8
 8002430:	69e1      	ldr	r1, [r4, #28]
 8002432:	4291      	cmp	r1, r2
 8002434:	d01c      	beq.n	8002470 <UART_SetConfig+0xa0>
    switch (clocksource)
 8002436:	2b02      	cmp	r3, #2
 8002438:	d100      	bne.n	800243c <UART_SetConfig+0x6c>
 800243a:	e07e      	b.n	800253a <UART_SetConfig+0x16a>
 800243c:	d965      	bls.n	800250a <UART_SetConfig+0x13a>
 800243e:	2b04      	cmp	r3, #4
 8002440:	d100      	bne.n	8002444 <UART_SetConfig+0x74>
 8002442:	e086      	b.n	8002552 <UART_SetConfig+0x182>
 8002444:	2b08      	cmp	r3, #8
 8002446:	d000      	beq.n	800244a <UART_SetConfig+0x7a>
 8002448:	e08f      	b.n	800256a <UART_SetConfig+0x19a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800244a:	6863      	ldr	r3, [r4, #4]
 800244c:	0858      	lsrs	r0, r3, #1
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	469c      	mov	ip, r3
 8002454:	4460      	add	r0, ip
 8002456:	6861      	ldr	r1, [r4, #4]
 8002458:	f7fd fe56 	bl	8000108 <__udivsi3>
 800245c:	0403      	lsls	r3, r0, #16
 800245e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002460:	2000      	movs	r0, #0
        break;
 8002462:	e05f      	b.n	8002524 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002464:	2304      	movs	r3, #4
 8002466:	e7e1      	b.n	800242c <UART_SetConfig+0x5c>
 8002468:	2308      	movs	r3, #8
 800246a:	e7df      	b.n	800242c <UART_SetConfig+0x5c>
 800246c:	2302      	movs	r3, #2
 800246e:	e7dd      	b.n	800242c <UART_SetConfig+0x5c>
    switch (clocksource)
 8002470:	2b02      	cmp	r3, #2
 8002472:	d02e      	beq.n	80024d2 <UART_SetConfig+0x102>
 8002474:	d910      	bls.n	8002498 <UART_SetConfig+0xc8>
 8002476:	2b04      	cmp	r3, #4
 8002478:	d037      	beq.n	80024ea <UART_SetConfig+0x11a>
 800247a:	2b08      	cmp	r3, #8
 800247c:	d142      	bne.n	8002504 <UART_SetConfig+0x134>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800247e:	6863      	ldr	r3, [r4, #4]
 8002480:	0858      	lsrs	r0, r3, #1
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	469c      	mov	ip, r3
 8002488:	4460      	add	r0, ip
 800248a:	6861      	ldr	r1, [r4, #4]
 800248c:	f7fd fe3c 	bl	8000108 <__udivsi3>
 8002490:	0403      	lsls	r3, r0, #16
 8002492:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002494:	2000      	movs	r0, #0
        break;
 8002496:	e00d      	b.n	80024b4 <UART_SetConfig+0xe4>
    switch (clocksource)
 8002498:	2b00      	cmp	r3, #0
 800249a:	d133      	bne.n	8002504 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 800249c:	f7ff f90a 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024a0:	0040      	lsls	r0, r0, #1
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	18c0      	adds	r0, r0, r3
 80024a8:	6861      	ldr	r1, [r4, #4]
 80024aa:	f7fd fe2d 	bl	8000108 <__udivsi3>
 80024ae:	0403      	lsls	r3, r0, #16
 80024b0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b2:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024b4:	4934      	ldr	r1, [pc, #208]	; (8002588 <UART_SetConfig+0x1b8>)
 80024b6:	001a      	movs	r2, r3
 80024b8:	3a10      	subs	r2, #16
 80024ba:	428a      	cmp	r2, r1
 80024bc:	d858      	bhi.n	8002570 <UART_SetConfig+0x1a0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024be:	220f      	movs	r2, #15
 80024c0:	0019      	movs	r1, r3
 80024c2:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3a08      	subs	r2, #8
 80024c8:	4013      	ands	r3, r2
 80024ca:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 80024cc:	6822      	ldr	r2, [r4, #0]
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	e02f      	b.n	8002532 <UART_SetConfig+0x162>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	0858      	lsrs	r0, r3, #1
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <UART_SetConfig+0x1bc>)
 80024d8:	469c      	mov	ip, r3
 80024da:	4460      	add	r0, ip
 80024dc:	6861      	ldr	r1, [r4, #4]
 80024de:	f7fd fe13 	bl	8000108 <__udivsi3>
 80024e2:	0403      	lsls	r3, r0, #16
 80024e4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80024e6:	2000      	movs	r0, #0
        break;
 80024e8:	e7e4      	b.n	80024b4 <UART_SetConfig+0xe4>
        pclk = HAL_RCC_GetSysClockFreq();
 80024ea:	f7ff f80d 	bl	8001508 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024ee:	0040      	lsls	r0, r0, #1
 80024f0:	6863      	ldr	r3, [r4, #4]
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	18c0      	adds	r0, r0, r3
 80024f6:	6861      	ldr	r1, [r4, #4]
 80024f8:	f7fd fe06 	bl	8000108 <__udivsi3>
 80024fc:	0403      	lsls	r3, r0, #16
 80024fe:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002500:	2000      	movs	r0, #0
        break;
 8002502:	e7d7      	b.n	80024b4 <UART_SetConfig+0xe4>
        ret = HAL_ERROR;
 8002504:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002506:	2300      	movs	r3, #0
 8002508:	e7d4      	b.n	80024b4 <UART_SetConfig+0xe4>
    switch (clocksource)
 800250a:	2b00      	cmp	r3, #0
 800250c:	d12d      	bne.n	800256a <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800250e:	f7ff f8d1 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002512:	6863      	ldr	r3, [r4, #4]
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	1818      	adds	r0, r3, r0
 8002518:	6861      	ldr	r1, [r4, #4]
 800251a:	f7fd fdf5 	bl	8000108 <__udivsi3>
 800251e:	0403      	lsls	r3, r0, #16
 8002520:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002522:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002524:	4918      	ldr	r1, [pc, #96]	; (8002588 <UART_SetConfig+0x1b8>)
 8002526:	001a      	movs	r2, r3
 8002528:	3a10      	subs	r2, #16
 800252a:	428a      	cmp	r2, r1
 800252c:	d822      	bhi.n	8002574 <UART_SetConfig+0x1a4>
      huart->Instance->BRR = usartdiv;
 800252e:	6822      	ldr	r2, [r4, #0]
 8002530:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002536:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002538:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800253a:	6863      	ldr	r3, [r4, #4]
 800253c:	0858      	lsrs	r0, r3, #1
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <UART_SetConfig+0x1c0>)
 8002540:	469c      	mov	ip, r3
 8002542:	4460      	add	r0, ip
 8002544:	6861      	ldr	r1, [r4, #4]
 8002546:	f7fd fddf 	bl	8000108 <__udivsi3>
 800254a:	0403      	lsls	r3, r0, #16
 800254c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800254e:	2000      	movs	r0, #0
        break;
 8002550:	e7e8      	b.n	8002524 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetSysClockFreq();
 8002552:	f7fe ffd9 	bl	8001508 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	1818      	adds	r0, r3, r0
 800255c:	6861      	ldr	r1, [r4, #4]
 800255e:	f7fd fdd3 	bl	8000108 <__udivsi3>
 8002562:	0403      	lsls	r3, r0, #16
 8002564:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002566:	2000      	movs	r0, #0
        break;
 8002568:	e7dc      	b.n	8002524 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800256a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800256c:	2300      	movs	r3, #0
 800256e:	e7d9      	b.n	8002524 <UART_SetConfig+0x154>
      ret = HAL_ERROR;
 8002570:	2001      	movs	r0, #1
 8002572:	e7de      	b.n	8002532 <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 8002574:	2001      	movs	r0, #1
 8002576:	e7dc      	b.n	8002532 <UART_SetConfig+0x162>
 8002578:	ffff69f3 	.word	0xffff69f3
 800257c:	ffffcfff 	.word	0xffffcfff
 8002580:	fffff4ff 	.word	0xfffff4ff
 8002584:	40021000 	.word	0x40021000
 8002588:	0000ffef 	.word	0x0000ffef
 800258c:	00f42400 	.word	0x00f42400
 8002590:	007a1200 	.word	0x007a1200

08002594 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002594:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002596:	07db      	lsls	r3, r3, #31
 8002598:	d506      	bpl.n	80025a8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	6853      	ldr	r3, [r2, #4]
 800259e:	492c      	ldr	r1, [pc, #176]	; (8002650 <UART_AdvFeatureConfig+0xbc>)
 80025a0:	400b      	ands	r3, r1
 80025a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025aa:	079b      	lsls	r3, r3, #30
 80025ac:	d506      	bpl.n	80025bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025ae:	6802      	ldr	r2, [r0, #0]
 80025b0:	6853      	ldr	r3, [r2, #4]
 80025b2:	4928      	ldr	r1, [pc, #160]	; (8002654 <UART_AdvFeatureConfig+0xc0>)
 80025b4:	400b      	ands	r3, r1
 80025b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025be:	075b      	lsls	r3, r3, #29
 80025c0:	d506      	bpl.n	80025d0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025c2:	6802      	ldr	r2, [r0, #0]
 80025c4:	6853      	ldr	r3, [r2, #4]
 80025c6:	4924      	ldr	r1, [pc, #144]	; (8002658 <UART_AdvFeatureConfig+0xc4>)
 80025c8:	400b      	ands	r3, r1
 80025ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025d2:	071b      	lsls	r3, r3, #28
 80025d4:	d506      	bpl.n	80025e4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025d6:	6802      	ldr	r2, [r0, #0]
 80025d8:	6853      	ldr	r3, [r2, #4]
 80025da:	4920      	ldr	r1, [pc, #128]	; (800265c <UART_AdvFeatureConfig+0xc8>)
 80025dc:	400b      	ands	r3, r1
 80025de:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025e6:	06db      	lsls	r3, r3, #27
 80025e8:	d506      	bpl.n	80025f8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	6893      	ldr	r3, [r2, #8]
 80025ee:	491c      	ldr	r1, [pc, #112]	; (8002660 <UART_AdvFeatureConfig+0xcc>)
 80025f0:	400b      	ands	r3, r1
 80025f2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	d506      	bpl.n	800260c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025fe:	6802      	ldr	r2, [r0, #0]
 8002600:	6893      	ldr	r3, [r2, #8]
 8002602:	4918      	ldr	r1, [pc, #96]	; (8002664 <UART_AdvFeatureConfig+0xd0>)
 8002604:	400b      	ands	r3, r1
 8002606:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002608:	430b      	orrs	r3, r1
 800260a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800260c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800260e:	065b      	lsls	r3, r3, #25
 8002610:	d50b      	bpl.n	800262a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002612:	6802      	ldr	r2, [r0, #0]
 8002614:	6853      	ldr	r3, [r2, #4]
 8002616:	4914      	ldr	r1, [pc, #80]	; (8002668 <UART_AdvFeatureConfig+0xd4>)
 8002618:	400b      	ands	r3, r1
 800261a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800261c:	430b      	orrs	r3, r1
 800261e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	035b      	lsls	r3, r3, #13
 8002624:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002626:	429a      	cmp	r2, r3
 8002628:	d00a      	beq.n	8002640 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800262a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	d506      	bpl.n	800263e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002630:	6802      	ldr	r2, [r0, #0]
 8002632:	6853      	ldr	r3, [r2, #4]
 8002634:	490d      	ldr	r1, [pc, #52]	; (800266c <UART_AdvFeatureConfig+0xd8>)
 8002636:	400b      	ands	r3, r1
 8002638:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800263a:	430b      	orrs	r3, r1
 800263c:	6053      	str	r3, [r2, #4]
}
 800263e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002640:	6802      	ldr	r2, [r0, #0]
 8002642:	6853      	ldr	r3, [r2, #4]
 8002644:	490a      	ldr	r1, [pc, #40]	; (8002670 <UART_AdvFeatureConfig+0xdc>)
 8002646:	400b      	ands	r3, r1
 8002648:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800264a:	430b      	orrs	r3, r1
 800264c:	6053      	str	r3, [r2, #4]
 800264e:	e7ec      	b.n	800262a <UART_AdvFeatureConfig+0x96>
 8002650:	fffdffff 	.word	0xfffdffff
 8002654:	fffeffff 	.word	0xfffeffff
 8002658:	fffbffff 	.word	0xfffbffff
 800265c:	ffff7fff 	.word	0xffff7fff
 8002660:	ffffefff 	.word	0xffffefff
 8002664:	ffffdfff 	.word	0xffffdfff
 8002668:	ffefffff 	.word	0xffefffff
 800266c:	fff7ffff 	.word	0xfff7ffff
 8002670:	ff9fffff 	.word	0xff9fffff

08002674 <UART_WaitOnFlagUntilTimeout>:
{
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	46c6      	mov	lr, r8
 8002678:	b500      	push	{lr}
 800267a:	0005      	movs	r5, r0
 800267c:	000c      	movs	r4, r1
 800267e:	0017      	movs	r7, r2
 8002680:	4698      	mov	r8, r3
 8002682:	9e06      	ldr	r6, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4023      	ands	r3, r4
 800268a:	1b1b      	subs	r3, r3, r4
 800268c:	425a      	negs	r2, r3
 800268e:	4153      	adcs	r3, r2
 8002690:	42bb      	cmp	r3, r7
 8002692:	d13a      	bne.n	800270a <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 8002694:	1c73      	adds	r3, r6, #1
 8002696:	d0f5      	beq.n	8002684 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002698:	f7fe fb5c 	bl	8000d54 <HAL_GetTick>
 800269c:	4643      	mov	r3, r8
 800269e:	1ac0      	subs	r0, r0, r3
 80026a0:	42b0      	cmp	r0, r6
 80026a2:	d81f      	bhi.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x70>
 80026a4:	2e00      	cmp	r6, #0
 80026a6:	d01d      	beq.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	0752      	lsls	r2, r2, #29
 80026ae:	d5e9      	bpl.n	8002684 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	0512      	lsls	r2, r2, #20
 80026b4:	d5e6      	bpl.n	8002684 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026bc:	682a      	ldr	r2, [r5, #0]
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	4914      	ldr	r1, [pc, #80]	; (8002714 <UART_WaitOnFlagUntilTimeout+0xa0>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c6:	682a      	ldr	r2, [r5, #0]
 80026c8:	6893      	ldr	r3, [r2, #8]
 80026ca:	31a3      	adds	r1, #163	; 0xa3
 80026cc:	31ff      	adds	r1, #255	; 0xff
 80026ce:	438b      	bics	r3, r1
 80026d0:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80026d2:	2320      	movs	r3, #32
 80026d4:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80026d6:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026d8:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80026da:	3350      	adds	r3, #80	; 0x50
 80026dc:	2200      	movs	r2, #0
 80026de:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 80026e0:	2003      	movs	r0, #3
 80026e2:	e013      	b.n	800270c <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026e4:	682a      	ldr	r2, [r5, #0]
 80026e6:	6813      	ldr	r3, [r2, #0]
 80026e8:	490a      	ldr	r1, [pc, #40]	; (8002714 <UART_WaitOnFlagUntilTimeout+0xa0>)
 80026ea:	400b      	ands	r3, r1
 80026ec:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ee:	682a      	ldr	r2, [r5, #0]
 80026f0:	6893      	ldr	r3, [r2, #8]
 80026f2:	31a3      	adds	r1, #163	; 0xa3
 80026f4:	31ff      	adds	r1, #255	; 0xff
 80026f6:	438b      	bics	r3, r1
 80026f8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80026fa:	2320      	movs	r3, #32
 80026fc:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80026fe:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002700:	3350      	adds	r3, #80	; 0x50
 8002702:	2200      	movs	r2, #0
 8002704:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8002706:	2003      	movs	r0, #3
 8002708:	e000      	b.n	800270c <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 800270a:	2000      	movs	r0, #0
}
 800270c:	bc04      	pop	{r2}
 800270e:	4690      	mov	r8, r2
 8002710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	fffffe5f 	.word	0xfffffe5f

08002718 <HAL_UART_Transmit>:
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b085      	sub	sp, #20
 800271c:	0004      	movs	r4, r0
 800271e:	000e      	movs	r6, r1
 8002720:	0017      	movs	r7, r2
 8002722:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002724:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002726:	2b20      	cmp	r3, #32
 8002728:	d15f      	bne.n	80027ea <HAL_UART_Transmit+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800272a:	2900      	cmp	r1, #0
 800272c:	d060      	beq.n	80027f0 <HAL_UART_Transmit+0xd8>
 800272e:	2a00      	cmp	r2, #0
 8002730:	d060      	beq.n	80027f4 <HAL_UART_Transmit+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	6882      	ldr	r2, [r0, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d018      	beq.n	800276e <HAL_UART_Transmit+0x56>
    __HAL_LOCK(huart);
 800273c:	2370      	movs	r3, #112	; 0x70
 800273e:	5ce3      	ldrb	r3, [r4, r3]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d059      	beq.n	80027f8 <HAL_UART_Transmit+0xe0>
 8002744:	2370      	movs	r3, #112	; 0x70
 8002746:	2201      	movs	r2, #1
 8002748:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	2300      	movs	r3, #0
 800274c:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800274e:	3321      	adds	r3, #33	; 0x21
 8002750:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002752:	f7fe faff 	bl	8000d54 <HAL_GetTick>
 8002756:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 8002758:	2350      	movs	r3, #80	; 0x50
 800275a:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 800275c:	3302      	adds	r3, #2
 800275e:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	68a2      	ldr	r2, [r4, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	d008      	beq.n	800277c <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800276a:	2700      	movs	r7, #0
 800276c:	e019      	b.n	80027a2 <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276e:	6903      	ldr	r3, [r0, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e3      	bne.n	800273c <HAL_UART_Transmit+0x24>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002774:	07cb      	lsls	r3, r1, #31
 8002776:	d5e1      	bpl.n	800273c <HAL_UART_Transmit+0x24>
        return  HAL_ERROR;
 8002778:	2001      	movs	r0, #1
 800277a:	e037      	b.n	80027ec <HAL_UART_Transmit+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	6923      	ldr	r3, [r4, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_UART_Transmit+0x6e>
      pdata16bits = NULL;
 8002782:	2700      	movs	r7, #0
 8002784:	e00d      	b.n	80027a2 <HAL_UART_Transmit+0x8a>
      pdata16bits = (uint16_t *) pData;
 8002786:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 8002788:	2600      	movs	r6, #0
 800278a:	e00a      	b.n	80027a2 <HAL_UART_Transmit+0x8a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800278c:	883b      	ldrh	r3, [r7, #0]
 800278e:	05db      	lsls	r3, r3, #23
 8002790:	0ddb      	lsrs	r3, r3, #23
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8002796:	3702      	adds	r7, #2
      huart->TxXferCount--;
 8002798:	2252      	movs	r2, #82	; 0x52
 800279a:	5aa3      	ldrh	r3, [r4, r2]
 800279c:	3b01      	subs	r3, #1
 800279e:	b29b      	uxth	r3, r3
 80027a0:	52a3      	strh	r3, [r4, r2]
    while (huart->TxXferCount > 0U)
 80027a2:	2352      	movs	r3, #82	; 0x52
 80027a4:	5ae3      	ldrh	r3, [r4, r3]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00f      	beq.n	80027cc <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ac:	9500      	str	r5, [sp, #0]
 80027ae:	9b03      	ldr	r3, [sp, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	0020      	movs	r0, r4
 80027b6:	f7ff ff5d 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d11e      	bne.n	80027fc <HAL_UART_Transmit+0xe4>
      if (pdata8bits == NULL)
 80027be:	2e00      	cmp	r6, #0
 80027c0:	d0e4      	beq.n	800278c <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027c2:	7833      	ldrb	r3, [r6, #0]
 80027c4:	6822      	ldr	r2, [r4, #0]
 80027c6:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80027c8:	3601      	adds	r6, #1
 80027ca:	e7e5      	b.n	8002798 <HAL_UART_Transmit+0x80>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027cc:	9500      	str	r5, [sp, #0]
 80027ce:	9b03      	ldr	r3, [sp, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2140      	movs	r1, #64	; 0x40
 80027d4:	0020      	movs	r0, r4
 80027d6:	f7ff ff4d 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 80027da:	2800      	cmp	r0, #0
 80027dc:	d110      	bne.n	8002800 <HAL_UART_Transmit+0xe8>
    huart->gState = HAL_UART_STATE_READY;
 80027de:	2320      	movs	r3, #32
 80027e0:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80027e2:	3350      	adds	r3, #80	; 0x50
 80027e4:	2200      	movs	r2, #0
 80027e6:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80027e8:	e000      	b.n	80027ec <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 80027ea:	2002      	movs	r0, #2
}
 80027ec:	b005      	add	sp, #20
 80027ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
 80027f2:	e7fb      	b.n	80027ec <HAL_UART_Transmit+0xd4>
 80027f4:	2001      	movs	r0, #1
 80027f6:	e7f9      	b.n	80027ec <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 80027f8:	2002      	movs	r0, #2
 80027fa:	e7f7      	b.n	80027ec <HAL_UART_Transmit+0xd4>
        return HAL_TIMEOUT;
 80027fc:	2003      	movs	r0, #3
 80027fe:	e7f5      	b.n	80027ec <HAL_UART_Transmit+0xd4>
      return HAL_TIMEOUT;
 8002800:	2003      	movs	r0, #3
 8002802:	e7f3      	b.n	80027ec <HAL_UART_Transmit+0xd4>

08002804 <UART_CheckIdleState>:
{
 8002804:	b530      	push	{r4, r5, lr}
 8002806:	b083      	sub	sp, #12
 8002808:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	2300      	movs	r3, #0
 800280c:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800280e:	f7fe faa1 	bl	8000d54 <HAL_GetTick>
 8002812:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	d40c      	bmi.n	8002836 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	075b      	lsls	r3, r3, #29
 8002822:	d415      	bmi.n	8002850 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002824:	2320      	movs	r3, #32
 8002826:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800282a:	3350      	adds	r3, #80	; 0x50
 800282c:	2200      	movs	r2, #0
 800282e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002830:	2000      	movs	r0, #0
}
 8002832:	b003      	add	sp, #12
 8002834:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002836:	2180      	movs	r1, #128	; 0x80
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <UART_CheckIdleState+0x68>)
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	0003      	movs	r3, r0
 800283e:	2200      	movs	r2, #0
 8002840:	0389      	lsls	r1, r1, #14
 8002842:	0020      	movs	r0, r4
 8002844:	f7ff ff16 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 8002848:	2800      	cmp	r0, #0
 800284a:	d0e7      	beq.n	800281c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800284c:	2003      	movs	r0, #3
 800284e:	e7f0      	b.n	8002832 <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <UART_CheckIdleState+0x68>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	002b      	movs	r3, r5
 8002858:	2200      	movs	r2, #0
 800285a:	03c9      	lsls	r1, r1, #15
 800285c:	0020      	movs	r0, r4
 800285e:	f7ff ff09 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 8002862:	2800      	cmp	r0, #0
 8002864:	d0de      	beq.n	8002824 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8002866:	2003      	movs	r0, #3
 8002868:	e7e3      	b.n	8002832 <UART_CheckIdleState+0x2e>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	01ffffff 	.word	0x01ffffff

08002870 <HAL_UART_Init>:
{
 8002870:	b510      	push	{r4, lr}
 8002872:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002874:	d02e      	beq.n	80028d4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002876:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002878:	2b00      	cmp	r3, #0
 800287a:	d021      	beq.n	80028c0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800287c:	2324      	movs	r3, #36	; 0x24
 800287e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	438b      	bics	r3, r1
 8002888:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288a:	0020      	movs	r0, r4
 800288c:	f7ff fda0 	bl	80023d0 <UART_SetConfig>
 8002890:	2801      	cmp	r0, #1
 8002892:	d014      	beq.n	80028be <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800289a:	6822      	ldr	r2, [r4, #0]
 800289c:	6853      	ldr	r3, [r2, #4]
 800289e:	490e      	ldr	r1, [pc, #56]	; (80028d8 <HAL_UART_Init+0x68>)
 80028a0:	400b      	ands	r3, r1
 80028a2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028a4:	6822      	ldr	r2, [r4, #0]
 80028a6:	6893      	ldr	r3, [r2, #8]
 80028a8:	2108      	movs	r1, #8
 80028aa:	438b      	bics	r3, r1
 80028ac:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80028ae:	6822      	ldr	r2, [r4, #0]
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	3907      	subs	r1, #7
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80028b8:	0020      	movs	r0, r4
 80028ba:	f7ff ffa3 	bl	8002804 <UART_CheckIdleState>
}
 80028be:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80028c0:	3370      	adds	r3, #112	; 0x70
 80028c2:	2200      	movs	r2, #0
 80028c4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80028c6:	f7fe f989 	bl	8000bdc <HAL_UART_MspInit>
 80028ca:	e7d7      	b.n	800287c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80028cc:	0020      	movs	r0, r4
 80028ce:	f7ff fe61 	bl	8002594 <UART_AdvFeatureConfig>
 80028d2:	e7e2      	b.n	800289a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80028d4:	2001      	movs	r0, #1
 80028d6:	e7f2      	b.n	80028be <HAL_UART_Init+0x4e>
 80028d8:	fffff7ff 	.word	0xfffff7ff

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	2600      	movs	r6, #0
 80028e0:	4d0c      	ldr	r5, [pc, #48]	; (8002914 <__libc_init_array+0x38>)
 80028e2:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e4:	1b64      	subs	r4, r4, r5
 80028e6:	10a4      	asrs	r4, r4, #2
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	2600      	movs	r6, #0
 80028ee:	f000 f821 	bl	8002934 <_init>
 80028f2:	4d0a      	ldr	r5, [pc, #40]	; (800291c <__libc_init_array+0x40>)
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <__libc_init_array+0x44>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	00b3      	lsls	r3, r6, #2
 8002902:	58eb      	ldr	r3, [r5, r3]
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	00b3      	lsls	r3, r6, #2
 800290c:	58eb      	ldr	r3, [r5, r3]
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	0800299c 	.word	0x0800299c
 8002918:	0800299c 	.word	0x0800299c
 800291c:	0800299c 	.word	0x0800299c
 8002920:	080029a0 	.word	0x080029a0

08002924 <memset>:
 8002924:	0003      	movs	r3, r0
 8002926:	1812      	adds	r2, r2, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	7019      	strb	r1, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
