
CS_RC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003300  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.__at_0x08002008 00000004  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003538  08003538  00020020  2**0
                  CONTENTS
  5 .ARM          00000000  08003538  08003538  00020020  2**0
                  CONTENTS
  6 .preinit_array 00000000  08003538  08003538  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000020  20000000  08003540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004a0  20000020  08003560  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  08003560  000204c0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001052c  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000255f  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000073fb  00000000  00000000  00032ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000ae8  00000000  00000000  00039ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000a78  00000000  00000000  0003a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0000dd8f  00000000  00000000  0003b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000a8e6  00000000  00000000  000491bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0004b02f  00000000  00000000  00053aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0009ead4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001bf0  00000000  00000000  0009eb50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033a8 	.word	0x080033a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080033a8 	.word	0x080033a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Hex2Str>:
 * @brief
 * @param
 * @retval
 */
void Hex2Str(char *pstr, const uint8_t *phex, uint16_t str_size)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	b082      	sub	sp, #8
	__IO uint32_t scnt = 0U;
 8000224:	2300      	movs	r3, #0
 8000226:	9301      	str	r3, [sp, #4]

	while (str_size) //------------------------------------------convert requested hex chars from string to integer value
 8000228:	e009      	b.n	800023e <Hex2Str+0x1e>
	{
		if (scnt == 0U)
		{
			uint32_t tmp = ((*phex >> 4) & 0x0FU);  //----------select high nibble
			if (tmp > 0x09U) *pstr = tmp + 0x37U;    //----------convert to upper ascii letter
			else *pstr = tmp + 0x30U;   //----------------------convert to char digit
 800022a:	3330      	adds	r3, #48	; 0x30
 800022c:	7003      	strb	r3, [r0, #0]
			++scnt;
 800022e:	9b01      	ldr	r3, [sp, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	9301      	str	r3, [sp, #4]
			else *pstr = tmp + 0x30U;   //----------------------convert to char digit
			scnt = 0U;
			++phex;
		}

		++pstr;
 8000234:	3001      	adds	r0, #1
		*pstr = 0x00U; //----------------------------------------0x00U terminate string
 8000236:	2300      	movs	r3, #0
 8000238:	7003      	strb	r3, [r0, #0]
		--str_size;
 800023a:	3a01      	subs	r2, #1
 800023c:	b292      	uxth	r2, r2
	while (str_size) //------------------------------------------convert requested hex chars from string to integer value
 800023e:	2a00      	cmp	r2, #0
 8000240:	d017      	beq.n	8000272 <Hex2Str+0x52>
		if (scnt == 0U)
 8000242:	9b01      	ldr	r3, [sp, #4]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d106      	bne.n	8000256 <Hex2Str+0x36>
			uint32_t tmp = ((*phex >> 4) & 0x0FU);  //----------select high nibble
 8000248:	780b      	ldrb	r3, [r1, #0]
 800024a:	091b      	lsrs	r3, r3, #4
			if (tmp > 0x09U) *pstr = tmp + 0x37U;    //----------convert to upper ascii letter
 800024c:	2b09      	cmp	r3, #9
 800024e:	d9ec      	bls.n	800022a <Hex2Str+0xa>
 8000250:	3337      	adds	r3, #55	; 0x37
 8000252:	7003      	strb	r3, [r0, #0]
 8000254:	e7eb      	b.n	800022e <Hex2Str+0xe>
			uint32_t tmp = (*phex & 0x0FU); //------------------select low nibble
 8000256:	780c      	ldrb	r4, [r1, #0]
 8000258:	230f      	movs	r3, #15
 800025a:	4023      	ands	r3, r4
			if (tmp > 0x09U) *pstr = tmp + 0x37U;    //----------convert to upper ascii letter
 800025c:	2b09      	cmp	r3, #9
 800025e:	d905      	bls.n	800026c <Hex2Str+0x4c>
 8000260:	3337      	adds	r3, #55	; 0x37
 8000262:	7003      	strb	r3, [r0, #0]
			scnt = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	9301      	str	r3, [sp, #4]
			++phex;
 8000268:	3101      	adds	r1, #1
 800026a:	e7e3      	b.n	8000234 <Hex2Str+0x14>
			else *pstr = tmp + 0x30U;   //----------------------convert to char digit
 800026c:	3330      	adds	r3, #48	; 0x30
 800026e:	7003      	strb	r3, [r0, #0]
 8000270:	e7f8      	b.n	8000264 <Hex2Str+0x44>
	}
}
 8000272:	b002      	add	sp, #8
 8000274:	bd10      	pop	{r4, pc}

08000276 <mem_cpy>:
void mem_cpy(void *dst, const void *src, uint32_t cnt)
{
	uint8_t *d = (uint8_t*) dst;
	const uint8_t *s = (const uint8_t*) src;

	if (cnt)
 8000276:	2a00      	cmp	r2, #0
 8000278:	d006      	beq.n	8000288 <mem_cpy+0x12>
	{
		do
		{
			*d++ = *s++;
 800027a:	780b      	ldrb	r3, [r1, #0]
 800027c:	7003      	strb	r3, [r0, #0]
		}
		while (--cnt);
 800027e:	3a01      	subs	r2, #1
			*d++ = *s++;
 8000280:	3001      	adds	r0, #1
 8000282:	3101      	adds	r1, #1
		while (--cnt);
 8000284:	2a00      	cmp	r2, #0
 8000286:	d1f8      	bne.n	800027a <mem_cpy+0x4>
	}
}
 8000288:	4770      	bx	lr

0800028a <mem_set>:
{
	uint8_t *d = (uint8_t*) dst;

	do
	{
		*d++ = (uint8_t) val;
 800028a:	7001      	strb	r1, [r0, #0]
	}
	while (--cnt);
 800028c:	3a01      	subs	r2, #1
		*d++ = (uint8_t) val;
 800028e:	3001      	adds	r0, #1
	while (--cnt);
 8000290:	2a00      	cmp	r2, #0
 8000292:	d1fa      	bne.n	800028a <mem_set>
}
 8000294:	4770      	bx	lr
	...

08000298 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct =
 800029c:	2214      	movs	r2, #20
 800029e:	2100      	movs	r1, #0
 80002a0:	a803      	add	r0, sp, #12
 80002a2:	f003 f879 	bl	8003398 <memset>
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80002a6:	4b23      	ldr	r3, [pc, #140]	; (8000334 <MX_GPIO_Init+0x9c>)
 80002a8:	6959      	ldr	r1, [r3, #20]
 80002aa:	2080      	movs	r0, #128	; 0x80
 80002ac:	03c0      	lsls	r0, r0, #15
 80002ae:	4301      	orrs	r1, r0
 80002b0:	6159      	str	r1, [r3, #20]
 80002b2:	695a      	ldr	r2, [r3, #20]
 80002b4:	4002      	ands	r2, r0
 80002b6:	9200      	str	r2, [sp, #0]
 80002b8:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	6959      	ldr	r1, [r3, #20]
 80002bc:	2080      	movs	r0, #128	; 0x80
 80002be:	0280      	lsls	r0, r0, #10
 80002c0:	4301      	orrs	r1, r0
 80002c2:	6159      	str	r1, [r3, #20]
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4002      	ands	r2, r0
 80002c8:	9201      	str	r2, [sp, #4]
 80002ca:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	695a      	ldr	r2, [r3, #20]
 80002ce:	2180      	movs	r1, #128	; 0x80
 80002d0:	02c9      	lsls	r1, r1, #11
 80002d2:	430a      	orrs	r2, r1
 80002d4:	615a      	str	r2, [r3, #20]
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	400b      	ands	r3, r1
 80002da:	9302      	str	r3, [sp, #8]
 80002dc:	9b02      	ldr	r3, [sp, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80002de:	2790      	movs	r7, #144	; 0x90
 80002e0:	05ff      	lsls	r7, r7, #23
 80002e2:	2200      	movs	r2, #0
 80002e4:	211f      	movs	r1, #31
 80002e6:	0038      	movs	r0, r7
 80002e8:	f001 fa7e 	bl	80017e8 <HAL_GPIO_WritePin>
	LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | SPI_NSS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS522_RST_GPIO_Port, RS522_RST_Pin, GPIO_PIN_RESET);
 80002ec:	4d12      	ldr	r5, [pc, #72]	; (8000338 <MX_GPIO_Init+0xa0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	2102      	movs	r1, #2
 80002f2:	0028      	movs	r0, r5
 80002f4:	f001 fa78 	bl	80017e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PF0 PF1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80002f8:	2303      	movs	r3, #3
 80002fa:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fc:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2400      	movs	r4, #0
 8000300:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000302:	a903      	add	r1, sp, #12
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <MX_GPIO_Init+0xa4>)
 8000306:	f001 f92f 	bl	8001568 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
	 SPI_NSS_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | SPI_NSS_Pin;
 800030a:	231f      	movs	r3, #31
 800030c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030e:	2601      	movs	r6, #1
 8000310:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	a903      	add	r1, sp, #12
 8000318:	0038      	movs	r0, r7
 800031a:	f001 f925 	bl	8001568 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS522_RST_Pin */
	GPIO_InitStruct.Pin = RS522_RST_Pin;
 800031e:	2302      	movs	r3, #2
 8000320:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(RS522_RST_GPIO_Port, &GPIO_InitStruct);
 8000328:	a903      	add	r1, sp, #12
 800032a:	0028      	movs	r0, r5
 800032c:	f001 f91c 	bl	8001568 <HAL_GPIO_Init>

}
 8000330:	b009      	add	sp, #36	; 0x24
 8000332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	48000400 	.word	0x48000400
 800033c:	48001400 	.word	0x48001400

08000340 <MX_CRC_Init>:
{
 8000340:	b510      	push	{r4, lr}
	hcrc.Instance = CRC;
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <MX_CRC_Init+0x1c>)
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_CRC_Init+0x20>)
 8000346:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000348:	2300      	movs	r3, #0
 800034a:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800034c:	60c3      	str	r3, [r0, #12]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800034e:	6103      	str	r3, [r0, #16]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000350:	3301      	adds	r3, #1
 8000352:	6183      	str	r3, [r0, #24]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000354:	f001 f8b8 	bl	80014c8 <HAL_CRC_Init>
}
 8000358:	bd10      	pop	{r4, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	20000274 	.word	0x20000274
 8000360:	40023000 	.word	0x40023000

08000364 <MX_RTC_Init>:
{
 8000364:	b570      	push	{r4, r5, r6, lr}
	hrtc.Instance = RTC;
 8000366:	4c12      	ldr	r4, [pc, #72]	; (80003b0 <MX_RTC_Init+0x4c>)
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_RTC_Init+0x50>)
 800036a:	6023      	str	r3, [r4, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800036c:	2500      	movs	r5, #0
 800036e:	6065      	str	r5, [r4, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000370:	237f      	movs	r3, #127	; 0x7f
 8000372:	60a3      	str	r3, [r4, #8]
	hrtc.Init.SynchPrediv = 255;
 8000374:	3380      	adds	r3, #128	; 0x80
 8000376:	60e3      	str	r3, [r4, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	6125      	str	r5, [r4, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800037a:	6165      	str	r5, [r4, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800037c:	61a5      	str	r5, [r4, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800037e:	0020      	movs	r0, r4
 8000380:	f001 fe34 	bl	8001fec <HAL_RTC_Init>
	sTime.Hours = 0x0;
 8000384:	490c      	ldr	r1, [pc, #48]	; (80003b8 <MX_RTC_Init+0x54>)
 8000386:	700d      	strb	r5, [r1, #0]
	sTime.Minutes = 0x0;
 8000388:	704d      	strb	r5, [r1, #1]
	sTime.Seconds = 0x0;
 800038a:	708d      	strb	r5, [r1, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800038c:	60cd      	str	r5, [r1, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800038e:	610d      	str	r5, [r1, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000390:	2201      	movs	r2, #1
 8000392:	0020      	movs	r0, r4
 8000394:	f001 fe98 	bl	80020c8 <HAL_RTC_SetTime>
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000398:	4908      	ldr	r1, [pc, #32]	; (80003bc <MX_RTC_Init+0x58>)
 800039a:	2301      	movs	r3, #1
 800039c:	700b      	strb	r3, [r1, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800039e:	704b      	strb	r3, [r1, #1]
	sDate.Date = 0x1;
 80003a0:	708b      	strb	r3, [r1, #2]
	sDate.Year = 0x0;
 80003a2:	70cd      	strb	r5, [r1, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003a4:	2201      	movs	r2, #1
 80003a6:	0020      	movs	r0, r4
 80003a8:	f001 ff0c 	bl	80021c4 <HAL_RTC_SetDate>
}
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	20000310 	.word	0x20000310
 80003b4:	40002800 	.word	0x40002800
 80003b8:	20000044 	.word	0x20000044
 80003bc:	20000040 	.word	0x20000040

080003c0 <MX_SPI1_Init>:
{
 80003c0:	b510      	push	{r4, lr}
	hspi1.Instance = SPI1;
 80003c2:	480e      	ldr	r0, [pc, #56]	; (80003fc <MX_SPI1_Init+0x3c>)
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_SPI1_Init+0x40>)
 80003c6:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c8:	2382      	movs	r3, #130	; 0x82
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	2300      	movs	r3, #0
 80003d0:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d2:	22e0      	movs	r2, #224	; 0xe0
 80003d4:	00d2      	lsls	r2, r2, #3
 80003d6:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d8:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003da:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	0092      	lsls	r2, r2, #2
 80003e0:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003e2:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e4:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e6:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e8:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80003ea:	3afa      	subs	r2, #250	; 0xfa
 80003ec:	3aff      	subs	r2, #255	; 0xff
 80003ee:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f0:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003f2:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f4:	f002 f828 	bl	8002448 <HAL_SPI_Init>
}
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	20000330 	.word	0x20000330
 8000400:	40013000 	.word	0x40013000

08000404 <SystemClock_Config>:
{
 8000404:	b510      	push	{r4, lr}
 8000406:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000408:	222c      	movs	r2, #44	; 0x2c
 800040a:	2100      	movs	r1, #0
 800040c:	a809      	add	r0, sp, #36	; 0x24
 800040e:	f002 ffc3 	bl	8003398 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000412:	2210      	movs	r2, #16
 8000414:	2100      	movs	r1, #0
 8000416:	a804      	add	r0, sp, #16
 8000418:	f002 ffbe 	bl	8003398 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800041c:	2210      	movs	r2, #16
 800041e:	2100      	movs	r1, #0
 8000420:	4668      	mov	r0, sp
 8000422:	f002 ffb9 	bl	8003398 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 8000426:	230a      	movs	r3, #10
 8000428:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042a:	3b09      	subs	r3, #9
 800042c:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042e:	2210      	movs	r2, #16
 8000430:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000432:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2402      	movs	r4, #2
 8000436:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000438:	23c0      	movs	r3, #192	; 0xc0
 800043a:	035b      	lsls	r3, r3, #13
 800043c:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	a808      	add	r0, sp, #32
 8000440:	f001 f9e0 	bl	8001804 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000444:	2307      	movs	r3, #7
 8000446:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044a:	2400      	movs	r4, #0
 800044c:	9406      	str	r4, [sp, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044e:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000450:	2101      	movs	r1, #1
 8000452:	a804      	add	r0, sp, #16
 8000454:	f001 fc5a 	bl	8001d0c <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_RTC;
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <SystemClock_Config+0x6c>)
 800045a:	9300      	str	r3, [sp, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800045c:	9402      	str	r4, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	9301      	str	r3, [sp, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000464:	4668      	mov	r0, sp
 8000466:	f001 fcff 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
}
 800046a:	b014      	add	sp, #80	; 0x50
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	00010001 	.word	0x00010001

08000474 <main>:
{
 8000474:	b510      	push	{r4, lr}
 	HAL_Init();
 8000476:	f000 ff75 	bl	8001364 <HAL_Init>
	SystemClock_Config();
 800047a:	f7ff ffc3 	bl	8000404 <SystemClock_Config>
	MX_GPIO_Init();
 800047e:	f7ff ff0b 	bl	8000298 <MX_GPIO_Init>
	MX_CRC_Init();
 8000482:	f7ff ff5d 	bl	8000340 <MX_CRC_Init>
	MX_RTC_Init();
 8000486:	f7ff ff6d 	bl	8000364 <MX_RTC_Init>
	MX_SPI1_Init();
 800048a:	f7ff ff99 	bl	80003c0 <MX_SPI1_Init>
	RC522_Init();
 800048e:	f000 fd3d 	bl	8000f0c <RC522_Init>
	OW_Init();
 8000492:	f000 f855 	bl	8000540 <OW_Init>
		RC522_Service();
 8000496:	f000 fd77 	bl	8000f88 <RC522_Service>
		OW_Service();
 800049a:	f000 f881 	bl	80005a0 <OW_Service>
 800049e:	e7fa      	b.n	8000496 <main+0x22>

080004a0 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004a0:	4770      	bx	lr
	...

080004a4 <OW_SetUsart>:
 * @brief
 * @param
 * @retval
 */
static void OW_SetUsart(uint8_t brate, uint8_t bsize)
{
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	0006      	movs	r6, r0
 80004a8:	000d      	movs	r5, r1
	huart1.Instance = USART1;
 80004aa:	4c22      	ldr	r4, [pc, #136]	; (8000534 <OW_SetUsart+0x90>)
 80004ac:	4f22      	ldr	r7, [pc, #136]	; (8000538 <OW_SetUsart+0x94>)
 80004ae:	6027      	str	r7, [r4, #0]
	HAL_UART_DeInit(&huart1);
 80004b0:	0020      	movs	r0, r4
 80004b2:	f002 fadd 	bl	8002a70 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 80004b6:	6027      	str	r7, [r4, #0]
	huart1.Init.BaudRate = bps[brate];
 80004b8:	00b6      	lsls	r6, r6, #2
 80004ba:	4b20      	ldr	r3, [pc, #128]	; (800053c <OW_SetUsart+0x98>)
 80004bc:	58f3      	ldr	r3, [r6, r3]
 80004be:	6063      	str	r3, [r4, #4]
	if (bsize == WL_9BIT) huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d116      	bne.n	80004f2 <OW_SetUsart+0x4e>
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <OW_SetUsart+0x90>)
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	0152      	lsls	r2, r2, #5
 80004ca:	609a      	str	r2, [r3, #8]
	else if (bsize == WL_8BIT) huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <OW_SetUsart+0x90>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004d4:	210c      	movs	r1, #12
 80004d6:	6159      	str	r1, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d8:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004da:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004dc:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80004de:	3208      	adds	r2, #8
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	0212      	lsls	r2, r2, #8
 80004e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (bsize == WL_9BIT)
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d008      	beq.n	80004fe <OW_SetUsart+0x5a>
	{
		if (HAL_MultiProcessor_Init(&huart1, STX, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK) Error_Handler();
		HAL_MultiProcessor_EnableMuteMode(&huart1);
		HAL_MultiProcessor_EnterMuteMode(&huart1);
	}
	else if (bsize == WL_8BIT)
 80004ec:	2d01      	cmp	r5, #1
 80004ee:	d019      	beq.n	8000524 <OW_SetUsart+0x80>
	{
		if (HAL_UART_Init(&huart1) != HAL_OK) Error_Handler(); //(MAIN_FUNC, USART_DRV);
	}

}
 80004f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (bsize == WL_8BIT) huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	2d01      	cmp	r5, #1
 80004f4:	d1ea      	bne.n	80004cc <OW_SetUsart+0x28>
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <OW_SetUsart+0x90>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	e7e6      	b.n	80004cc <OW_SetUsart+0x28>
		if (HAL_MultiProcessor_Init(&huart1, STX, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK) Error_Handler();
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	0112      	lsls	r2, r2, #4
 8000502:	390a      	subs	r1, #10
 8000504:	0018      	movs	r0, r3
 8000506:	f002 febf 	bl	8003288 <HAL_MultiProcessor_Init>
 800050a:	2800      	cmp	r0, #0
 800050c:	d107      	bne.n	800051e <OW_SetUsart+0x7a>
		HAL_MultiProcessor_EnableMuteMode(&huart1);
 800050e:	4c09      	ldr	r4, [pc, #36]	; (8000534 <OW_SetUsart+0x90>)
 8000510:	0020      	movs	r0, r4
 8000512:	f002 ff05 	bl	8003320 <HAL_MultiProcessor_EnableMuteMode>
		HAL_MultiProcessor_EnterMuteMode(&huart1);
 8000516:	0020      	movs	r0, r4
 8000518:	f002 fca0 	bl	8002e5c <HAL_MultiProcessor_EnterMuteMode>
 800051c:	e7e8      	b.n	80004f0 <OW_SetUsart+0x4c>
		if (HAL_MultiProcessor_Init(&huart1, STX, UART_WAKEUPMETHOD_ADDRESSMARK) != HAL_OK) Error_Handler();
 800051e:	f7ff ffbf 	bl	80004a0 <Error_Handler>
 8000522:	e7f4      	b.n	800050e <OW_SetUsart+0x6a>
		if (HAL_UART_Init(&huart1) != HAL_OK) Error_Handler(); //(MAIN_FUNC, USART_DRV);
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <OW_SetUsart+0x90>)
 8000526:	f002 fe79 	bl	800321c <HAL_UART_Init>
 800052a:	2800      	cmp	r0, #0
 800052c:	d0e0      	beq.n	80004f0 <OW_SetUsart+0x4c>
 800052e:	f7ff ffb7 	bl	80004a0 <Error_Handler>
}
 8000532:	e7dd      	b.n	80004f0 <OW_SetUsart+0x4c>
 8000534:	20000290 	.word	0x20000290
 8000538:	40013800 	.word	0x40013800
 800053c:	080033e0 	.word	0x080033e0

08000540 <OW_Init>:
{
 8000540:	b510      	push	{r4, lr}
	OW_SetUsart(BR_9600, WL_9BIT);
 8000542:	2100      	movs	r1, #0
 8000544:	2002      	movs	r0, #2
 8000546:	f7ff ffad 	bl	80004a4 <OW_SetUsart>
		SET_BIT(huart1.Instance->RQR, UART_RXDATA_FLUSH_REQUEST);
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <OW_Init+0x40>)
 800054c:	6802      	ldr	r2, [r0, #0]
 800054e:	6993      	ldr	r3, [r2, #24]
 8000550:	2108      	movs	r1, #8
 8000552:	430b      	orrs	r3, r1
 8000554:	6193      	str	r3, [r2, #24]
	HAL_UART_Receive_IT(&huart1, ow_rxbuf, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	490a      	ldr	r1, [pc, #40]	; (8000584 <OW_Init+0x44>)
 800055a:	f002 faed 	bl	8002b38 <HAL_UART_Receive_IT>
	ow_rxtmr = HAL_GetTick();
 800055e:	f000 ff1d 	bl	800139c <HAL_GetTick>
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <OW_Init+0x48>)
 8000564:	6018      	str	r0, [r3, #0]
	ow_rxtout = REC_TOUT;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <OW_Init+0x4c>)
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <OW_Init+0x50>)
 800056a:	601a      	str	r2, [r3, #0]
	COM_State = RX_START;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <OW_Init+0x54>)
 800056e:	2204      	movs	r2, #4
 8000570:	701a      	strb	r2, [r3, #0]
	COM_Link = NOLINK;
 8000572:	2300      	movs	r3, #0
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <OW_Init+0x58>)
 8000576:	7013      	strb	r3, [r2, #0]
	ow_bcnt = 0U;
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <OW_Init+0x5c>)
 800057a:	8013      	strh	r3, [r2, #0]
}
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000290 	.word	0x20000290
 8000584:	20000058 	.word	0x20000058
 8000588:	200003b4 	.word	0x200003b4
 800058c:	200003a8 	.word	0x200003a8
 8000590:	0000162e 	.word	0x0000162e
 8000594:	2000003d 	.word	0x2000003d
 8000598:	2000003c 	.word	0x2000003c
 800059c:	200003ac 	.word	0x200003ac

080005a0 <OW_Service>:
{
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (COM_State != RX_LOCK)
 80005a2:	4baf      	ldr	r3, [pc, #700]	; (8000860 <OW_Service+0x2c0>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d10c      	bne.n	80005c4 <OW_Service+0x24>
	if (COM_State == RX_LOCK)
 80005aa:	4bad      	ldr	r3, [pc, #692]	; (8000860 <OW_Service+0x2c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d014      	beq.n	80005dc <OW_Service+0x3c>
	else if (COM_State == RX_READY)
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d026      	beq.n	8000604 <OW_Service+0x64>
	else if (COM_State == RX_ERROR)
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d100      	bne.n	80005bc <OW_Service+0x1c>
 80005ba:	e14a      	b.n	8000852 <OW_Service+0x2b2>
	else if (COM_State == RX_INIT)
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <OW_Service+0x22>
 80005c0:	e14a      	b.n	8000858 <OW_Service+0x2b8>
}
 80005c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((HAL_GetTick() - ow_rxtmr) >= ow_rxtout) OW_Init();
 80005c4:	f000 feea 	bl	800139c <HAL_GetTick>
 80005c8:	4ba6      	ldr	r3, [pc, #664]	; (8000864 <OW_Service+0x2c4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1ac0      	subs	r0, r0, r3
 80005ce:	4ba6      	ldr	r3, [pc, #664]	; (8000868 <OW_Service+0x2c8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d3e9      	bcc.n	80005aa <OW_Service+0xa>
 80005d6:	f7ff ffb3 	bl	8000540 <OW_Init>
 80005da:	e7e6      	b.n	80005aa <OW_Service+0xa>
		if (huart1.gState != HAL_UART_STATE_READY)
 80005dc:	4ba3      	ldr	r3, [pc, #652]	; (800086c <OW_Service+0x2cc>)
 80005de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80005e0:	2b20      	cmp	r3, #32
 80005e2:	d00c      	beq.n	80005fe <OW_Service+0x5e>
			if ((HAL_GetTick() - ow_txtmr) >= ow_txtout) COM_State = RX_ERROR;
 80005e4:	f000 feda 	bl	800139c <HAL_GetTick>
 80005e8:	4ba1      	ldr	r3, [pc, #644]	; (8000870 <OW_Service+0x2d0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	1ac0      	subs	r0, r0, r3
 80005ee:	4ba1      	ldr	r3, [pc, #644]	; (8000874 <OW_Service+0x2d4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d3e5      	bcc.n	80005c2 <OW_Service+0x22>
 80005f6:	4b9a      	ldr	r3, [pc, #616]	; (8000860 <OW_Service+0x2c0>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e7e1      	b.n	80005c2 <OW_Service+0x22>
		else OW_Init();
 80005fe:	f7ff ff9f 	bl	8000540 <OW_Init>
 8000602:	e7de      	b.n	80005c2 <OW_Service+0x22>
		HAL_Delay(2);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fecf 	bl	80013a8 <HAL_Delay>
		ZEROFILL(ow_txbuf, COUNTOF(ow_txbuf));
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	4c9a      	ldr	r4, [pc, #616]	; (8000878 <OW_Service+0x2d8>)
 800060e:	0052      	lsls	r2, r2, #1
 8000610:	2100      	movs	r1, #0
 8000612:	0020      	movs	r0, r4
 8000614:	f7ff fe39 	bl	800028a <mem_set>
		ow_txbuf[3] = 2;  // set two byte response data size
 8000618:	2302      	movs	r3, #2
 800061a:	70e3      	strb	r3, [r4, #3]
		ow_txbuf[4] = NAK;  // set default response to Negativ Acknowledge
 800061c:	3313      	adds	r3, #19
 800061e:	7123      	strb	r3, [r4, #4]
		ow_txbuf[5] = ow_rxbuf[4];  // echo command as default
 8000620:	4b96      	ldr	r3, [pc, #600]	; (800087c <OW_Service+0x2dc>)
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	7163      	strb	r3, [r4, #5]
		switch (ow_rxbuf[4])
 8000626:	3360      	adds	r3, #96	; 0x60
 8000628:	b2da      	uxtb	r2, r3
 800062a:	2a3e      	cmp	r2, #62	; 0x3e
 800062c:	d85b      	bhi.n	80006e6 <OW_Service+0x146>
 800062e:	0093      	lsls	r3, r2, #2
 8000630:	4a93      	ldr	r2, [pc, #588]	; (8000880 <OW_Service+0x2e0>)
 8000632:	58d3      	ldr	r3, [r2, r3]
 8000634:	469f      	mov	pc, r3
				ow_txbuf[3] = 4;
 8000636:	4b90      	ldr	r3, [pc, #576]	; (8000878 <OW_Service+0x2d8>)
 8000638:	2204      	movs	r2, #4
 800063a:	70da      	strb	r2, [r3, #3]
				ow_txbuf[4] = '0';
 800063c:	322c      	adds	r2, #44	; 0x2c
 800063e:	711a      	strb	r2, [r3, #4]
				ow_txbuf[5] = '0';
 8000640:	715a      	strb	r2, [r3, #5]
				ow_txbuf[6] = '0';
 8000642:	719a      	strb	r2, [r3, #6]
				ow_txbuf[7] = '0';
 8000644:	71da      	strb	r2, [r3, #7]
				if (IsCardReady()) ow_txbuf[4] = '1';
 8000646:	4b8f      	ldr	r3, [pc, #572]	; (8000884 <OW_Service+0x2e4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	07da      	lsls	r2, r3, #31
 800064c:	d502      	bpl.n	8000654 <OW_Service+0xb4>
 800064e:	4a8a      	ldr	r2, [pc, #552]	; (8000878 <OW_Service+0x2d8>)
 8000650:	2131      	movs	r1, #49	; 0x31
 8000652:	7111      	strb	r1, [r2, #4]
				if (IsCardInStacker()) ow_txbuf[5] = '1';
 8000654:	079a      	lsls	r2, r3, #30
 8000656:	d502      	bpl.n	800065e <OW_Service+0xbe>
 8000658:	4a87      	ldr	r2, [pc, #540]	; (8000878 <OW_Service+0x2d8>)
 800065a:	2131      	movs	r1, #49	; 0x31
 800065c:	7151      	strb	r1, [r2, #5]
				if (IsRtcValidActiv()) ow_txbuf[6] = '1';
 800065e:	075b      	lsls	r3, r3, #29
 8000660:	d541      	bpl.n	80006e6 <OW_Service+0x146>
 8000662:	4b85      	ldr	r3, [pc, #532]	; (8000878 <OW_Service+0x2d8>)
 8000664:	2231      	movs	r2, #49	; 0x31
 8000666:	719a      	strb	r2, [r3, #6]
 8000668:	e03d      	b.n	80006e6 <OW_Service+0x146>
				ow_txbuf[3] = 44;
 800066a:	4c83      	ldr	r4, [pc, #524]	; (8000878 <OW_Service+0x2d8>)
 800066c:	252c      	movs	r5, #44	; 0x2c
 800066e:	70e5      	strb	r5, [r4, #3]
				ow_txbuf[4] = ACK;
 8000670:	2306      	movs	r3, #6
 8000672:	7123      	strb	r3, [r4, #4]
				mem_cpy(&ow_txbuf[6], sys_id, 2);
 8000674:	1da0      	adds	r0, r4, #6
 8000676:	2202      	movs	r2, #2
 8000678:	4983      	ldr	r1, [pc, #524]	; (8000888 <OW_Service+0x2e8>)
 800067a:	f7ff fdfc 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[8], mifare_keya, 6);
 800067e:	0020      	movs	r0, r4
 8000680:	3008      	adds	r0, #8
 8000682:	2206      	movs	r2, #6
 8000684:	4981      	ldr	r1, [pc, #516]	; (800088c <OW_Service+0x2ec>)
 8000686:	f7ff fdf6 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[14], mifare_keyb, 6);
 800068a:	0020      	movs	r0, r4
 800068c:	300e      	adds	r0, #14
 800068e:	2206      	movs	r2, #6
 8000690:	497f      	ldr	r1, [pc, #508]	; (8000890 <OW_Service+0x2f0>)
 8000692:	f7ff fdf0 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[20], user_group, 16);
 8000696:	0020      	movs	r0, r4
 8000698:	3014      	adds	r0, #20
 800069a:	2210      	movs	r2, #16
 800069c:	497d      	ldr	r1, [pc, #500]	; (8000894 <OW_Service+0x2f4>)
 800069e:	f7ff fdea 	bl	8000276 <mem_cpy>
				ow_txbuf[36] = 'C';
 80006a2:	2324      	movs	r3, #36	; 0x24
 80006a4:	2243      	movs	r2, #67	; 0x43
 80006a6:	54e2      	strb	r2, [r4, r3]
				ow_txbuf[37] = 'S';
 80006a8:	3301      	adds	r3, #1
 80006aa:	3210      	adds	r2, #16
 80006ac:	54e2      	strb	r2, [r4, r3]
				ow_txbuf[44] = version >> 16;
 80006ae:	4b7a      	ldr	r3, [pc, #488]	; (8000898 <OW_Service+0x2f8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	0c1a      	lsrs	r2, r3, #16
 80006b4:	5562      	strb	r2, [r4, r5]
				ow_txbuf[45] = version >> 8;
 80006b6:	0a1a      	lsrs	r2, r3, #8
 80006b8:	272d      	movs	r7, #45	; 0x2d
 80006ba:	55e2      	strb	r2, [r4, r7]
				ow_txbuf[46] = version;
 80006bc:	262e      	movs	r6, #46	; 0x2e
 80006be:	55a3      	strb	r3, [r4, r6]
				Hex2Str((char*) &ow_txbuf[38], &ow_txbuf[44], 6);
 80006c0:	0021      	movs	r1, r4
 80006c2:	312c      	adds	r1, #44	; 0x2c
 80006c4:	0020      	movs	r0, r4
 80006c6:	3026      	adds	r0, #38	; 0x26
 80006c8:	2206      	movs	r2, #6
 80006ca:	f7ff fda9 	bl	8000220 <Hex2Str>
				ow_txbuf[44] = '1';
 80006ce:	2331      	movs	r3, #49	; 0x31
 80006d0:	5563      	strb	r3, [r4, r5]
				ow_txbuf[45] = '2';
 80006d2:	3301      	adds	r3, #1
 80006d4:	55e3      	strb	r3, [r4, r7]
				ow_txbuf[46] = '3';
 80006d6:	3301      	adds	r3, #1
 80006d8:	55a3      	strb	r3, [r4, r6]
				ow_txbuf[47] = '4';
 80006da:	3b04      	subs	r3, #4
 80006dc:	2234      	movs	r2, #52	; 0x34
 80006de:	54e2      	strb	r2, [r4, r3]
				ow_txbuf[48] = '\0';
 80006e0:	3301      	adds	r3, #1
 80006e2:	2200      	movs	r2, #0
 80006e4:	54e2      	strb	r2, [r4, r3]
		if (COM_Link == P2P)
 80006e6:	4b6d      	ldr	r3, [pc, #436]	; (800089c <OW_Service+0x2fc>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d100      	bne.n	80006f0 <OW_Service+0x150>
 80006ee:	e097      	b.n	8000820 <OW_Service+0x280>
		COM_State = RX_LOCK;
 80006f0:	4b5b      	ldr	r3, [pc, #364]	; (8000860 <OW_Service+0x2c0>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
		ow_txtout = OW_PKTIME;
 80006f6:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <OW_Service+0x2d4>)
 80006f8:	32c8      	adds	r2, #200	; 0xc8
 80006fa:	32ff      	adds	r2, #255	; 0xff
 80006fc:	601a      	str	r2, [r3, #0]
		ow_txtmr = HAL_GetTick();
 80006fe:	f000 fe4d 	bl	800139c <HAL_GetTick>
 8000702:	4b5b      	ldr	r3, [pc, #364]	; (8000870 <OW_Service+0x2d0>)
 8000704:	6018      	str	r0, [r3, #0]
		if (ow_rxbuf[4] == RESTART_CTRL) NVIC_SystemReset();
 8000706:	4b5d      	ldr	r3, [pc, #372]	; (800087c <OW_Service+0x2dc>)
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	2bc0      	cmp	r3, #192	; 0xc0
 800070c:	d000      	beq.n	8000710 <OW_Service+0x170>
 800070e:	e758      	b.n	80005c2 <OW_Service+0x22>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000710:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	4b62      	ldr	r3, [pc, #392]	; (80008a0 <OW_Service+0x300>)
 8000716:	4a63      	ldr	r2, [pc, #396]	; (80008a4 <OW_Service+0x304>)
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	e7fd      	b.n	800071e <OW_Service+0x17e>
				mem_cpy(sys_id, &ow_rxbuf[5], 2);
 8000722:	4c61      	ldr	r4, [pc, #388]	; (80008a8 <OW_Service+0x308>)
 8000724:	2202      	movs	r2, #2
 8000726:	0021      	movs	r1, r4
 8000728:	4857      	ldr	r0, [pc, #348]	; (8000888 <OW_Service+0x2e8>)
 800072a:	f7ff fda4 	bl	8000276 <mem_cpy>
				mem_cpy(mifare_keya, &ow_rxbuf[7], 6);
 800072e:	1ca1      	adds	r1, r4, #2
 8000730:	2206      	movs	r2, #6
 8000732:	4856      	ldr	r0, [pc, #344]	; (800088c <OW_Service+0x2ec>)
 8000734:	f7ff fd9f 	bl	8000276 <mem_cpy>
				mem_cpy(mifare_keyb, &ow_rxbuf[13], 6);
 8000738:	0021      	movs	r1, r4
 800073a:	3108      	adds	r1, #8
 800073c:	2206      	movs	r2, #6
 800073e:	4854      	ldr	r0, [pc, #336]	; (8000890 <OW_Service+0x2f0>)
 8000740:	f7ff fd99 	bl	8000276 <mem_cpy>
				mem_cpy(user_group, &ow_rxbuf[19], 16);
 8000744:	0021      	movs	r1, r4
 8000746:	310e      	adds	r1, #14
 8000748:	2210      	movs	r2, #16
 800074a:	4852      	ldr	r0, [pc, #328]	; (8000894 <OW_Service+0x2f4>)
 800074c:	f7ff fd93 	bl	8000276 <mem_cpy>
				ow_txbuf[4] = ACK;
 8000750:	4b49      	ldr	r3, [pc, #292]	; (8000878 <OW_Service+0x2d8>)
 8000752:	2206      	movs	r2, #6
 8000754:	711a      	strb	r2, [r3, #4]
				break;
 8000756:	e7c6      	b.n	80006e6 <OW_Service+0x146>
				sDate.WeekDay = ow_rxbuf[5];
 8000758:	4b48      	ldr	r3, [pc, #288]	; (800087c <OW_Service+0x2dc>)
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	4a53      	ldr	r2, [pc, #332]	; (80008ac <OW_Service+0x30c>)
 800075e:	7013      	strb	r3, [r2, #0]
				if (sDate.WeekDay == 0) sDate.WeekDay = 7;
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <OW_Service+0x1ca>
 8000764:	0013      	movs	r3, r2
 8000766:	2207      	movs	r2, #7
 8000768:	701a      	strb	r2, [r3, #0]
				sDate.Date = ow_rxbuf[6];
 800076a:	4b44      	ldr	r3, [pc, #272]	; (800087c <OW_Service+0x2dc>)
 800076c:	799a      	ldrb	r2, [r3, #6]
 800076e:	4c4f      	ldr	r4, [pc, #316]	; (80008ac <OW_Service+0x30c>)
 8000770:	70a2      	strb	r2, [r4, #2]
				sDate.Month = ow_rxbuf[7];
 8000772:	79da      	ldrb	r2, [r3, #7]
 8000774:	7062      	strb	r2, [r4, #1]
				sDate.Year = ow_rxbuf[8];
 8000776:	7a1a      	ldrb	r2, [r3, #8]
 8000778:	70e2      	strb	r2, [r4, #3]
				sTime.Hours = ow_rxbuf[9];
 800077a:	7a5a      	ldrb	r2, [r3, #9]
 800077c:	494c      	ldr	r1, [pc, #304]	; (80008b0 <OW_Service+0x310>)
 800077e:	700a      	strb	r2, [r1, #0]
				sTime.Minutes = ow_rxbuf[10];
 8000780:	7a9a      	ldrb	r2, [r3, #10]
 8000782:	704a      	strb	r2, [r1, #1]
				sTime.Seconds = ow_rxbuf[11];
 8000784:	7adb      	ldrb	r3, [r3, #11]
 8000786:	708b      	strb	r3, [r1, #2]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000788:	4d4a      	ldr	r5, [pc, #296]	; (80008b4 <OW_Service+0x314>)
 800078a:	2201      	movs	r2, #1
 800078c:	0028      	movs	r0, r5
 800078e:	f001 fc9b 	bl	80020c8 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000792:	2201      	movs	r2, #1
 8000794:	0021      	movs	r1, r4
 8000796:	0028      	movs	r0, r5
 8000798:	f001 fd14 	bl	80021c4 <HAL_RTC_SetDate>
				RtcValidSet();
 800079c:	4a39      	ldr	r2, [pc, #228]	; (8000884 <OW_Service+0x2e4>)
 800079e:	2304      	movs	r3, #4
 80007a0:	6811      	ldr	r1, [r2, #0]
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6013      	str	r3, [r2, #0]
				ow_txbuf[4] = ACK;
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <OW_Service+0x2d8>)
 80007a8:	2206      	movs	r2, #6
 80007aa:	711a      	strb	r2, [r3, #4]
				break;
 80007ac:	e79b      	b.n	80006e6 <OW_Service+0x146>
				if (RC522_ReadBlock(ow_rxbuf[5], &ow_rxbuf[6]) == 0) ow_txbuf[4] = ACK;
 80007ae:	4942      	ldr	r1, [pc, #264]	; (80008b8 <OW_Service+0x318>)
 80007b0:	1f8b      	subs	r3, r1, #6
 80007b2:	7958      	ldrb	r0, [r3, #5]
 80007b4:	f000 fc5a 	bl	800106c <RC522_ReadBlock>
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d194      	bne.n	80006e6 <OW_Service+0x146>
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <OW_Service+0x2d8>)
 80007be:	2206      	movs	r2, #6
 80007c0:	711a      	strb	r2, [r3, #4]
 80007c2:	e790      	b.n	80006e6 <OW_Service+0x146>
				if (RC522_WriteBlock(ow_rxbuf[5], &ow_rxbuf[6]) == 0) ow_txbuf[4] = ACK;
 80007c4:	493c      	ldr	r1, [pc, #240]	; (80008b8 <OW_Service+0x318>)
 80007c6:	1f8b      	subs	r3, r1, #6
 80007c8:	7958      	ldrb	r0, [r3, #5]
 80007ca:	f000 fc77 	bl	80010bc <RC522_WriteBlock>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d189      	bne.n	80006e6 <OW_Service+0x146>
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <OW_Service+0x2d8>)
 80007d4:	2206      	movs	r2, #6
 80007d6:	711a      	strb	r2, [r3, #4]
 80007d8:	e785      	b.n	80006e6 <OW_Service+0x146>
				CardReadyReset();
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <OW_Service+0x2e4>)
 80007dc:	2301      	movs	r3, #1
 80007de:	6811      	ldr	r1, [r2, #0]
 80007e0:	4399      	bics	r1, r3
 80007e2:	6011      	str	r1, [r2, #0]
				ow_txbuf[3] = 17;
 80007e4:	4c24      	ldr	r4, [pc, #144]	; (8000878 <OW_Service+0x2d8>)
 80007e6:	2311      	movs	r3, #17
 80007e8:	70e3      	strb	r3, [r4, #3]
				ow_txbuf[4] = sCard.card_status;
 80007ea:	4d34      	ldr	r5, [pc, #208]	; (80008bc <OW_Service+0x31c>)
 80007ec:	782b      	ldrb	r3, [r5, #0]
 80007ee:	7123      	strb	r3, [r4, #4]
				ow_txbuf[5] = sCard.user_group;
 80007f0:	786b      	ldrb	r3, [r5, #1]
 80007f2:	7163      	strb	r3, [r4, #5]
				ow_txbuf[6] = sCard.system_id >> 8;
 80007f4:	886b      	ldrh	r3, [r5, #2]
 80007f6:	0a1a      	lsrs	r2, r3, #8
 80007f8:	71a2      	strb	r2, [r4, #6]
				ow_txbuf[7] = sCard.system_id & 0xFF;
 80007fa:	71e3      	strb	r3, [r4, #7]
				ow_txbuf[8] = sCard.controller_id >> 8;
 80007fc:	88ab      	ldrh	r3, [r5, #4]
 80007fe:	0a1a      	lsrs	r2, r3, #8
 8000800:	7222      	strb	r2, [r4, #8]
				ow_txbuf[9] = sCard.controller_id & 0xFF;
 8000802:	7263      	strb	r3, [r4, #9]
				mem_cpy(&ow_txbuf[10], &sCard.expiry_time, 6);
 8000804:	1da9      	adds	r1, r5, #6
 8000806:	0020      	movs	r0, r4
 8000808:	300a      	adds	r0, #10
 800080a:	2206      	movs	r2, #6
 800080c:	f7ff fd33 	bl	8000276 <mem_cpy>
				mem_cpy(&ow_txbuf[16], &sCard.card_id, 5);
 8000810:	0029      	movs	r1, r5
 8000812:	310c      	adds	r1, #12
 8000814:	0020      	movs	r0, r4
 8000816:	3010      	adds	r0, #16
 8000818:	2205      	movs	r2, #5
 800081a:	f7ff fd2c 	bl	8000276 <mem_cpy>
				break;
 800081e:	e762      	b.n	80006e6 <OW_Service+0x146>
			CRC_ResetDR();
 8000820:	f000 fe4c 	bl	80014bc <CRC_ResetDR>
			ow_txbuf[0] = STX;
 8000824:	4c14      	ldr	r4, [pc, #80]	; (8000878 <OW_Service+0x2d8>)
 8000826:	2302      	movs	r3, #2
 8000828:	7023      	strb	r3, [r4, #0]
			ow_txbuf[1] = ow_rxbuf[2];
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <OW_Service+0x2dc>)
 800082c:	789a      	ldrb	r2, [r3, #2]
 800082e:	7062      	strb	r2, [r4, #1]
			ow_txbuf[2] = ow_rxbuf[1];
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	70a3      	strb	r3, [r4, #2]
			ow_txbuf[ow_txbuf[3] + 4] = (uint8_t) CRC_Calculate8(ow_txbuf, ow_txbuf[3] + 4);
 8000834:	78e1      	ldrb	r1, [r4, #3]
 8000836:	3104      	adds	r1, #4
 8000838:	0020      	movs	r0, r4
 800083a:	f000 fe31 	bl	80014a0 <CRC_Calculate8>
 800083e:	78e3      	ldrb	r3, [r4, #3]
 8000840:	3304      	adds	r3, #4
 8000842:	54e0      	strb	r0, [r4, r3]
			HAL_UART_Transmit_IT(&huart1, ow_txbuf, ow_txbuf[3] + 5);
 8000844:	78e2      	ldrb	r2, [r4, #3]
 8000846:	3205      	adds	r2, #5
 8000848:	0021      	movs	r1, r4
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <OW_Service+0x2cc>)
 800084c:	f002 f92c 	bl	8002aa8 <HAL_UART_Transmit_IT>
 8000850:	e74e      	b.n	80006f0 <OW_Service+0x150>
		OW_Init();
 8000852:	f7ff fe75 	bl	8000540 <OW_Init>
 8000856:	e6b4      	b.n	80005c2 <OW_Service+0x22>
		OW_Init();
 8000858:	f7ff fe72 	bl	8000540 <OW_Init>
}
 800085c:	e6b1      	b.n	80005c2 <OW_Service+0x22>
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000003d 	.word	0x2000003d
 8000864:	200003b4 	.word	0x200003b4
 8000868:	200003a8 	.word	0x200003a8
 800086c:	20000290 	.word	0x20000290
 8000870:	20000398 	.word	0x20000398
 8000874:	2000039c 	.word	0x2000039c
 8000878:	20000158 	.word	0x20000158
 800087c:	20000058 	.word	0x20000058
 8000880:	08003408 	.word	0x08003408
 8000884:	200003b0 	.word	0x200003b0
 8000888:	20000260 	.word	0x20000260
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000264 	.word	0x20000264
 8000898:	08003534 	.word	0x08003534
 800089c:	2000003c 	.word	0x2000003c
 80008a0:	e000ed00 	.word	0xe000ed00
 80008a4:	05fa0004 	.word	0x05fa0004
 80008a8:	2000005d 	.word	0x2000005d
 80008ac:	20000040 	.word	0x20000040
 80008b0:	20000044 	.word	0x20000044
 80008b4:	20000310 	.word	0x20000310
 80008b8:	2000005e 	.word	0x2000005e
 80008bc:	20000410 	.word	0x20000410

080008c0 <HAL_UART_RxCpltCallback>:
{
 80008c0:	b570      	push	{r4, r5, r6, lr}
	switch (COM_State)
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3b04      	subs	r3, #4
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	2a05      	cmp	r2, #5
 80008cc:	d839      	bhi.n	8000942 <HAL_UART_RxCpltCallback+0x82>
 80008ce:	0093      	lsls	r3, r2, #2
 80008d0:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <HAL_UART_RxCpltCallback+0x108>)
 80008d2:	58d3      	ldr	r3, [r2, r3]
 80008d4:	469f      	mov	pc, r3
			OW_SetUsart(BR_9600, WL_8BIT);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2002      	movs	r0, #2
 80008da:	f7ff fde3 	bl	80004a4 <OW_SetUsart>
			if (ow_rxbuf[ow_bcnt] == STX) COM_State = RX_RECADDR;
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <HAL_UART_RxCpltCallback+0x10c>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	4a3b      	ldr	r2, [pc, #236]	; (80009d0 <HAL_UART_RxCpltCallback+0x110>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d003      	beq.n	80008f2 <HAL_UART_RxCpltCallback+0x32>
			else COM_State = RX_INIT;
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e027      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			if (ow_rxbuf[ow_bcnt] == STX) COM_State = RX_RECADDR;
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 80008f4:	2205      	movs	r2, #5
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e023      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			if (ow_rxbuf[ow_bcnt] == DEF_CS_OWIFA) COM_Link = P2P;
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <HAL_UART_RxCpltCallback+0x10c>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <HAL_UART_RxCpltCallback+0x110>)
 8000900:	5cd3      	ldrb	r3, [r2, r3]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d007      	beq.n	8000916 <HAL_UART_RxCpltCallback+0x56>
			else if (ow_rxbuf[ow_bcnt] == DEF_CS_OWGRA) COM_Link = GROUP;
 8000906:	2b20      	cmp	r3, #32
 8000908:	d010      	beq.n	800092c <HAL_UART_RxCpltCallback+0x6c>
			else if (ow_rxbuf[ow_bcnt] == DEF_OWBRA) COM_Link = BROADCAST;
 800090a:	2b7f      	cmp	r3, #127	; 0x7f
 800090c:	d106      	bne.n	800091c <HAL_UART_RxCpltCallback+0x5c>
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <HAL_UART_RxCpltCallback+0x114>)
 8000910:	2203      	movs	r2, #3
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e002      	b.n	800091c <HAL_UART_RxCpltCallback+0x5c>
			if (ow_rxbuf[ow_bcnt] == DEF_CS_OWIFA) COM_Link = P2P;
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <HAL_UART_RxCpltCallback+0x114>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
			if (COM_Link == NOLINK) COM_State = RX_INIT;
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <HAL_UART_RxCpltCallback+0x114>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d107      	bne.n	8000934 <HAL_UART_RxCpltCallback+0x74>
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e00a      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			else if (ow_rxbuf[ow_bcnt] == DEF_CS_OWGRA) COM_Link = GROUP;
 800092c:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <HAL_UART_RxCpltCallback+0x114>)
 800092e:	2202      	movs	r2, #2
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e7f3      	b.n	800091c <HAL_UART_RxCpltCallback+0x5c>
			else COM_State = RX_SNDADDR;
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 8000936:	2206      	movs	r2, #6
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e002      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			COM_State = RX_SIZE;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 800093e:	2207      	movs	r2, #7
 8000940:	701a      	strb	r2, [r3, #0]
	if (COM_State <= RX_READY) return;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d828      	bhi.n	800099c <HAL_UART_RxCpltCallback+0xdc>
}
 800094a:	bd70      	pop	{r4, r5, r6, pc}
			COM_State = RX_PAYLOAD;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 800094e:	2208      	movs	r2, #8
 8000950:	701a      	strb	r2, [r3, #0]
			break;
 8000952:	e7f6      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			if (ow_rxbuf[3] == (ow_bcnt - 3)) COM_State = RX_CRC8;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <HAL_UART_RxCpltCallback+0x110>)
 8000956:	78da      	ldrb	r2, [r3, #3]
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_RxCpltCallback+0x10c>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	3b03      	subs	r3, #3
 800095e:	429a      	cmp	r2, r3
 8000960:	d1ef      	bne.n	8000942 <HAL_UART_RxCpltCallback+0x82>
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 8000964:	2209      	movs	r2, #9
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e7eb      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			__HAL_CRC_DR_RESET(&hcrc);
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_UART_RxCpltCallback+0x118>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	6893      	ldr	r3, [r2, #8]
 8000970:	2101      	movs	r1, #1
 8000972:	430b      	orrs	r3, r1
 8000974:	6093      	str	r3, [r2, #8]
			crc8 = CRC_Calculate8(ow_rxbuf, ow_bcnt);
 8000976:	4d15      	ldr	r5, [pc, #84]	; (80009cc <HAL_UART_RxCpltCallback+0x10c>)
 8000978:	8829      	ldrh	r1, [r5, #0]
 800097a:	4c15      	ldr	r4, [pc, #84]	; (80009d0 <HAL_UART_RxCpltCallback+0x110>)
 800097c:	0020      	movs	r0, r4
 800097e:	f000 fd8f 	bl	80014a0 <CRC_Calculate8>
 8000982:	b2c0      	uxtb	r0, r0
			if (crc8 == ow_rxbuf[ow_bcnt]) COM_State = RX_READY;
 8000984:	882b      	ldrh	r3, [r5, #0]
 8000986:	5ce3      	ldrb	r3, [r4, r3]
 8000988:	4283      	cmp	r3, r0
 800098a:	d003      	beq.n	8000994 <HAL_UART_RxCpltCallback+0xd4>
			else COM_State = RX_INIT;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	e7d6      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
			if (crc8 == ow_rxbuf[ow_bcnt]) COM_State = RX_READY;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_UART_RxCpltCallback+0x104>)
 8000996:	2203      	movs	r2, #3
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e7d2      	b.n	8000942 <HAL_UART_RxCpltCallback+0x82>
	++ow_bcnt;
 800099c:	4c0b      	ldr	r4, [pc, #44]	; (80009cc <HAL_UART_RxCpltCallback+0x10c>)
 800099e:	8823      	ldrh	r3, [r4, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	8023      	strh	r3, [r4, #0]
	ow_rxtout = RX_TOUT;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_UART_RxCpltCallback+0x11c>)
 80009a6:	2203      	movs	r2, #3
 80009a8:	601a      	str	r2, [r3, #0]
	ow_rxtmr = HAL_GetTick();
 80009aa:	f000 fcf7 	bl	800139c <HAL_GetTick>
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_UART_RxCpltCallback+0x120>)
 80009b0:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &ow_rxbuf[ow_bcnt], 1);
 80009b2:	8821      	ldrh	r1, [r4, #0]
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_UART_RxCpltCallback+0x110>)
 80009b6:	18c9      	adds	r1, r1, r3
 80009b8:	2201      	movs	r2, #1
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <HAL_UART_RxCpltCallback+0x124>)
 80009bc:	f002 f8bc 	bl	8002b38 <HAL_UART_Receive_IT>
 80009c0:	e7c3      	b.n	800094a <HAL_UART_RxCpltCallback+0x8a>
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	2000003d 	.word	0x2000003d
 80009c8:	08003504 	.word	0x08003504
 80009cc:	200003ac 	.word	0x200003ac
 80009d0:	20000058 	.word	0x20000058
 80009d4:	2000003c 	.word	0x2000003c
 80009d8:	20000274 	.word	0x20000274
 80009dc:	200003a8 	.word	0x200003a8
 80009e0:	200003b4 	.word	0x200003b4
 80009e4:	20000290 	.word	0x20000290

080009e8 <HAL_UART_ErrorCallback>:
{
 80009e8:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_PEFLAG(huart);
 80009ea:	6803      	ldr	r3, [r0, #0]
 80009ec:	2201      	movs	r2, #1
 80009ee:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FEFLAG(huart);
 80009f0:	6803      	ldr	r3, [r0, #0]
 80009f2:	3201      	adds	r2, #1
 80009f4:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 80009f6:	6803      	ldr	r3, [r0, #0]
 80009f8:	2104      	movs	r1, #4
 80009fa:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_IDLEFLAG(huart);
 80009fc:	6803      	ldr	r3, [r0, #0]
 80009fe:	310c      	adds	r1, #12
 8000a00:	6219      	str	r1, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8000a02:	6803      	ldr	r3, [r0, #0]
 8000a04:	2408      	movs	r4, #8
 8000a06:	621c      	str	r4, [r3, #32]
		SET_BIT(huart->Instance->RQR, UART_RXDATA_FLUSH_REQUEST);
 8000a08:	6801      	ldr	r1, [r0, #0]
 8000a0a:	698b      	ldr	r3, [r1, #24]
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	618b      	str	r3, [r1, #24]
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	67c3      	str	r3, [r0, #124]	; 0x7c
	COM_State = RX_ERROR;
 8000a14:	4b01      	ldr	r3, [pc, #4]	; (8000a1c <HAL_UART_ErrorCallback+0x34>)
 8000a16:	701a      	strb	r2, [r3, #0]
}
 8000a18:	bd10      	pop	{r4, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	2000003d 	.word	0x2000003d

08000a20 <RC522_WriteRegister>:
 * @brief
 * @param
 * @retval
 */
static void RC522_WriteRegister(uint8_t addr, uint8_t val)
{
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	0005      	movs	r5, r0
 8000a26:	000e      	movs	r6, r1
	uint8_t tx[2];
	
	mRC522_ChipSelect();
 8000a28:	2490      	movs	r4, #144	; 0x90
 8000a2a:	05e4      	lsls	r4, r4, #23
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	0020      	movs	r0, r4
 8000a32:	f000 fed9 	bl	80017e8 <HAL_GPIO_WritePin>
	tx[0] = (addr << 1) & 0x7E;
 8000a36:	006d      	lsls	r5, r5, #1
 8000a38:	207e      	movs	r0, #126	; 0x7e
 8000a3a:	4028      	ands	r0, r5
 8000a3c:	a901      	add	r1, sp, #4
 8000a3e:	7008      	strb	r0, [r1, #0]
	tx[1] = val;
 8000a40:	704e      	strb	r6, [r1, #1]
	HAL_SPI_Transmit(&hspi1, tx, 2, 10);
 8000a42:	230a      	movs	r3, #10
 8000a44:	2202      	movs	r2, #2
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <RC522_WriteRegister+0x3c>)
 8000a48:	f001 fd64 	bl	8002514 <HAL_SPI_Transmit>
	mRC522_ChipRelease();
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2110      	movs	r1, #16
 8000a50:	0020      	movs	r0, r4
 8000a52:	f000 fec9 	bl	80017e8 <HAL_GPIO_WritePin>
}
 8000a56:	b002      	add	sp, #8
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000330 	.word	0x20000330

08000a60 <RC522_ReadRegister>:
{
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	0007      	movs	r7, r0
	uint8_t tx[2] =
 8000a66:	ad03      	add	r5, sp, #12
 8000a68:	2300      	movs	r3, #0
 8000a6a:	702b      	strb	r3, [r5, #0]
 8000a6c:	706b      	strb	r3, [r5, #1]
	uint8_t rx[2] =
 8000a6e:	ac02      	add	r4, sp, #8
 8000a70:	7023      	strb	r3, [r4, #0]
 8000a72:	7063      	strb	r3, [r4, #1]
	mRC522_ChipSelect();
 8000a74:	2690      	movs	r6, #144	; 0x90
 8000a76:	05f6      	lsls	r6, r6, #23
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	0030      	movs	r0, r6
 8000a7e:	f000 feb3 	bl	80017e8 <HAL_GPIO_WritePin>
	tx[0] = ((addr << 1) & 0x7E) | 0x80;
 8000a82:	007f      	lsls	r7, r7, #1
 8000a84:	237e      	movs	r3, #126	; 0x7e
 8000a86:	403b      	ands	r3, r7
 8000a88:	2080      	movs	r0, #128	; 0x80
 8000a8a:	4240      	negs	r0, r0
 8000a8c:	4318      	orrs	r0, r3
 8000a8e:	7028      	strb	r0, [r5, #0]
	HAL_SPI_TransmitReceive(&hspi1, tx, rx, 2, 10);
 8000a90:	230a      	movs	r3, #10
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	3b08      	subs	r3, #8
 8000a96:	0022      	movs	r2, r4
 8000a98:	0029      	movs	r1, r5
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <RC522_ReadRegister+0x50>)
 8000a9c:	f001 fe2a 	bl	80026f4 <HAL_SPI_TransmitReceive>
	mRC522_ChipRelease();
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	0030      	movs	r0, r6
 8000aa6:	f000 fe9f 	bl	80017e8 <HAL_GPIO_WritePin>
	return (rx[1]);
 8000aaa:	7860      	ldrb	r0, [r4, #1]
}
 8000aac:	b005      	add	sp, #20
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab0:	20000330 	.word	0x20000330

08000ab4 <RC522_SetBitMask>:
 * @brief
 * @param
 * @retval
 */
static void RC522_SetBitMask(uint8_t reg, uint8_t mask)
{
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	0004      	movs	r4, r0
 8000ab8:	000d      	movs	r5, r1
	RC522_WriteRegister(reg, RC522_ReadRegister(reg) | mask);
 8000aba:	f7ff ffd1 	bl	8000a60 <RC522_ReadRegister>
 8000abe:	4328      	orrs	r0, r5
 8000ac0:	b2c1      	uxtb	r1, r0
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	f7ff ffac 	bl	8000a20 <RC522_WriteRegister>
}
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}

08000aca <RC522_AntennaOn>:
 * @brief
 * @param
 * @retval
 */
static void RC522_AntennaOn(void)
{
 8000aca:	b510      	push	{r4, lr}
	uint8_t temp;

	temp = RC522_ReadRegister(RC522_REG_TX_CONTROL);
 8000acc:	2014      	movs	r0, #20
 8000ace:	f7ff ffc7 	bl	8000a60 <RC522_ReadRegister>
	if ((temp & 0x03U) == 0U) RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
 8000ad2:	0783      	lsls	r3, r0, #30
 8000ad4:	d000      	beq.n	8000ad8 <RC522_AntennaOn+0xe>
}
 8000ad6:	bd10      	pop	{r4, pc}
	if ((temp & 0x03U) == 0U) RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03U);
 8000ad8:	2103      	movs	r1, #3
 8000ada:	2014      	movs	r0, #20
 8000adc:	f7ff ffea 	bl	8000ab4 <RC522_SetBitMask>
}
 8000ae0:	e7f9      	b.n	8000ad6 <RC522_AntennaOn+0xc>

08000ae2 <RC522_ClearBitMask>:
{
 8000ae2:	b570      	push	{r4, r5, r6, lr}
 8000ae4:	0004      	movs	r4, r0
 8000ae6:	000d      	movs	r5, r1
	RC522_WriteRegister(reg, RC522_ReadRegister(reg) & (~mask));
 8000ae8:	f7ff ffba 	bl	8000a60 <RC522_ReadRegister>
 8000aec:	b241      	sxtb	r1, r0
 8000aee:	43a9      	bics	r1, r5
 8000af0:	b2c9      	uxtb	r1, r1
 8000af2:	0020      	movs	r0, r4
 8000af4:	f7ff ff94 	bl	8000a20 <RC522_WriteRegister>
}
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000afc <RC522_ToCard>:
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData,
        uint16_t *backLen)
{
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	46ce      	mov	lr, r9
 8000b00:	4647      	mov	r7, r8
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b083      	sub	sp, #12
 8000b06:	4680      	mov	r8, r0
 8000b08:	000d      	movs	r5, r1
 8000b0a:	0016      	movs	r6, r2
 8000b0c:	9301      	str	r3, [sp, #4]
	uint8_t irqEn = 0U;
	uint8_t waitIRq = 0U;
	uint32_t n, i, lastBits;
	RC522_StatusTypeDef status = MI_ERR;

	switch (command)
 8000b0e:	280c      	cmp	r0, #12
 8000b10:	d021      	beq.n	8000b56 <RC522_ToCard+0x5a>
 8000b12:	280e      	cmp	r0, #14
 8000b14:	d023      	beq.n	8000b5e <RC522_ToCard+0x62>
	uint8_t waitIRq = 0U;
 8000b16:	2700      	movs	r7, #0
	uint8_t irqEn = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	4699      	mov	r9, r3
			waitIRq = 0x30U;
			break;
		default:
			break;
	}
	RC522_WriteRegister(RC522_REG_COMM_IE_N, irqEn | 0x80U);
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	4249      	negs	r1, r1
 8000b20:	464b      	mov	r3, r9
 8000b22:	4319      	orrs	r1, r3
 8000b24:	b2c9      	uxtb	r1, r1
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff ff7a 	bl	8000a20 <RC522_WriteRegister>
	RC522_ClearBitMask(RC522_REG_COMM_IRQ, 0x80U);
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	2004      	movs	r0, #4
 8000b30:	f7ff ffd7 	bl	8000ae2 <RC522_ClearBitMask>
	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	200a      	movs	r0, #10
 8000b38:	f7ff ffbc 	bl	8000ab4 <RC522_SetBitMask>
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_IDLE);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ff6e 	bl	8000a20 <RC522_WriteRegister>

	for (i = 0U; i < sendLen; i++)
 8000b44:	2400      	movs	r4, #0
 8000b46:	42a6      	cmp	r6, r4
 8000b48:	d90d      	bls.n	8000b66 <RC522_ToCard+0x6a>
	{
		RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);   //Writing data to the FIFO
 8000b4a:	5d29      	ldrb	r1, [r5, r4]
 8000b4c:	2009      	movs	r0, #9
 8000b4e:	f7ff ff67 	bl	8000a20 <RC522_WriteRegister>
	for (i = 0U; i < sendLen; i++)
 8000b52:	3401      	adds	r4, #1
 8000b54:	e7f7      	b.n	8000b46 <RC522_ToCard+0x4a>
			waitIRq = 0x30U;
 8000b56:	2730      	movs	r7, #48	; 0x30
			irqEn = 0x77U;
 8000b58:	2377      	movs	r3, #119	; 0x77
 8000b5a:	4699      	mov	r9, r3
			break;
 8000b5c:	e7de      	b.n	8000b1c <RC522_ToCard+0x20>
			waitIRq = 0x10U;
 8000b5e:	2710      	movs	r7, #16
			irqEn = 0x12U;
 8000b60:	2312      	movs	r3, #18
 8000b62:	4699      	mov	r9, r3
 8000b64:	e7da      	b.n	8000b1c <RC522_ToCard+0x20>
	}

	RC522_WriteRegister(RC522_REG_COMMAND, command);            //Execute the command
 8000b66:	4641      	mov	r1, r8
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff ff59 	bl	8000a20 <RC522_WriteRegister>

	if (command == PCD_TRANSCEIVE)
 8000b6e:	4643      	mov	r3, r8
 8000b70:	2b0c      	cmp	r3, #12
 8000b72:	d018      	beq.n	8000ba6 <RC522_ToCard+0xaa>
	for (i = 0U; i < sendLen; i++)
 8000b74:	24c8      	movs	r4, #200	; 0xc8
		/**
		 *   CommIrqReg[7..0]
		 *   Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		 */
//        if (eComState == COM_PACKET_RECEIVED) RS485_Service();
		n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
 8000b76:	2004      	movs	r0, #4
 8000b78:	f7ff ff72 	bl	8000a60 <RC522_ReadRegister>
 8000b7c:	0006      	movs	r6, r0
		--i;
 8000b7e:	3c01      	subs	r4, #1
	}
	while ((i != 0U) && ((n & 0x01U) == 0U) && ((n & waitIRq) == 0U));          // End of do...while loop
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d003      	beq.n	8000b8c <RC522_ToCard+0x90>
 8000b84:	07c3      	lsls	r3, r0, #31
 8000b86:	d401      	bmi.n	8000b8c <RC522_ToCard+0x90>
 8000b88:	4207      	tst	r7, r0
 8000b8a:	d0f4      	beq.n	8000b76 <RC522_ToCard+0x7a>
	/**
	 *   StartSend=0
	 */
	RC522_ClearBitMask(RC522_REG_BIT_FRAMING, 0x80U);
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	200d      	movs	r0, #13
 8000b90:	f7ff ffa7 	bl	8000ae2 <RC522_ClearBitMask>
	
	if (i != 0U)
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d10b      	bne.n	8000bb0 <RC522_ToCard+0xb4>
	RC522_StatusTypeDef status = MI_ERR;
 8000b98:	2401      	movs	r4, #1
			}
		}
		else status = MI_ERR;
	}
	return (status);
}
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	b003      	add	sp, #12
 8000b9e:	bc0c      	pop	{r2, r3}
 8000ba0:	4690      	mov	r8, r2
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RC522_SetBitMask(RC522_REG_BIT_FRAMING, 0x80U);     //StartSend=1,transmission of data starts
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	200d      	movs	r0, #13
 8000baa:	f7ff ff83 	bl	8000ab4 <RC522_SetBitMask>
 8000bae:	e7e1      	b.n	8000b74 <RC522_ToCard+0x78>
		if ((RC522_ReadRegister(RC522_REG_ERROR) & 0x1BU) == 0U)
 8000bb0:	2006      	movs	r0, #6
 8000bb2:	f7ff ff55 	bl	8000a60 <RC522_ReadRegister>
 8000bb6:	231b      	movs	r3, #27
 8000bb8:	4203      	tst	r3, r0
 8000bba:	d136      	bne.n	8000c2a <RC522_ToCard+0x12e>
			if (n & irqEn & 0x01U) status = MI_NOTAGERR;
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	4033      	ands	r3, r6
 8000bc0:	001e      	movs	r6, r3
 8000bc2:	07f3      	lsls	r3, r6, #31
 8000bc4:	d41d      	bmi.n	8000c02 <RC522_ToCard+0x106>
			status = MI_OK;
 8000bc6:	2400      	movs	r4, #0
			if (command == PCD_TRANSCEIVE)
 8000bc8:	4643      	mov	r3, r8
 8000bca:	2b0c      	cmp	r3, #12
 8000bcc:	d1e5      	bne.n	8000b9a <RC522_ToCard+0x9e>
				n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
 8000bce:	200a      	movs	r0, #10
 8000bd0:	f7ff ff46 	bl	8000a60 <RC522_ReadRegister>
 8000bd4:	0006      	movs	r6, r0
 8000bd6:	4680      	mov	r8, r0
				lastBits = (RC522_ReadRegister(RC522_REG_CONTROL) & 0x07U);
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f7ff ff41 	bl	8000a60 <RC522_ReadRegister>
 8000bde:	2307      	movs	r3, #7
 8000be0:	4018      	ands	r0, r3
				if (lastBits != 0U) *backLen = ((n - 1U) * 8U + lastBits);
 8000be2:	d010      	beq.n	8000c06 <RC522_ToCard+0x10a>
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <RC522_ToCard+0x134>)
 8000be6:	469c      	mov	ip, r3
 8000be8:	4466      	add	r6, ip
 8000bea:	00f6      	lsls	r6, r6, #3
 8000bec:	1830      	adds	r0, r6, r0
 8000bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000bf0:	8018      	strh	r0, [r3, #0]
				if (n == 0U) n = 1U;
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00a      	beq.n	8000c0e <RC522_ToCard+0x112>
				if (n > RC522_BSIZE) n = RC522_BSIZE;
 8000bf8:	2b10      	cmp	r3, #16
 8000bfa:	d90a      	bls.n	8000c12 <RC522_ToCard+0x116>
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	4698      	mov	r8, r3
 8000c00:	e007      	b.n	8000c12 <RC522_ToCard+0x116>
			if (n & irqEn & 0x01U) status = MI_NOTAGERR;
 8000c02:	2402      	movs	r4, #2
 8000c04:	e7e0      	b.n	8000bc8 <RC522_ToCard+0xcc>
				else *backLen = (n * 8U);
 8000c06:	00f6      	lsls	r6, r6, #3
 8000c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c0a:	801e      	strh	r6, [r3, #0]
 8000c0c:	e7f1      	b.n	8000bf2 <RC522_ToCard+0xf6>
				if (n == 0U) n = 1U;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	4698      	mov	r8, r3
				for (i = 0U; i < n; i++)
 8000c12:	2600      	movs	r6, #0
 8000c14:	e006      	b.n	8000c24 <RC522_ToCard+0x128>
					backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	199f      	adds	r7, r3, r6
 8000c1a:	2009      	movs	r0, #9
 8000c1c:	f7ff ff20 	bl	8000a60 <RC522_ReadRegister>
 8000c20:	7038      	strb	r0, [r7, #0]
				for (i = 0U; i < n; i++)
 8000c22:	3601      	adds	r6, #1
 8000c24:	45b0      	cmp	r8, r6
 8000c26:	d8f6      	bhi.n	8000c16 <RC522_ToCard+0x11a>
 8000c28:	e7b7      	b.n	8000b9a <RC522_ToCard+0x9e>
		else status = MI_ERR;
 8000c2a:	2401      	movs	r4, #1
 8000c2c:	e7b5      	b.n	8000b9a <RC522_ToCard+0x9e>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	1fffffff 	.word	0x1fffffff

08000c34 <RC522_Request>:
{
 8000c34:	b530      	push	{r4, r5, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	0005      	movs	r5, r0
 8000c3a:	000c      	movs	r4, r1
	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07U);	// TxLastBits = BitFramingReg[2..0]	???
 8000c3c:	2107      	movs	r1, #7
 8000c3e:	200d      	movs	r0, #13
 8000c40:	f7ff feee 	bl	8000a20 <RC522_WriteRegister>
	TagType[0] = reqMode;
 8000c44:	7025      	strb	r5, [r4, #0]
	status = RC522_ToCard(PCD_TRANSCEIVE, TagType, 1U, TagType, &backBits);
 8000c46:	230e      	movs	r3, #14
 8000c48:	446b      	add	r3, sp
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	0023      	movs	r3, r4
 8000c4e:	2201      	movs	r2, #1
 8000c50:	0021      	movs	r1, r4
 8000c52:	200c      	movs	r0, #12
 8000c54:	f7ff ff52 	bl	8000afc <RC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10U)) status = MI_ERR;
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d106      	bne.n	8000c6a <RC522_Request+0x36>
 8000c5c:	230e      	movs	r3, #14
 8000c5e:	446b      	add	r3, sp
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	2b10      	cmp	r3, #16
 8000c64:	d002      	beq.n	8000c6c <RC522_Request+0x38>
 8000c66:	2001      	movs	r0, #1
 8000c68:	e000      	b.n	8000c6c <RC522_Request+0x38>
 8000c6a:	2001      	movs	r0, #1
}
 8000c6c:	b005      	add	sp, #20
 8000c6e:	bd30      	pop	{r4, r5, pc}

08000c70 <RC522_Anticoll>:
 * @brief
 * @param
 * @retval
 */
static RC522_StatusTypeDef RC522_Anticoll(uint8_t *serNum)
{
 8000c70:	b510      	push	{r4, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	0004      	movs	r4, r0
	uint32_t bcnt;
	uint16_t blen;
	uint8_t snum = 0U;
	RC522_StatusTypeDef status;
	
	RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0U);   // TxLastBists = BitFramingReg[2..0]
 8000c76:	2100      	movs	r1, #0
 8000c78:	200d      	movs	r0, #13
 8000c7a:	f7ff fed1 	bl	8000a20 <RC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8000c7e:	2393      	movs	r3, #147	; 0x93
 8000c80:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20U;
 8000c82:	3b73      	subs	r3, #115	; 0x73
 8000c84:	7063      	strb	r3, [r4, #1]
	status = RC522_ToCard(PCD_TRANSCEIVE, serNum, 2U, serNum, &blen);
 8000c86:	3b12      	subs	r3, #18
 8000c88:	446b      	add	r3, sp
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	0023      	movs	r3, r4
 8000c8e:	2202      	movs	r2, #2
 8000c90:	0021      	movs	r1, r4
 8000c92:	200c      	movs	r0, #12
 8000c94:	f7ff ff32 	bl	8000afc <RC522_ToCard>
	
	if (status == MI_OK)
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d10b      	bne.n	8000cb4 <RC522_Anticoll+0x44>
	uint8_t snum = 0U;
 8000c9c:	2200      	movs	r2, #0
	{
		/**
		 *   Check card serial number
		 */
		for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e002      	b.n	8000ca8 <RC522_Anticoll+0x38>
		{
			snum ^= serNum[bcnt];
 8000ca2:	5ce1      	ldrb	r1, [r4, r3]
 8000ca4:	404a      	eors	r2, r1
		for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d9fa      	bls.n	8000ca2 <RC522_Anticoll+0x32>
		}
		if (snum != serNum[bcnt]) status = MI_ERR;
 8000cac:	5ce3      	ldrb	r3, [r4, r3]
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d000      	beq.n	8000cb4 <RC522_Anticoll+0x44>
 8000cb2:	2001      	movs	r0, #1
	}
	return (status);
}
 8000cb4:	b004      	add	sp, #16
 8000cb6:	bd10      	pop	{r4, pc}

08000cb8 <RC522_CalculateCRC>:
 * @brief
 * @param
 * @retval
 */
static void RC522_CalculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	0006      	movs	r6, r0
 8000cbc:	000d      	movs	r5, r1
 8000cbe:	0017      	movs	r7, r2
	uint32_t i, n;
	
	RC522_ClearBitMask(RC522_REG_DIV_IRQ, 0x04U);       // CRCIrq = 0
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	2005      	movs	r0, #5
 8000cc4:	f7ff ff0d 	bl	8000ae2 <RC522_ClearBitMask>
	RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80U);      // Clear the FIFO pointer
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f7ff fef2 	bl	8000ab4 <RC522_SetBitMask>
//	RC522_WriteRegister(RC522_REG_COMMAND, PCDLE);
	/**
	 *   Write_RC522(CommandReg, PCDLE);
	 *   Writing data to the FIFO
	 */
	for (i = 0U; i < len; i++)
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	e004      	b.n	8000cde <RC522_CalculateCRC+0x26>
	{
		RC522_WriteRegister(RC522_REG_FIFO_DATA, *(pIndata + i));
 8000cd4:	5d31      	ldrb	r1, [r6, r4]
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f7ff fea2 	bl	8000a20 <RC522_WriteRegister>
	for (i = 0U; i < len; i++)
 8000cdc:	3401      	adds	r4, #1
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d8f8      	bhi.n	8000cd4 <RC522_CalculateCRC+0x1c>
	}
	/**
	 *   Start CRC calculation
	 */
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_CALCCRC);
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fe9b 	bl	8000a20 <RC522_WriteRegister>
	/**
	 *   Wait for CRC calculation to complete
	 */
	i = 0xFFU;
 8000cea:	24ff      	movs	r4, #255	; 0xff
	
	do
	{
//        if (eComState == COM_PACKET_RECEIVED) RS485_Service();
		n = RC522_ReadRegister(RC522_REG_DIV_IRQ);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f7ff feb7 	bl	8000a60 <RC522_ReadRegister>
		--i;
 8000cf2:	3c01      	subs	r4, #1
	}
	while ((i != 0U) && ((n & 0x04U) == 0U));              // wait for CRCIrq = 1
 8000cf4:	2c00      	cmp	r4, #0
 8000cf6:	d001      	beq.n	8000cfc <RC522_CalculateCRC+0x44>
 8000cf8:	0743      	lsls	r3, r0, #29
 8000cfa:	d5f7      	bpl.n	8000cec <RC522_CalculateCRC+0x34>
	
//	RC522_WriteRegister(RC522_REG_COMMAND, PCDLE);
	/**
	 *   Read CRC calculation result
	 */
	pOutData[0] = RC522_ReadRegister(RC522_REG_CRC_RESULT_L);
 8000cfc:	2022      	movs	r0, #34	; 0x22
 8000cfe:	f7ff feaf 	bl	8000a60 <RC522_ReadRegister>
 8000d02:	7038      	strb	r0, [r7, #0]
	pOutData[1] = RC522_ReadRegister(RC522_REG_CRC_RESULT_M);
 8000d04:	2021      	movs	r0, #33	; 0x21
 8000d06:	f7ff feab 	bl	8000a60 <RC522_ReadRegister>
 8000d0a:	7078      	strb	r0, [r7, #1]
}
 8000d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d0e <RC522_Halt>:
 * @brief
 * @param
 * @retval
 */
static void RC522_Halt(void)
{
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	b084      	sub	sp, #16
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8000d12:	ac02      	add	r4, sp, #8
 8000d14:	2350      	movs	r3, #80	; 0x50
 8000d16:	7023      	strb	r3, [r4, #0]
	buff[1] = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	7063      	strb	r3, [r4, #1]
	RC522_CalculateCRC(buff, 2U, &buff[2]);
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	446a      	add	r2, sp
 8000d20:	2102      	movs	r1, #2
 8000d22:	0020      	movs	r0, r4
 8000d24:	f7ff ffc8 	bl	8000cb8 <RC522_CalculateCRC>
	RC522_ToCard(PCD_TRANSCEIVE, buff, 4U, buff, &unLen);
 8000d28:	230e      	movs	r3, #14
 8000d2a:	446b      	add	r3, sp
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	0023      	movs	r3, r4
 8000d30:	2204      	movs	r2, #4
 8000d32:	0021      	movs	r1, r4
 8000d34:	200c      	movs	r0, #12
 8000d36:	f7ff fee1 	bl	8000afc <RC522_ToCard>
	RC522_ClearBitMask(0x08U, 0x08U);
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	2008      	movs	r0, #8
 8000d3e:	f7ff fed0 	bl	8000ae2 <RC522_ClearBitMask>
}
 8000d42:	b004      	add	sp, #16
 8000d44:	bd10      	pop	{r4, pc}

08000d46 <RC522_Check>:
{
 8000d46:	b570      	push	{r4, r5, r6, lr}
 8000d48:	0005      	movs	r5, r0
	status = RC522_Request(PICC_REQIDL, id);			// Find cards, return card type
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	2026      	movs	r0, #38	; 0x26
 8000d4e:	f7ff ff71 	bl	8000c34 <RC522_Request>
 8000d52:	1e04      	subs	r4, r0, #0
	if (status == MI_OK) status = RC522_Anticoll(id);// Card detected. Anti-collision, return card serial number 4 bytes
 8000d54:	d003      	beq.n	8000d5e <RC522_Check+0x18>
	RC522_Halt();										// Command card into hibernation
 8000d56:	f7ff ffda 	bl	8000d0e <RC522_Halt>
}
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
	if (status == MI_OK) status = RC522_Anticoll(id);// Card detected. Anti-collision, return card serial number 4 bytes
 8000d5e:	0028      	movs	r0, r5
 8000d60:	f7ff ff86 	bl	8000c70 <RC522_Anticoll>
 8000d64:	0004      	movs	r4, r0
 8000d66:	e7f6      	b.n	8000d56 <RC522_Check+0x10>

08000d68 <RC522_SelectTag>:
{
 8000d68:	b510      	push	{r4, lr}
 8000d6a:	b086      	sub	sp, #24
	buffer[0] = PICC_SELECTTAG;
 8000d6c:	ab03      	add	r3, sp, #12
 8000d6e:	2293      	movs	r2, #147	; 0x93
 8000d70:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0x70U;
 8000d72:	3a23      	subs	r2, #35	; 0x23
 8000d74:	705a      	strb	r2, [r3, #1]
	for (bcnt = 0U; bcnt < 5U; bcnt++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	e004      	b.n	8000d84 <RC522_SelectTag+0x1c>
		buffer[bcnt + 2U] = *(serNum + bcnt);
 8000d7a:	1c9a      	adds	r2, r3, #2
 8000d7c:	5cc4      	ldrb	r4, [r0, r3]
 8000d7e:	a903      	add	r1, sp, #12
 8000d80:	548c      	strb	r4, [r1, r2]
	for (bcnt = 0U; bcnt < 5U; bcnt++)
 8000d82:	3301      	adds	r3, #1
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d9f8      	bls.n	8000d7a <RC522_SelectTag+0x12>
	RC522_CalculateCRC(buffer, 7U, &buffer[7]);		//??
 8000d88:	2213      	movs	r2, #19
 8000d8a:	446a      	add	r2, sp
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	a803      	add	r0, sp, #12
 8000d90:	f7ff ff92 	bl	8000cb8 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, buffer, 9U, buffer, &recb);
 8000d94:	2316      	movs	r3, #22
 8000d96:	446b      	add	r3, sp
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	ab03      	add	r3, sp, #12
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	0019      	movs	r1, r3
 8000da0:	200c      	movs	r0, #12
 8000da2:	f7ff feab 	bl	8000afc <RC522_ToCard>
	if ((status == MI_OK) && (recb == 0x18U)) size = buffer[0];
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d109      	bne.n	8000dbe <RC522_SelectTag+0x56>
 8000daa:	2316      	movs	r3, #22
 8000dac:	446b      	add	r3, sp
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	2b18      	cmp	r3, #24
 8000db2:	d001      	beq.n	8000db8 <RC522_SelectTag+0x50>
	else size = 0U;
 8000db4:	2000      	movs	r0, #0
 8000db6:	e003      	b.n	8000dc0 <RC522_SelectTag+0x58>
	if ((status == MI_OK) && (recb == 0x18U)) size = buffer[0];
 8000db8:	ab03      	add	r3, sp, #12
 8000dba:	7818      	ldrb	r0, [r3, #0]
 8000dbc:	e000      	b.n	8000dc0 <RC522_SelectTag+0x58>
	else size = 0U;
 8000dbe:	2000      	movs	r0, #0
}
 8000dc0:	b006      	add	sp, #24
 8000dc2:	bd10      	pop	{r4, pc}

08000dc4 <RC522_Read>:
{
 8000dc4:	b530      	push	{r4, r5, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	000d      	movs	r5, r1
	sendData[0] = PICC_READ;
 8000dca:	ac03      	add	r4, sp, #12
 8000dcc:	2330      	movs	r3, #48	; 0x30
 8000dce:	7023      	strb	r3, [r4, #0]
	sendData[1] = blockAddr;
 8000dd0:	7060      	strb	r0, [r4, #1]
	RC522_CalculateCRC(sendData, 2U, &sendData[2]);
 8000dd2:	220e      	movs	r2, #14
 8000dd4:	446a      	add	r2, sp
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	0020      	movs	r0, r4
 8000dda:	f7ff ff6d 	bl	8000cb8 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, sendData, 4U, recvData, &unLen);
 8000dde:	2316      	movs	r3, #22
 8000de0:	446b      	add	r3, sp
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	002b      	movs	r3, r5
 8000de6:	2204      	movs	r2, #4
 8000de8:	0021      	movs	r1, r4
 8000dea:	200c      	movs	r0, #12
 8000dec:	f7ff fe86 	bl	8000afc <RC522_ToCard>
	if ((status != MI_OK) || (unLen != 0x90U)) status = MI_ERR;
 8000df0:	2800      	cmp	r0, #0
 8000df2:	d106      	bne.n	8000e02 <RC522_Read+0x3e>
 8000df4:	2316      	movs	r3, #22
 8000df6:	446b      	add	r3, sp
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	2b90      	cmp	r3, #144	; 0x90
 8000dfc:	d002      	beq.n	8000e04 <RC522_Read+0x40>
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e000      	b.n	8000e04 <RC522_Read+0x40>
 8000e02:	2001      	movs	r0, #1
}
 8000e04:	b007      	add	sp, #28
 8000e06:	bd30      	pop	{r4, r5, pc}

08000e08 <RC522_Write>:
{
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	000d      	movs	r5, r1
	buff[0] = PICC_WRITE;
 8000e0e:	ac03      	add	r4, sp, #12
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	7023      	strb	r3, [r4, #0]
	buff[1] = blockAddr;
 8000e14:	7060      	strb	r0, [r4, #1]
	RC522_CalculateCRC(buff, 2, &buff[2]);
 8000e16:	220e      	movs	r2, #14
 8000e18:	446a      	add	r2, sp
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	0020      	movs	r0, r4
 8000e1e:	f7ff ff4b 	bl	8000cb8 <RC522_CalculateCRC>
	status = RC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 8000e22:	231e      	movs	r3, #30
 8000e24:	446b      	add	r3, sp
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	0023      	movs	r3, r4
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	200c      	movs	r0, #12
 8000e30:	f7ff fe64 	bl	8000afc <RC522_ToCard>
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0f) != 0x0a))
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d136      	bne.n	8000ea6 <RC522_Write+0x9e>
 8000e38:	231e      	movs	r3, #30
 8000e3a:	446b      	add	r3, sp
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	d001      	beq.n	8000e46 <RC522_Write+0x3e>
 8000e42:	2001      	movs	r0, #1
 8000e44:	e030      	b.n	8000ea8 <RC522_Write+0xa0>
 8000e46:	ab03      	add	r3, sp, #12
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b0a      	cmp	r3, #10
 8000e50:	d001      	beq.n	8000e56 <RC522_Write+0x4e>
 8000e52:	2001      	movs	r0, #1
 8000e54:	e028      	b.n	8000ea8 <RC522_Write+0xa0>
		for (i = 0; i < 16; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	e004      	b.n	8000e64 <RC522_Write+0x5c>
			buff[i] = *(writeData + i);
 8000e5a:	5ce9      	ldrb	r1, [r5, r3]
 8000e5c:	aa03      	add	r2, sp, #12
 8000e5e:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 16; i++)
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d9f8      	bls.n	8000e5a <RC522_Write+0x52>
		RC522_CalculateCRC(buff, 16, &buff[16]);
 8000e68:	aa07      	add	r2, sp, #28
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	a803      	add	r0, sp, #12
 8000e6e:	f7ff ff23 	bl	8000cb8 <RC522_CalculateCRC>
		status = RC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8000e72:	231e      	movs	r3, #30
 8000e74:	446b      	add	r3, sp
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	ab03      	add	r3, sp, #12
 8000e7a:	2212      	movs	r2, #18
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	200c      	movs	r0, #12
 8000e80:	f7ff fe3c 	bl	8000afc <RC522_ToCard>
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0f) != 0x0a))
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d111      	bne.n	8000eac <RC522_Write+0xa4>
 8000e88:	231e      	movs	r3, #30
 8000e8a:	446b      	add	r3, sp
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d001      	beq.n	8000e96 <RC522_Write+0x8e>
			status = MI_ERR;
 8000e92:	2001      	movs	r0, #1
 8000e94:	e008      	b.n	8000ea8 <RC522_Write+0xa0>
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0f) != 0x0a))
 8000e96:	ab03      	add	r3, sp, #12
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d002      	beq.n	8000ea8 <RC522_Write+0xa0>
			status = MI_ERR;
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	e000      	b.n	8000ea8 <RC522_Write+0xa0>
 8000ea6:	2001      	movs	r0, #1
}		// End of write function
 8000ea8:	b009      	add	sp, #36	; 0x24
 8000eaa:	bd30      	pop	{r4, r5, pc}
			status = MI_ERR;
 8000eac:	2001      	movs	r0, #1
 8000eae:	e7fb      	b.n	8000ea8 <RC522_Write+0xa0>

08000eb0 <RC522_Auth>:
{
 8000eb0:	b530      	push	{r4, r5, lr}
 8000eb2:	b087      	sub	sp, #28
	buff[0] = authMode;
 8000eb4:	ac02      	add	r4, sp, #8
 8000eb6:	7020      	strb	r0, [r4, #0]
	buff[1] = BlockAddr;
 8000eb8:	7061      	strb	r1, [r4, #1]
	for (bcnt = 0U; bcnt < 6U; bcnt++)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	e004      	b.n	8000ec8 <RC522_Auth+0x18>
		buff[bcnt + 2U] = *(Sectorkey + bcnt);
 8000ebe:	1c88      	adds	r0, r1, #2
 8000ec0:	5c55      	ldrb	r5, [r2, r1]
 8000ec2:	ac02      	add	r4, sp, #8
 8000ec4:	5425      	strb	r5, [r4, r0]
	for (bcnt = 0U; bcnt < 6U; bcnt++)
 8000ec6:	3101      	adds	r1, #1
 8000ec8:	2905      	cmp	r1, #5
 8000eca:	d9f8      	bls.n	8000ebe <RC522_Auth+0xe>
	for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	e005      	b.n	8000edc <RC522_Auth+0x2c>
		buff[bcnt + 8U] = *(serNum + bcnt);
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	3108      	adds	r1, #8
 8000ed4:	5c9c      	ldrb	r4, [r3, r2]
 8000ed6:	a802      	add	r0, sp, #8
 8000ed8:	5444      	strb	r4, [r0, r1]
	for (bcnt = 0U; bcnt < 4U; bcnt++)
 8000eda:	3201      	adds	r2, #1
 8000edc:	2a03      	cmp	r2, #3
 8000ede:	d9f7      	bls.n	8000ed0 <RC522_Auth+0x20>
	status = RC522_ToCard(PCD_AUTHENT, buff, 12U, buff, &recb);
 8000ee0:	2316      	movs	r3, #22
 8000ee2:	446b      	add	r3, sp
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	ab02      	add	r3, sp, #8
 8000ee8:	220c      	movs	r2, #12
 8000eea:	0019      	movs	r1, r3
 8000eec:	200e      	movs	r0, #14
 8000eee:	f7ff fe05 	bl	8000afc <RC522_ToCard>
 8000ef2:	1e04      	subs	r4, r0, #0
	if ((status != MI_OK) || ((RC522_ReadRegister(RC522_REG_STATUS2) & 0x08U) == 0U)) status = MI_ERR;
 8000ef4:	d003      	beq.n	8000efe <RC522_Auth+0x4e>
 8000ef6:	2401      	movs	r4, #1
}
 8000ef8:	0020      	movs	r0, r4
 8000efa:	b007      	add	sp, #28
 8000efc:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || ((RC522_ReadRegister(RC522_REG_STATUS2) & 0x08U) == 0U)) status = MI_ERR;
 8000efe:	2008      	movs	r0, #8
 8000f00:	f7ff fdae 	bl	8000a60 <RC522_ReadRegister>
 8000f04:	0703      	lsls	r3, r0, #28
 8000f06:	d4f7      	bmi.n	8000ef8 <RC522_Auth+0x48>
 8000f08:	2401      	movs	r4, #1
 8000f0a:	e7f5      	b.n	8000ef8 <RC522_Auth+0x48>

08000f0c <RC522_Init>:
{
 8000f0c:	b510      	push	{r4, lr}
	mRC522_ChipRelease();
 8000f0e:	2090      	movs	r0, #144	; 0x90
 8000f10:	2201      	movs	r2, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	05c0      	lsls	r0, r0, #23
 8000f16:	f000 fc67 	bl	80017e8 <HAL_GPIO_WritePin>
	mRC522_ResetAssert();
 8000f1a:	4c1a      	ldr	r4, [pc, #104]	; (8000f84 <RC522_Init+0x78>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	0020      	movs	r0, r4
 8000f22:	f000 fc61 	bl	80017e8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f000 fa3e 	bl	80013a8 <HAL_Delay>
	mRC522_ResetRelease();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2102      	movs	r1, #2
 8000f30:	0020      	movs	r0, r4
 8000f32:	f000 fc59 	bl	80017e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f000 fa36 	bl	80013a8 <HAL_Delay>
	RC522_WriteRegister(RC522_REG_COMMAND, PCD_RESETPHASE);
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fd6e 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_MODE, 0x8D);
 8000f44:	218d      	movs	r1, #141	; 0x8d
 8000f46:	202a      	movs	r0, #42	; 0x2a
 8000f48:	f7ff fd6a 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3E);
 8000f4c:	213e      	movs	r1, #62	; 0x3e
 8000f4e:	202b      	movs	r0, #43	; 0x2b
 8000f50:	f7ff fd66 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30);
 8000f54:	211e      	movs	r1, #30
 8000f56:	202d      	movs	r0, #45	; 0x2d
 8000f58:	f7ff fd62 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	202c      	movs	r0, #44	; 0x2c
 8000f60:	f7ff fd5e 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_RF_CFG, 0x70);
 8000f64:	2170      	movs	r1, #112	; 0x70
 8000f66:	2026      	movs	r0, #38	; 0x26
 8000f68:	f7ff fd5a 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40);
 8000f6c:	2140      	movs	r1, #64	; 0x40
 8000f6e:	2015      	movs	r0, #21
 8000f70:	f7ff fd56 	bl	8000a20 <RC522_WriteRegister>
	RC522_WriteRegister(RC522_REG_MODE, 0x3D);
 8000f74:	213d      	movs	r1, #61	; 0x3d
 8000f76:	2011      	movs	r0, #17
 8000f78:	f7ff fd52 	bl	8000a20 <RC522_WriteRegister>
	RC522_AntennaOn(); // Open the antenna
 8000f7c:	f7ff fda5 	bl	8000aca <RC522_AntennaOn>
}
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	48000400 	.word	0x48000400

08000f88 <RC522_Service>:
{
 8000f88:	b510      	push	{r4, lr}
	if ((HAL_GetTick() - mifare_timer) >= mifare_tout)
 8000f8a:	f000 fa07 	bl	800139c <HAL_GetTick>
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <RC522_Service+0xd0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1ac0      	subs	r0, r0, r3
 8000f94:	4b31      	ldr	r3, [pc, #196]	; (800105c <RC522_Service+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d200      	bcs.n	8000f9e <RC522_Service+0x16>
}
 8000f9c:	bd10      	pop	{r4, pc}
		mifare_tout = 50;
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <RC522_Service+0xd4>)
 8000fa0:	2232      	movs	r2, #50	; 0x32
 8000fa2:	601a      	str	r2, [r3, #0]
		mifare_timer = HAL_GetTick();
 8000fa4:	f000 f9fa 	bl	800139c <HAL_GetTick>
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <RC522_Service+0xd0>)
 8000faa:	6018      	str	r0, [r3, #0]
		mem_set(card_serial, 0, 5);
 8000fac:	4c2c      	ldr	r4, [pc, #176]	; (8001060 <RC522_Service+0xd8>)
 8000fae:	2205      	movs	r2, #5
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff f969 	bl	800028a <mem_set>
		if (RC522_Check(card_serial) == MI_OK)                              // check is MIFARE card in field range
 8000fb8:	0020      	movs	r0, r4
 8000fba:	f7ff fec4 	bl	8000d46 <RC522_Check>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d025      	beq.n	800100e <RC522_Service+0x86>
		else if (++clr > 10)
 8000fc2:	4a28      	ldr	r2, [pc, #160]	; (8001064 <RC522_Service+0xdc>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d9e6      	bls.n	8000f9c <RC522_Service+0x14>
			clr = 0;
 8000fce:	0013      	movs	r3, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
			CardReadyReset();
 8000fd4:	4a24      	ldr	r2, [pc, #144]	; (8001068 <RC522_Service+0xe0>)
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	6811      	ldr	r1, [r2, #0]
 8000fda:	4399      	bics	r1, r3
 8000fdc:	000b      	movs	r3, r1
			CardInStackerReset();
 8000fde:	2102      	movs	r1, #2
 8000fe0:	438b      	bics	r3, r1
 8000fe2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000fe4:	2490      	movs	r4, #144	; 0x90
 8000fe6:	05e4      	lsls	r4, r4, #23
 8000fe8:	2201      	movs	r2, #1
 8000fea:	3901      	subs	r1, #1
 8000fec:	0020      	movs	r0, r4
 8000fee:	f000 fbfb 	bl	80017e8 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	0020      	movs	r0, r4
 8000ff6:	f000 fbfd 	bl	80017f4 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	0020      	movs	r0, r4
 8001000:	f000 fbf2 	bl	80017e8 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8001004:	2108      	movs	r1, #8
 8001006:	0020      	movs	r0, r4
 8001008:	f000 fbf4 	bl	80017f4 <HAL_GPIO_TogglePin>
}
 800100c:	e7c6      	b.n	8000f9c <RC522_Service+0x14>
			mifare_tout = 1000;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <RC522_Service+0xd4>)
 8001010:	22fa      	movs	r2, #250	; 0xfa
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001016:	2490      	movs	r4, #144	; 0x90
 8001018:	05e4      	lsls	r4, r4, #23
 800101a:	2200      	movs	r2, #0
 800101c:	2101      	movs	r1, #1
 800101e:	0020      	movs	r0, r4
 8001020:	f000 fbe2 	bl	80017e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2102      	movs	r1, #2
 8001028:	0020      	movs	r0, r4
 800102a:	f000 fbdd 	bl	80017e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2104      	movs	r1, #4
 8001032:	0020      	movs	r0, r4
 8001034:	f000 fbd8 	bl	80017e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2108      	movs	r1, #8
 800103c:	0020      	movs	r0, r4
 800103e:	f000 fbd3 	bl	80017e8 <HAL_GPIO_WritePin>
			CardReadySet();
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <RC522_Service+0xe0>)
 8001044:	2301      	movs	r3, #1
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	430b      	orrs	r3, r1
			CardInStackerSet();
 800104a:	2102      	movs	r1, #2
 800104c:	430b      	orrs	r3, r1
 800104e:	6013      	str	r3, [r2, #0]
			clr = 0;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <RC522_Service+0xdc>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e7a1      	b.n	8000f9c <RC522_Service+0x14>
 8001058:	2000025c 	.word	0x2000025c
 800105c:	20000010 	.word	0x20000010
 8001060:	20000434 	.word	0x20000434
 8001064:	20000258 	.word	0x20000258
 8001068:	200003b0 	.word	0x200003b0

0800106c <RC522_ReadBlock>:
{
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	0005      	movs	r5, r0
 8001072:	000e      	movs	r6, r1
	status = RC522_Request(PICC_REQIDL, str);
 8001074:	4669      	mov	r1, sp
 8001076:	2026      	movs	r0, #38	; 0x26
 8001078:	f7ff fddc 	bl	8000c34 <RC522_Request>
 800107c:	0004      	movs	r4, r0
	status += RC522_Anticoll(str);
 800107e:	4668      	mov	r0, sp
 8001080:	f7ff fdf6 	bl	8000c70 <RC522_Anticoll>
 8001084:	1824      	adds	r4, r4, r0
 8001086:	b2e4      	uxtb	r4, r4
	RC522_SelectTag(str);
 8001088:	4668      	mov	r0, sp
 800108a:	f7ff fe6d 	bl	8000d68 <RC522_SelectTag>
	if (!RC522_Auth(PICC_AUTHENT1A, block, mifare_keya, str) && !status)
 800108e:	466b      	mov	r3, sp
 8001090:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <RC522_ReadBlock+0x4c>)
 8001092:	0029      	movs	r1, r5
 8001094:	2060      	movs	r0, #96	; 0x60
 8001096:	f7ff ff0b 	bl	8000eb0 <RC522_Auth>
 800109a:	2800      	cmp	r0, #0
 800109c:	d101      	bne.n	80010a2 <RC522_ReadBlock+0x36>
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d004      	beq.n	80010ac <RC522_ReadBlock+0x40>
	RC522_Halt();
 80010a2:	f7ff fe34 	bl	8000d0e <RC522_Halt>
}
 80010a6:	0020      	movs	r0, r4
 80010a8:	b004      	add	sp, #16
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
		status = RC522_Read(block, rbuf);
 80010ac:	0031      	movs	r1, r6
 80010ae:	0028      	movs	r0, r5
 80010b0:	f7ff fe88 	bl	8000dc4 <RC522_Read>
 80010b4:	0004      	movs	r4, r0
 80010b6:	e7f4      	b.n	80010a2 <RC522_ReadBlock+0x36>
 80010b8:	20000000 	.word	0x20000000

080010bc <RC522_WriteBlock>:
{
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	0005      	movs	r5, r0
 80010c2:	000e      	movs	r6, r1
	status = RC522_Request(PICC_REQIDL, str);
 80010c4:	4669      	mov	r1, sp
 80010c6:	2026      	movs	r0, #38	; 0x26
 80010c8:	f7ff fdb4 	bl	8000c34 <RC522_Request>
 80010cc:	0004      	movs	r4, r0
	status += RC522_Anticoll(str);
 80010ce:	4668      	mov	r0, sp
 80010d0:	f7ff fdce 	bl	8000c70 <RC522_Anticoll>
 80010d4:	1824      	adds	r4, r4, r0
 80010d6:	b2e4      	uxtb	r4, r4
	RC522_SelectTag(str);
 80010d8:	4668      	mov	r0, sp
 80010da:	f7ff fe45 	bl	8000d68 <RC522_SelectTag>
	if (!RC522_Auth(PICC_AUTHENT1A, block, mifare_keya, str) && !status)
 80010de:	466b      	mov	r3, sp
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <RC522_WriteBlock+0x4c>)
 80010e2:	0029      	movs	r1, r5
 80010e4:	2060      	movs	r0, #96	; 0x60
 80010e6:	f7ff fee3 	bl	8000eb0 <RC522_Auth>
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d101      	bne.n	80010f2 <RC522_WriteBlock+0x36>
 80010ee:	2c00      	cmp	r4, #0
 80010f0:	d004      	beq.n	80010fc <RC522_WriteBlock+0x40>
	RC522_Halt();
 80010f2:	f7ff fe0c 	bl	8000d0e <RC522_Halt>
}
 80010f6:	0020      	movs	r0, r4
 80010f8:	b004      	add	sp, #16
 80010fa:	bd70      	pop	{r4, r5, r6, pc}
		status = RC522_Write(block, wbuf);
 80010fc:	0031      	movs	r1, r6
 80010fe:	0028      	movs	r0, r5
 8001100:	f7ff fe82 	bl	8000e08 <RC522_Write>
 8001104:	0004      	movs	r4, r0
 8001106:	e7f4      	b.n	80010f2 <RC522_WriteBlock+0x36>
 8001108:	20000000 	.word	0x20000000

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_MspInit+0x2c>)
 8001110:	6999      	ldr	r1, [r3, #24]
 8001112:	2201      	movs	r2, #1
 8001114:	4311      	orrs	r1, r2
 8001116:	6199      	str	r1, [r3, #24]
 8001118:	6999      	ldr	r1, [r3, #24]
 800111a:	400a      	ands	r2, r1
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	69da      	ldr	r2, [r3, #28]
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	0549      	lsls	r1, r1, #21
 8001126:	430a      	orrs	r2, r1
 8001128:	61da      	str	r2, [r3, #28]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	400b      	ands	r3, r1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	b002      	add	sp, #8
 8001134:	4770      	bx	lr
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800113c:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800113e:	6802      	ldr	r2, [r0, #0]
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <HAL_CRC_MspInit+0x24>)
 8001142:	429a      	cmp	r2, r3
 8001144:	d001      	beq.n	800114a <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001146:	b002      	add	sp, #8
 8001148:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_CRC_MspInit+0x28>)
 800114c:	6951      	ldr	r1, [r2, #20]
 800114e:	2340      	movs	r3, #64	; 0x40
 8001150:	4319      	orrs	r1, r3
 8001152:	6151      	str	r1, [r2, #20]
 8001154:	6952      	ldr	r2, [r2, #20]
 8001156:	4013      	ands	r3, r2
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	9b01      	ldr	r3, [sp, #4]
}
 800115c:	e7f3      	b.n	8001146 <HAL_CRC_MspInit+0xa>
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	40023000 	.word	0x40023000
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8001168:	6802      	ldr	r2, [r0, #0]
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_RTC_MspInit+0x18>)
 800116c:	429a      	cmp	r2, r3
 800116e:	d000      	beq.n	8001172 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001170:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_RTC_MspInit+0x1c>)
 8001174:	6a11      	ldr	r1, [r2, #32]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	430b      	orrs	r3, r1
 800117c:	6213      	str	r3, [r2, #32]
}
 800117e:	e7f7      	b.n	8001170 <HAL_RTC_MspInit+0x8>
 8001180:	40002800 	.word	0x40002800
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b510      	push	{r4, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	2214      	movs	r2, #20
 8001190:	2100      	movs	r1, #0
 8001192:	a803      	add	r0, sp, #12
 8001194:	f002 f900 	bl	8003398 <memset>
  if(hspi->Instance==SPI1)
 8001198:	6822      	ldr	r2, [r4, #0]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_SPI_MspInit+0x5c>)
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011a0:	b008      	add	sp, #32
 80011a2:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_SPI_MspInit+0x60>)
 80011a6:	6999      	ldr	r1, [r3, #24]
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	0140      	lsls	r0, r0, #5
 80011ac:	4301      	orrs	r1, r0
 80011ae:	6199      	str	r1, [r3, #24]
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	4002      	ands	r2, r0
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	0289      	lsls	r1, r1, #10
 80011be:	430a      	orrs	r2, r1
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	400b      	ands	r3, r1
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ca:	23e0      	movs	r3, #224	; 0xe0
 80011cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	3bde      	subs	r3, #222	; 0xde
 80011d0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	3301      	adds	r3, #1
 80011d4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	2090      	movs	r0, #144	; 0x90
 80011d8:	a903      	add	r1, sp, #12
 80011da:	05c0      	lsls	r0, r0, #23
 80011dc:	f000 f9c4 	bl	8001568 <HAL_GPIO_Init>
}
 80011e0:	e7de      	b.n	80011a0 <HAL_SPI_MspInit+0x18>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40013000 	.word	0x40013000
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b510      	push	{r4, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	2214      	movs	r2, #20
 80011f4:	2100      	movs	r1, #0
 80011f6:	a803      	add	r0, sp, #12
 80011f8:	f002 f8ce 	bl	8003398 <memset>
  if(huart->Instance==USART1)
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_UART_MspInit+0x70>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001204:	b008      	add	sp, #32
 8001206:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_UART_MspInit+0x74>)
 800120a:	6999      	ldr	r1, [r3, #24]
 800120c:	2080      	movs	r0, #128	; 0x80
 800120e:	01c0      	lsls	r0, r0, #7
 8001210:	4301      	orrs	r1, r0
 8001212:	6199      	str	r1, [r3, #24]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	4002      	ands	r2, r0
 8001218:	9201      	str	r2, [sp, #4]
 800121a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0289      	lsls	r1, r1, #10
 8001222:	430a      	orrs	r2, r1
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	400b      	ands	r3, r1
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800122e:	23c0      	movs	r3, #192	; 0xc0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	3301      	adds	r3, #1
 800123a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800123c:	3b02      	subs	r3, #2
 800123e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	2090      	movs	r0, #144	; 0x90
 8001242:	a903      	add	r1, sp, #12
 8001244:	05c0      	lsls	r0, r0, #23
 8001246:	f000 f98f 	bl	8001568 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	201b      	movs	r0, #27
 8001250:	f000 f8bc 	bl	80013cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001254:	201b      	movs	r0, #27
 8001256:	f000 f8eb 	bl	8001430 <HAL_NVIC_EnableIRQ>
}
 800125a:	e7d3      	b.n	8001204 <HAL_UART_MspInit+0x18>
 800125c:	40013800 	.word	0x40013800
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001264:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 8001266:	6802      	ldr	r2, [r0, #0]
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_UART_MspDeInit+0x2c>)
 800126a:	429a      	cmp	r2, r3
 800126c:	d000      	beq.n	8001270 <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800126e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_UART_MspDeInit+0x30>)
 8001272:	6993      	ldr	r3, [r2, #24]
 8001274:	4908      	ldr	r1, [pc, #32]	; (8001298 <HAL_UART_MspDeInit+0x34>)
 8001276:	400b      	ands	r3, r1
 8001278:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800127a:	21c0      	movs	r1, #192	; 0xc0
 800127c:	2090      	movs	r0, #144	; 0x90
 800127e:	00c9      	lsls	r1, r1, #3
 8001280:	05c0      	lsls	r0, r0, #23
 8001282:	f000 fa37 	bl	80016f4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001286:	201b      	movs	r0, #27
 8001288:	f000 f8de 	bl	8001448 <HAL_NVIC_DisableIRQ>
}
 800128c:	e7ef      	b.n	800126e <HAL_UART_MspDeInit+0xa>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	40013800 	.word	0x40013800
 8001294:	40021000 	.word	0x40021000
 8001298:	ffffbfff 	.word	0xffffbfff

0800129c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800129c:	4770      	bx	lr

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	e7fe      	b.n	800129e <HardFault_Handler>

080012a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f86d 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bd10      	pop	{r4, pc}

080012ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART1_IRQHandler+0xc>)
 80012b0:	f001 fd24 	bl	8002cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000290 	.word	0x20000290

080012bc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012bc:	4770      	bx	lr
	...

080012c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0b      	ldr	r4, [pc, #44]	; (800130c <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012ea:	f7ff ffe7 	bl	80012bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012ee:	f002 f82f 	bl	8003350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff f8bf 	bl	8000474 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   r0, =_estack
 80012f8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001304:	08003540 	.word	0x08003540
  ldr r2, =_sbss
 8001308:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800130c:	200004c0 	.word	0x200004c0

08001310 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_IRQHandler>
	...

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b510      	push	{r4, lr}
 8001316:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_InitTick+0x44>)
 800131a:	7819      	ldrb	r1, [r3, #0]
 800131c:	20fa      	movs	r0, #250	; 0xfa
 800131e:	0080      	lsls	r0, r0, #2
 8001320:	f7fe fef2 	bl	8000108 <__udivsi3>
 8001324:	0001      	movs	r1, r0
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_InitTick+0x48>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f7fe feed 	bl	8000108 <__udivsi3>
 800132e:	f000 f89b 	bl	8001468 <HAL_SYSTICK_Config>
 8001332:	2800      	cmp	r0, #0
 8001334:	d10d      	bne.n	8001352 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	2c03      	cmp	r4, #3
 8001338:	d901      	bls.n	800133e <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
 800133c:	e00a      	b.n	8001354 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133e:	3001      	adds	r0, #1
 8001340:	2200      	movs	r2, #0
 8001342:	0021      	movs	r1, r4
 8001344:	4240      	negs	r0, r0
 8001346:	f000 f841 	bl	80013cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_InitTick+0x4c>)
 800134c:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 800134e:	2000      	movs	r0, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8001352:	2001      	movs	r0, #1
}
 8001354:	bd10      	pop	{r4, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	20000018 	.word	0x20000018
 800135c:	20000014 	.word	0x20000014
 8001360:	2000001c 	.word	0x2000001c

08001364 <HAL_Init>:
{
 8001364:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_Init+0x1c>)
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	2110      	movs	r1, #16
 800136c:	430b      	orrs	r3, r1
 800136e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ffcf 	bl	8001314 <HAL_InitTick>
  HAL_MspInit();
 8001376:	f7ff fec9 	bl	800110c <HAL_MspInit>
}
 800137a:	2000      	movs	r0, #0
 800137c:	bd10      	pop	{r4, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40022000 	.word	0x40022000

08001384 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x10>)
 8001386:	6811      	ldr	r1, [r2, #0]
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_IncTick+0x14>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	185b      	adds	r3, r3, r1
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	4770      	bx	lr
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	200004bc 	.word	0x200004bc
 8001398:	20000018 	.word	0x20000018

0800139c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800139c:	4b01      	ldr	r3, [pc, #4]	; (80013a4 <HAL_GetTick+0x8>)
 800139e:	6818      	ldr	r0, [r3, #0]
}
 80013a0:	4770      	bx	lr
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	200004bc 	.word	0x200004bc

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fff6 	bl	800139c <HAL_GetTick>
 80013b0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	1c63      	adds	r3, r4, #1
 80013b4:	d002      	beq.n	80013bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_Delay+0x20>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013bc:	f7ff ffee 	bl	800139c <HAL_GetTick>
 80013c0:	1b40      	subs	r0, r0, r5
 80013c2:	42a0      	cmp	r0, r4
 80013c4:	d3fa      	bcc.n	80013bc <HAL_Delay+0x14>
  {
  }
}
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
 80013c8:	20000018 	.word	0x20000018

080013cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013cc:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 80013ce:	2800      	cmp	r0, #0
 80013d0:	db11      	blt.n	80013f6 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d2:	0883      	lsrs	r3, r0, #2
 80013d4:	4d14      	ldr	r5, [pc, #80]	; (8001428 <HAL_NVIC_SetPriority+0x5c>)
 80013d6:	33c0      	adds	r3, #192	; 0xc0
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	595c      	ldr	r4, [r3, r5]
 80013dc:	2203      	movs	r2, #3
 80013de:	4010      	ands	r0, r2
 80013e0:	00c0      	lsls	r0, r0, #3
 80013e2:	32fc      	adds	r2, #252	; 0xfc
 80013e4:	0016      	movs	r6, r2
 80013e6:	4086      	lsls	r6, r0
 80013e8:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ea:	0189      	lsls	r1, r1, #6
 80013ec:	400a      	ands	r2, r1
 80013ee:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f0:	4322      	orrs	r2, r4
 80013f2:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f6:	b2c0      	uxtb	r0, r0
 80013f8:	230f      	movs	r3, #15
 80013fa:	4003      	ands	r3, r0
 80013fc:	3b08      	subs	r3, #8
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3306      	adds	r3, #6
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_NVIC_SetPriority+0x60>)
 8001406:	4694      	mov	ip, r2
 8001408:	4463      	add	r3, ip
 800140a:	685d      	ldr	r5, [r3, #4]
 800140c:	2403      	movs	r4, #3
 800140e:	4020      	ands	r0, r4
 8001410:	00c0      	lsls	r0, r0, #3
 8001412:	22ff      	movs	r2, #255	; 0xff
 8001414:	0014      	movs	r4, r2
 8001416:	4084      	lsls	r4, r0
 8001418:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141a:	0189      	lsls	r1, r1, #6
 800141c:	4011      	ands	r1, r2
 800141e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	4329      	orrs	r1, r5
 8001422:	6059      	str	r1, [r3, #4]
 8001424:	e7e6      	b.n	80013f4 <HAL_NVIC_SetPriority+0x28>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001430:	2800      	cmp	r0, #0
 8001432:	db05      	blt.n	8001440 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001434:	231f      	movs	r3, #31
 8001436:	4018      	ands	r0, r3
 8001438:	3b1e      	subs	r3, #30
 800143a:	4083      	lsls	r3, r0
 800143c:	4a01      	ldr	r2, [pc, #4]	; (8001444 <HAL_NVIC_EnableIRQ+0x14>)
 800143e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001440:	4770      	bx	lr
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	e000e100 	.word	0xe000e100

08001448 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001448:	2800      	cmp	r0, #0
 800144a:	db0a      	blt.n	8001462 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144c:	231f      	movs	r3, #31
 800144e:	4018      	ands	r0, r3
 8001450:	3b1e      	subs	r3, #30
 8001452:	4083      	lsls	r3, r0
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <HAL_NVIC_DisableIRQ+0x1c>)
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	508b      	str	r3, [r1, r2]
 800145a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800145e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100

08001468 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	3801      	subs	r0, #1
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_SYSTICK_Config+0x2c>)
 800146c:	4298      	cmp	r0, r3
 800146e:	d80f      	bhi.n	8001490 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_SYSTICK_Config+0x30>)
 8001472:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_SYSTICK_Config+0x34>)
 8001476:	6a03      	ldr	r3, [r0, #32]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	21c0      	movs	r1, #192	; 0xc0
 800147e:	0609      	lsls	r1, r1, #24
 8001480:	430b      	orrs	r3, r1
 8001482:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	2300      	movs	r3, #0
 8001486:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001488:	3307      	adds	r3, #7
 800148a:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800148e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001490:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001492:	e7fc      	b.n	800148e <HAL_SYSTICK_Config+0x26>
 8001494:	00ffffff 	.word	0x00ffffff
 8001498:	e000e010 	.word	0xe000e010
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <CRC_Calculate8>:
  * @{
  */
uint32_t CRC_Calculate8(uint8_t* arr, uint32_t count) {

	/* Calculate CRC */
	while (count--) {
 80014a0:	e004      	b.n	80014ac <CRC_Calculate8+0xc>
		/* Set new value */
		CRC->DR = *arr++;
 80014a2:	7801      	ldrb	r1, [r0, #0]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <CRC_Calculate8+0x18>)
 80014a6:	6011      	str	r1, [r2, #0]
	while (count--) {
 80014a8:	0019      	movs	r1, r3
		CRC->DR = *arr++;
 80014aa:	3001      	adds	r0, #1
	while (count--) {
 80014ac:	1e4b      	subs	r3, r1, #1
 80014ae:	2900      	cmp	r1, #0
 80014b0:	d1f7      	bne.n	80014a2 <CRC_Calculate8+0x2>
	}

	/* Return data */
	return CRC->DR;
 80014b2:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <CRC_Calculate8+0x18>)
 80014b4:	6818      	ldr	r0, [r3, #0]
}
 80014b6:	4770      	bx	lr
 80014b8:	40023000 	.word	0x40023000

080014bc <CRC_ResetDR>:

void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <CRC_ResetDR+0x8>)
 80014be:	2201      	movs	r2, #1
 80014c0:	609a      	str	r2, [r3, #8]
}
 80014c2:	4770      	bx	lr
 80014c4:	40023000 	.word	0x40023000

080014c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014cc:	d025      	beq.n	800151a <HAL_CRC_Init+0x52>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014ce:	7d43      	ldrb	r3, [r0, #21]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01a      	beq.n	800150a <HAL_CRC_Init+0x42>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014d4:	2302      	movs	r3, #2
 80014d6:	7563      	strb	r3, [r4, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80014d8:	7923      	ldrb	r3, [r4, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <HAL_CRC_Init+0x4a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4252      	negs	r2, r2
 80014e4:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80014e6:	6822      	ldr	r2, [r4, #0]
 80014e8:	6893      	ldr	r3, [r2, #8]
 80014ea:	2160      	movs	r1, #96	; 0x60
 80014ec:	438b      	bics	r3, r1
 80014ee:	68e1      	ldr	r1, [r4, #12]
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6893      	ldr	r3, [r2, #8]
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	438b      	bics	r3, r1
 80014fc:	6921      	ldr	r1, [r4, #16]
 80014fe:	430b      	orrs	r3, r1
 8001500:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001502:	2301      	movs	r3, #1
 8001504:	7563      	strb	r3, [r4, #21]

  /* Return function status */
  return HAL_OK;
 8001506:	2000      	movs	r0, #0
}
 8001508:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800150a:	7503      	strb	r3, [r0, #20]
    HAL_CRC_MspInit(hcrc);
 800150c:	f7ff fe16 	bl	800113c <HAL_CRC_MspInit>
 8001510:	e7e0      	b.n	80014d4 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	68a2      	ldr	r2, [r4, #8]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	e7e5      	b.n	80014e6 <HAL_CRC_Init+0x1e>
    return HAL_ERROR;
 800151a:	2001      	movs	r0, #1
 800151c:	e7f4      	b.n	8001508 <HAL_CRC_Init+0x40>

0800151e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800151e:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001520:	2321      	movs	r3, #33	; 0x21
 8001522:	5cc3      	ldrb	r3, [r0, r3]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d003      	beq.n	8001530 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	2304      	movs	r3, #4
 800152a:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800152c:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800152e:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	210e      	movs	r1, #14
 8001536:	438b      	bics	r3, r1
 8001538:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800153a:	6801      	ldr	r1, [r0, #0]
 800153c:	680a      	ldr	r2, [r1, #0]
 800153e:	2301      	movs	r3, #1
 8001540:	439a      	bics	r2, r3
 8001542:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001546:	0019      	movs	r1, r3
 8001548:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800154a:	40a1      	lsls	r1, r4
 800154c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800154e:	2221      	movs	r2, #33	; 0x21
 8001550:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8001552:	331f      	adds	r3, #31
 8001554:	2200      	movs	r2, #0
 8001556:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8001558:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800155e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2000      	movs	r0, #0
 8001562:	e7e4      	b.n	800152e <HAL_DMA_Abort_IT+0x10>
 8001564:	2000      	movs	r0, #0
 8001566:	e7e2      	b.n	800152e <HAL_DMA_Abort_IT+0x10>

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	46c6      	mov	lr, r8
 800156c:	b500      	push	{lr}
 800156e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001570:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e038      	b.n	80015e6 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001574:	2603      	movs	r6, #3
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x12>
 8001578:	2600      	movs	r6, #0
 800157a:	40ae      	lsls	r6, r5
 800157c:	0035      	movs	r5, r6
 800157e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001580:	3402      	adds	r4, #2
 8001582:	00a4      	lsls	r4, r4, #2
 8001584:	4e55      	ldr	r6, [pc, #340]	; (80016dc <HAL_GPIO_Init+0x174>)
 8001586:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001588:	4c55      	ldr	r4, [pc, #340]	; (80016e0 <HAL_GPIO_Init+0x178>)
 800158a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800158c:	4642      	mov	r2, r8
 800158e:	43d4      	mvns	r4, r2
 8001590:	002e      	movs	r6, r5
 8001592:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001594:	684a      	ldr	r2, [r1, #4]
 8001596:	03d2      	lsls	r2, r2, #15
 8001598:	d502      	bpl.n	80015a0 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 800159a:	4642      	mov	r2, r8
 800159c:	4315      	orrs	r5, r2
 800159e:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80015a0:	4d4f      	ldr	r5, [pc, #316]	; (80016e0 <HAL_GPIO_Init+0x178>)
 80015a2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80015a4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80015a6:	002e      	movs	r6, r5
 80015a8:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015aa:	684a      	ldr	r2, [r1, #4]
 80015ac:	0392      	lsls	r2, r2, #14
 80015ae:	d502      	bpl.n	80015b6 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80015b0:	4642      	mov	r2, r8
 80015b2:	4315      	orrs	r5, r2
 80015b4:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80015b6:	4d4a      	ldr	r5, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x178>)
 80015b8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ba:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80015bc:	002e      	movs	r6, r5
 80015be:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	684a      	ldr	r2, [r1, #4]
 80015c2:	02d2      	lsls	r2, r2, #11
 80015c4:	d502      	bpl.n	80015cc <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80015c6:	4642      	mov	r2, r8
 80015c8:	4315      	orrs	r5, r2
 80015ca:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80015cc:	4d44      	ldr	r5, [pc, #272]	; (80016e0 <HAL_GPIO_Init+0x178>)
 80015ce:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80015d0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80015d2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	684a      	ldr	r2, [r1, #4]
 80015d6:	0292      	lsls	r2, r2, #10
 80015d8:	d502      	bpl.n	80015e0 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80015da:	4642      	mov	r2, r8
 80015dc:	432a      	orrs	r2, r5
 80015de:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80015e0:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <HAL_GPIO_Init+0x178>)
 80015e2:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80015e4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	680a      	ldr	r2, [r1, #0]
 80015e8:	0014      	movs	r4, r2
 80015ea:	40dc      	lsrs	r4, r3
 80015ec:	d071      	beq.n	80016d2 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ee:	2501      	movs	r5, #1
 80015f0:	409d      	lsls	r5, r3
 80015f2:	402a      	ands	r2, r5
 80015f4:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 80015f6:	d0f5      	beq.n	80015e4 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	684c      	ldr	r4, [r1, #4]
 80015fa:	2c02      	cmp	r4, #2
 80015fc:	d001      	beq.n	8001602 <HAL_GPIO_Init+0x9a>
 80015fe:	2c12      	cmp	r4, #18
 8001600:	d10e      	bne.n	8001620 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3u];
 8001602:	08dc      	lsrs	r4, r3, #3
 8001604:	3408      	adds	r4, #8
 8001606:	00a4      	lsls	r4, r4, #2
 8001608:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800160a:	2607      	movs	r6, #7
 800160c:	401e      	ands	r6, r3
 800160e:	00b6      	lsls	r6, r6, #2
 8001610:	220f      	movs	r2, #15
 8001612:	40b2      	lsls	r2, r6
 8001614:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001616:	690a      	ldr	r2, [r1, #16]
 8001618:	40b2      	lsls	r2, r6
 800161a:	0016      	movs	r6, r2
 800161c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 800161e:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8001620:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001622:	005f      	lsls	r7, r3, #1
 8001624:	2403      	movs	r4, #3
 8001626:	0026      	movs	r6, r4
 8001628:	40be      	lsls	r6, r7
 800162a:	43f6      	mvns	r6, r6
 800162c:	4032      	ands	r2, r6
 800162e:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001630:	684a      	ldr	r2, [r1, #4]
 8001632:	4014      	ands	r4, r2
 8001634:	40bc      	lsls	r4, r7
 8001636:	4662      	mov	r2, ip
 8001638:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800163a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163c:	684c      	ldr	r4, [r1, #4]
 800163e:	1e62      	subs	r2, r4, #1
 8001640:	2a01      	cmp	r2, #1
 8001642:	d903      	bls.n	800164c <HAL_GPIO_Init+0xe4>
 8001644:	2c11      	cmp	r4, #17
 8001646:	d001      	beq.n	800164c <HAL_GPIO_Init+0xe4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001648:	2c12      	cmp	r4, #18
 800164a:	d110      	bne.n	800166e <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 800164c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800164e:	4034      	ands	r4, r6
 8001650:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001652:	68cc      	ldr	r4, [r1, #12]
 8001654:	40bc      	lsls	r4, r7
 8001656:	4662      	mov	r2, ip
 8001658:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 800165a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800165c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165e:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001660:	684a      	ldr	r2, [r1, #4]
 8001662:	0912      	lsrs	r2, r2, #4
 8001664:	2501      	movs	r5, #1
 8001666:	4015      	ands	r5, r2
 8001668:	409d      	lsls	r5, r3
 800166a:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 800166c:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800166e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001670:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001672:	688c      	ldr	r4, [r1, #8]
 8001674:	40bc      	lsls	r4, r7
 8001676:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8001678:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	684a      	ldr	r2, [r1, #4]
 800167c:	00d2      	lsls	r2, r2, #3
 800167e:	d5b1      	bpl.n	80015e4 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	4d18      	ldr	r5, [pc, #96]	; (80016e4 <HAL_GPIO_Init+0x17c>)
 8001682:	69ae      	ldr	r6, [r5, #24]
 8001684:	2401      	movs	r4, #1
 8001686:	4326      	orrs	r6, r4
 8001688:	61ae      	str	r6, [r5, #24]
 800168a:	69ad      	ldr	r5, [r5, #24]
 800168c:	402c      	ands	r4, r5
 800168e:	9401      	str	r4, [sp, #4]
 8001690:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001692:	089c      	lsrs	r4, r3, #2
 8001694:	1ca5      	adds	r5, r4, #2
 8001696:	00ad      	lsls	r5, r5, #2
 8001698:	4e10      	ldr	r6, [pc, #64]	; (80016dc <HAL_GPIO_Init+0x174>)
 800169a:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800169c:	2503      	movs	r5, #3
 800169e:	401d      	ands	r5, r3
 80016a0:	00ad      	lsls	r5, r5, #2
 80016a2:	260f      	movs	r6, #15
 80016a4:	40ae      	lsls	r6, r5
 80016a6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a8:	2690      	movs	r6, #144	; 0x90
 80016aa:	05f6      	lsls	r6, r6, #23
 80016ac:	42b0      	cmp	r0, r6
 80016ae:	d100      	bne.n	80016b2 <HAL_GPIO_Init+0x14a>
 80016b0:	e762      	b.n	8001578 <HAL_GPIO_Init+0x10>
 80016b2:	4e0d      	ldr	r6, [pc, #52]	; (80016e8 <HAL_GPIO_Init+0x180>)
 80016b4:	42b0      	cmp	r0, r6
 80016b6:	d008      	beq.n	80016ca <HAL_GPIO_Init+0x162>
 80016b8:	4e0c      	ldr	r6, [pc, #48]	; (80016ec <HAL_GPIO_Init+0x184>)
 80016ba:	42b0      	cmp	r0, r6
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x166>
 80016be:	4e0c      	ldr	r6, [pc, #48]	; (80016f0 <HAL_GPIO_Init+0x188>)
 80016c0:	42b0      	cmp	r0, r6
 80016c2:	d100      	bne.n	80016c6 <HAL_GPIO_Init+0x15e>
 80016c4:	e756      	b.n	8001574 <HAL_GPIO_Init+0xc>
 80016c6:	2605      	movs	r6, #5
 80016c8:	e757      	b.n	800157a <HAL_GPIO_Init+0x12>
 80016ca:	2601      	movs	r6, #1
 80016cc:	e755      	b.n	800157a <HAL_GPIO_Init+0x12>
 80016ce:	2602      	movs	r6, #2
 80016d0:	e753      	b.n	800157a <HAL_GPIO_Init+0x12>
  } 
}
 80016d2:	b002      	add	sp, #8
 80016d4:	bc04      	pop	{r2}
 80016d6:	4690      	mov	r8, r2
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	40010000 	.word	0x40010000
 80016e0:	40010400 	.word	0x40010400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000800 	.word	0x48000800
 80016f0:	48000c00 	.word	0x48000c00

080016f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	46ce      	mov	lr, r9
 80016f8:	4647      	mov	r7, r8
 80016fa:	b580      	push	{r7, lr}
 80016fc:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 80016fe:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001700:	e024      	b.n	800174c <HAL_GPIO_DeInit+0x58>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001702:	2103      	movs	r1, #3
 8001704:	4688      	mov	r8, r1
 8001706:	e001      	b.n	800170c <HAL_GPIO_DeInit+0x18>
 8001708:	2100      	movs	r1, #0
 800170a:	4688      	mov	r8, r1
 800170c:	4641      	mov	r1, r8
 800170e:	40a1      	lsls	r1, r4
 8001710:	42a9      	cmp	r1, r5
 8001712:	d045      	beq.n	80017a0 <HAL_GPIO_DeInit+0xac>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001714:	6805      	ldr	r5, [r0, #0]
 8001716:	005e      	lsls	r6, r3, #1
 8001718:	2403      	movs	r4, #3
 800171a:	40b4      	lsls	r4, r6
 800171c:	43e4      	mvns	r4, r4
 800171e:	4025      	ands	r5, r4
 8001720:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001722:	08dd      	lsrs	r5, r3, #3
 8001724:	3508      	adds	r5, #8
 8001726:	00ad      	lsls	r5, r5, #2
 8001728:	582f      	ldr	r7, [r5, r0]
 800172a:	2607      	movs	r6, #7
 800172c:	401e      	ands	r6, r3
 800172e:	00b6      	lsls	r6, r6, #2
 8001730:	210f      	movs	r1, #15
 8001732:	40b1      	lsls	r1, r6
 8001734:	438f      	bics	r7, r1
 8001736:	502f      	str	r7, [r5, r0]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001738:	6885      	ldr	r5, [r0, #8]
 800173a:	4025      	ands	r5, r4
 800173c:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173e:	6845      	ldr	r5, [r0, #4]
 8001740:	4395      	bics	r5, r2
 8001742:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001744:	68c2      	ldr	r2, [r0, #12]
 8001746:	4014      	ands	r4, r2
 8001748:	60c4      	str	r4, [r0, #12]
    }

    position++;
 800174a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800174c:	464a      	mov	r2, r9
 800174e:	40da      	lsrs	r2, r3
 8001750:	d03c      	beq.n	80017cc <HAL_GPIO_DeInit+0xd8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001752:	2201      	movs	r2, #1
 8001754:	409a      	lsls	r2, r3
 8001756:	464e      	mov	r6, r9
 8001758:	4016      	ands	r6, r2
    if (iocurrent != 0x00u)
 800175a:	d0f6      	beq.n	800174a <HAL_GPIO_DeInit+0x56>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800175c:	0899      	lsrs	r1, r3, #2
 800175e:	468c      	mov	ip, r1
 8001760:	1c8c      	adds	r4, r1, #2
 8001762:	00a4      	lsls	r4, r4, #2
 8001764:	4d1b      	ldr	r5, [pc, #108]	; (80017d4 <HAL_GPIO_DeInit+0xe0>)
 8001766:	5965      	ldr	r5, [r4, r5]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001768:	2403      	movs	r4, #3
 800176a:	401c      	ands	r4, r3
 800176c:	00a4      	lsls	r4, r4, #2
 800176e:	270f      	movs	r7, #15
 8001770:	40a7      	lsls	r7, r4
 8001772:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001774:	2190      	movs	r1, #144	; 0x90
 8001776:	05c9      	lsls	r1, r1, #23
 8001778:	4288      	cmp	r0, r1
 800177a:	d0c5      	beq.n	8001708 <HAL_GPIO_DeInit+0x14>
 800177c:	4916      	ldr	r1, [pc, #88]	; (80017d8 <HAL_GPIO_DeInit+0xe4>)
 800177e:	4288      	cmp	r0, r1
 8001780:	d008      	beq.n	8001794 <HAL_GPIO_DeInit+0xa0>
 8001782:	4916      	ldr	r1, [pc, #88]	; (80017dc <HAL_GPIO_DeInit+0xe8>)
 8001784:	4288      	cmp	r0, r1
 8001786:	d008      	beq.n	800179a <HAL_GPIO_DeInit+0xa6>
 8001788:	4915      	ldr	r1, [pc, #84]	; (80017e0 <HAL_GPIO_DeInit+0xec>)
 800178a:	4288      	cmp	r0, r1
 800178c:	d0b9      	beq.n	8001702 <HAL_GPIO_DeInit+0xe>
 800178e:	2105      	movs	r1, #5
 8001790:	4688      	mov	r8, r1
 8001792:	e7bb      	b.n	800170c <HAL_GPIO_DeInit+0x18>
 8001794:	2101      	movs	r1, #1
 8001796:	4688      	mov	r8, r1
 8001798:	e7b8      	b.n	800170c <HAL_GPIO_DeInit+0x18>
 800179a:	2102      	movs	r1, #2
 800179c:	4688      	mov	r8, r1
 800179e:	e7b5      	b.n	800170c <HAL_GPIO_DeInit+0x18>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017a0:	4c10      	ldr	r4, [pc, #64]	; (80017e4 <HAL_GPIO_DeInit+0xf0>)
 80017a2:	6825      	ldr	r5, [r4, #0]
 80017a4:	43f6      	mvns	r6, r6
 80017a6:	4035      	ands	r5, r6
 80017a8:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017aa:	6865      	ldr	r5, [r4, #4]
 80017ac:	4035      	ands	r5, r6
 80017ae:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017b0:	68a5      	ldr	r5, [r4, #8]
 80017b2:	4035      	ands	r5, r6
 80017b4:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80017b6:	68e5      	ldr	r5, [r4, #12]
 80017b8:	402e      	ands	r6, r5
 80017ba:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80017bc:	4e05      	ldr	r6, [pc, #20]	; (80017d4 <HAL_GPIO_DeInit+0xe0>)
 80017be:	4664      	mov	r4, ip
 80017c0:	3402      	adds	r4, #2
 80017c2:	00a4      	lsls	r4, r4, #2
 80017c4:	59a5      	ldr	r5, [r4, r6]
 80017c6:	43bd      	bics	r5, r7
 80017c8:	51a5      	str	r5, [r4, r6]
 80017ca:	e7a3      	b.n	8001714 <HAL_GPIO_DeInit+0x20>
  }
}
 80017cc:	bc0c      	pop	{r2, r3}
 80017ce:	4690      	mov	r8, r2
 80017d0:	4699      	mov	r9, r3
 80017d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	40010400 	.word	0x40010400

080017e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ec:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80017ee:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f0:	6181      	str	r1, [r0, #24]
 80017f2:	e7fc      	b.n	80017ee <HAL_GPIO_WritePin+0x6>

080017f4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80017f4:	6943      	ldr	r3, [r0, #20]
 80017f6:	4219      	tst	r1, r3
 80017f8:	d101      	bne.n	80017fe <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017fa:	6181      	str	r1, [r0, #24]
  }
}
 80017fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017fe:	0409      	lsls	r1, r1, #16
 8001800:	6181      	str	r1, [r0, #24]
 8001802:	e7fb      	b.n	80017fc <HAL_GPIO_TogglePin+0x8>

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180a:	d100      	bne.n	800180e <HAL_RCC_OscConfig+0xa>
 800180c:	e232      	b.n	8001c74 <HAL_RCC_OscConfig+0x470>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180e:	6803      	ldr	r3, [r0, #0]
 8001810:	07db      	lsls	r3, r3, #31
 8001812:	d526      	bpl.n	8001862 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001814:	4bae      	ldr	r3, [pc, #696]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	230c      	movs	r3, #12
 800181a:	4013      	ands	r3, r2
 800181c:	2b04      	cmp	r3, #4
 800181e:	d018      	beq.n	8001852 <HAL_RCC_OscConfig+0x4e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4bab      	ldr	r3, [pc, #684]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	230c      	movs	r3, #12
 8001826:	4013      	ands	r3, r2
 8001828:	2b08      	cmp	r3, #8
 800182a:	d00e      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d03c      	beq.n	80018ac <HAL_RCC_OscConfig+0xa8>
 8001832:	2b00      	cmp	r3, #0
 8001834:	d151      	bne.n	80018da <HAL_RCC_OscConfig+0xd6>
 8001836:	4ba6      	ldr	r3, [pc, #664]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	49a6      	ldr	r1, [pc, #664]	; (8001ad4 <HAL_RCC_OscConfig+0x2d0>)
 800183c:	400a      	ands	r2, r1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	49a5      	ldr	r1, [pc, #660]	; (8001ad8 <HAL_RCC_OscConfig+0x2d4>)
 8001844:	400a      	ands	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e036      	b.n	80018b8 <HAL_RCC_OscConfig+0xb4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800184a:	4ba1      	ldr	r3, [pc, #644]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	03db      	lsls	r3, r3, #15
 8001850:	d5ec      	bpl.n	800182c <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b9f      	ldr	r3, [pc, #636]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	039b      	lsls	r3, r3, #14
 8001858:	d503      	bpl.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800185a:	6863      	ldr	r3, [r4, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d100      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 8001860:	e20b      	b.n	8001c7a <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	079b      	lsls	r3, r3, #30
 8001866:	d573      	bpl.n	8001950 <HAL_RCC_OscConfig+0x14c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001868:	4b99      	ldr	r3, [pc, #612]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	220c      	movs	r2, #12
 800186e:	421a      	tst	r2, r3
 8001870:	d05d      	beq.n	800192e <HAL_RCC_OscConfig+0x12a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001872:	4b97      	ldr	r3, [pc, #604]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	230c      	movs	r3, #12
 8001878:	4013      	ands	r3, r2
 800187a:	2b08      	cmp	r3, #8
 800187c:	d053      	beq.n	8001926 <HAL_RCC_OscConfig+0x122>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187e:	68e3      	ldr	r3, [r4, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d100      	bne.n	8001886 <HAL_RCC_OscConfig+0x82>
 8001884:	e086      	b.n	8001994 <HAL_RCC_OscConfig+0x190>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001886:	4a92      	ldr	r2, [pc, #584]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001888:	6813      	ldr	r3, [r2, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	430b      	orrs	r3, r1
 800188e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fd84 	bl	800139c <HAL_GetTick>
 8001894:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	079b      	lsls	r3, r3, #30
 800189c:	d471      	bmi.n	8001982 <HAL_RCC_OscConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fd7d 	bl	800139c <HAL_GetTick>
 80018a2:	1b40      	subs	r0, r0, r5
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9f6      	bls.n	8001896 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e1e4      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	4a88      	ldr	r2, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80018ae:	6811      	ldr	r1, [r2, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	025b      	lsls	r3, r3, #9
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b8:	6863      	ldr	r3, [r4, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d025      	beq.n	800190a <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80018be:	f7ff fd6d 	bl	800139c <HAL_GetTick>
 80018c2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c4:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	039b      	lsls	r3, r3, #14
 80018ca:	d4ca      	bmi.n	8001862 <HAL_RCC_OscConfig+0x5e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fd66 	bl	800139c <HAL_GetTick>
 80018d0:	1b40      	subs	r0, r0, r5
 80018d2:	2864      	cmp	r0, #100	; 0x64
 80018d4:	d9f6      	bls.n	80018c4 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80018d6:	2003      	movs	r0, #3
 80018d8:	e1cd      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_OscConfig+0xee>
 80018de:	4b7c      	ldr	r3, [pc, #496]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	497c      	ldr	r1, [pc, #496]	; (8001ad4 <HAL_RCC_OscConfig+0x2d0>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	497b      	ldr	r1, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x2d4>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e7e2      	b.n	80018b8 <HAL_RCC_OscConfig+0xb4>
 80018f2:	4b77      	ldr	r3, [pc, #476]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	02d2      	lsls	r2, r2, #11
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	6819      	ldr	r1, [r3, #0]
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0252      	lsls	r2, r2, #9
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e7d6      	b.n	80018b8 <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 800190a:	f7ff fd47 	bl	800139c <HAL_GetTick>
 800190e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001910:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	039b      	lsls	r3, r3, #14
 8001916:	d5a4      	bpl.n	8001862 <HAL_RCC_OscConfig+0x5e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fd40 	bl	800139c <HAL_GetTick>
 800191c:	1b40      	subs	r0, r0, r5
 800191e:	2864      	cmp	r0, #100	; 0x64
 8001920:	d9f6      	bls.n	8001910 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
 8001924:	e1a7      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001926:	4b6a      	ldr	r3, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	03db      	lsls	r3, r3, #15
 800192c:	d4a7      	bmi.n	800187e <HAL_RCC_OscConfig+0x7a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	079b      	lsls	r3, r3, #30
 8001934:	d504      	bpl.n	8001940 <HAL_RCC_OscConfig+0x13c>
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x13c>
        return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
 800193e:	e19a      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4963      	ldr	r1, [pc, #396]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001942:	680b      	ldr	r3, [r1, #0]
 8001944:	22f8      	movs	r2, #248	; 0xf8
 8001946:	4393      	bics	r3, r2
 8001948:	6922      	ldr	r2, [r4, #16]
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	071b      	lsls	r3, r3, #28
 8001954:	d544      	bpl.n	80019e0 <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001956:	69e3      	ldr	r3, [r4, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02e      	beq.n	80019ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195c:	4a5c      	ldr	r2, [pc, #368]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 800195e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001960:	2101      	movs	r1, #1
 8001962:	430b      	orrs	r3, r1
 8001964:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff fd19 	bl	800139c <HAL_GetTick>
 800196a:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	079b      	lsls	r3, r3, #30
 8001972:	d435      	bmi.n	80019e0 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fd12 	bl	800139c <HAL_GetTick>
 8001978:	1b40      	subs	r0, r0, r5
 800197a:	2802      	cmp	r0, #2
 800197c:	d9f6      	bls.n	800196c <HAL_RCC_OscConfig+0x168>
        {
          return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e179      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4953      	ldr	r1, [pc, #332]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001984:	680b      	ldr	r3, [r1, #0]
 8001986:	22f8      	movs	r2, #248	; 0xf8
 8001988:	4393      	bics	r3, r2
 800198a:	6922      	ldr	r2, [r4, #16]
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
 8001992:	e7dd      	b.n	8001950 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 8001994:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	438b      	bics	r3, r1
 800199c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800199e:	f7ff fcfd 	bl	800139c <HAL_GetTick>
 80019a2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a4:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	079b      	lsls	r3, r3, #30
 80019aa:	d5d1      	bpl.n	8001950 <HAL_RCC_OscConfig+0x14c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fcf6 	bl	800139c <HAL_GetTick>
 80019b0:	1b40      	subs	r0, r0, r5
 80019b2:	2802      	cmp	r0, #2
 80019b4:	d9f6      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 80019b6:	2003      	movs	r0, #3
 80019b8:	e15d      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ba:	4a45      	ldr	r2, [pc, #276]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80019bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019be:	2101      	movs	r1, #1
 80019c0:	438b      	bics	r3, r1
 80019c2:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff fcea 	bl	800139c <HAL_GetTick>
 80019c8:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	079b      	lsls	r3, r3, #30
 80019d0:	d506      	bpl.n	80019e0 <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff fce3 	bl	800139c <HAL_GetTick>
 80019d6:	1b40      	subs	r0, r0, r5
 80019d8:	2802      	cmp	r0, #2
 80019da:	d9f6      	bls.n	80019ca <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_TIMEOUT;
 80019dc:	2003      	movs	r0, #3
 80019de:	e14a      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	075b      	lsls	r3, r3, #29
 80019e4:	d400      	bmi.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
 80019e6:	e07f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	d41d      	bmi.n	8001a2c <HAL_RCC_OscConfig+0x228>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4a37      	ldr	r2, [pc, #220]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 80019f2:	69d1      	ldr	r1, [r2, #28]
 80019f4:	2080      	movs	r0, #128	; 0x80
 80019f6:	0540      	lsls	r0, r0, #21
 80019f8:	4301      	orrs	r1, r0
 80019fa:	61d1      	str	r1, [r2, #28]
 80019fc:	69d3      	ldr	r3, [r2, #28]
 80019fe:	4003      	ands	r3, r0
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a04:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <HAL_RCC_OscConfig+0x2d8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	05db      	lsls	r3, r3, #23
 8001a0c:	d510      	bpl.n	8001a30 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0e:	68a3      	ldr	r3, [r4, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d021      	beq.n	8001a58 <HAL_RCC_OscConfig+0x254>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d136      	bne.n	8001a86 <HAL_RCC_OscConfig+0x282>
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001a1a:	6a1a      	ldr	r2, [r3, #32]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	621a      	str	r2, [r3, #32]
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	3103      	adds	r1, #3
 8001a26:	438a      	bics	r2, r1
 8001a28:	621a      	str	r2, [r3, #32]
 8001a2a:	e01a      	b.n	8001a62 <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	e7ea      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a30:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <HAL_RCC_OscConfig+0x2d8>)
 8001a32:	6811      	ldr	r1, [r2, #0]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fcae 	bl	800139c <HAL_GetTick>
 8001a40:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_RCC_OscConfig+0x2d8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	05db      	lsls	r3, r3, #23
 8001a48:	d4e1      	bmi.n	8001a0e <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff fca7 	bl	800139c <HAL_GetTick>
 8001a4e:	1b80      	subs	r0, r0, r6
 8001a50:	2864      	cmp	r0, #100	; 0x64
 8001a52:	d9f6      	bls.n	8001a42 <HAL_RCC_OscConfig+0x23e>
          return HAL_TIMEOUT;
 8001a54:	2003      	movs	r0, #3
 8001a56:	e10e      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001a5a:	6a13      	ldr	r3, [r2, #32]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a62:	68a3      	ldr	r3, [r4, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d024      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2ae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fc98 	bl	800139c <HAL_GetTick>
 8001a6c:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	079b      	lsls	r3, r3, #30
 8001a74:	d436      	bmi.n	8001ae4 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fc91 	bl	800139c <HAL_GetTick>
 8001a7a:	1b80      	subs	r0, r0, r6
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_RCC_OscConfig+0x2dc>)
 8001a7e:	4298      	cmp	r0, r3
 8001a80:	d9f5      	bls.n	8001a6e <HAL_RCC_OscConfig+0x26a>
        {
          return HAL_TIMEOUT;
 8001a82:	2003      	movs	r0, #3
 8001a84:	e0f7      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_OscConfig+0x29a>
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001a8c:	6a1a      	ldr	r2, [r3, #32]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	3103      	adds	r1, #3
 8001a98:	438a      	bics	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
 8001a9c:	e7e1      	b.n	8001a62 <HAL_RCC_OscConfig+0x25e>
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	6a1a      	ldr	r2, [r3, #32]
 8001aaa:	3903      	subs	r1, #3
 8001aac:	430a      	orrs	r2, r1
 8001aae:	621a      	str	r2, [r3, #32]
 8001ab0:	e7d7      	b.n	8001a62 <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fc73 	bl	800139c <HAL_GetTick>
 8001ab6:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_OscConfig+0x2cc>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	079b      	lsls	r3, r3, #30
 8001abe:	d511      	bpl.n	8001ae4 <HAL_RCC_OscConfig+0x2e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fc6c 	bl	800139c <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x2dc>)
 8001ac8:	4298      	cmp	r0, r3
 8001aca:	d9f5      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
 8001ace:	e0d2      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	fffeffff 	.word	0xfffeffff
 8001ad8:	fffbffff 	.word	0xfffbffff
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae4:	2d01      	cmp	r5, #1
 8001ae6:	d033      	beq.n	8001b50 <HAL_RCC_OscConfig+0x34c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	06db      	lsls	r3, r3, #27
 8001aec:	d510      	bpl.n	8001b10 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001aee:	6963      	ldr	r3, [r4, #20]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d033      	beq.n	8001b5c <HAL_RCC_OscConfig+0x358>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001af4:	3305      	adds	r3, #5
 8001af6:	d151      	bne.n	8001b9c <HAL_RCC_OscConfig+0x398>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001af8:	4a64      	ldr	r2, [pc, #400]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001afa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001afc:	2104      	movs	r1, #4
 8001afe:	438b      	bics	r3, r1
 8001b00:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b02:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001b04:	31f4      	adds	r1, #244	; 0xf4
 8001b06:	438b      	bics	r3, r1
 8001b08:	69a1      	ldr	r1, [r4, #24]
 8001b0a:	00c9      	lsls	r1, r1, #3
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	6a23      	ldr	r3, [r4, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d100      	bne.n	8001b18 <HAL_RCC_OscConfig+0x314>
 8001b16:	e0b2      	b.n	8001c7e <HAL_RCC_OscConfig+0x47a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b1a:	6851      	ldr	r1, [r2, #4]
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	400a      	ands	r2, r1
 8001b20:	2a08      	cmp	r2, #8
 8001b22:	d100      	bne.n	8001b26 <HAL_RCC_OscConfig+0x322>
 8001b24:	e08a      	b.n	8001c3c <HAL_RCC_OscConfig+0x438>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d04f      	beq.n	8001bca <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b2c:	6813      	ldr	r3, [r2, #0]
 8001b2e:	4958      	ldr	r1, [pc, #352]	; (8001c90 <HAL_RCC_OscConfig+0x48c>)
 8001b30:	400b      	ands	r3, r1
 8001b32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fc32 	bl	800139c <HAL_GetTick>
 8001b38:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	d57a      	bpl.n	8001c38 <HAL_RCC_OscConfig+0x434>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fc2b 	bl	800139c <HAL_GetTick>
 8001b46:	1b00      	subs	r0, r0, r4
 8001b48:	2802      	cmp	r0, #2
 8001b4a:	d9f6      	bls.n	8001b3a <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	e092      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b52:	69d3      	ldr	r3, [r2, #28]
 8001b54:	494f      	ldr	r1, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x490>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	e7c5      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b5c:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b60:	2104      	movs	r1, #4
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b68:	3903      	subs	r1, #3
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fc15 	bl	800139c <HAL_GetTick>
 8001b72:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b74:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b78:	079b      	lsls	r3, r3, #30
 8001b7a:	d406      	bmi.n	8001b8a <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b7c:	f7ff fc0e 	bl	800139c <HAL_GetTick>
 8001b80:	1b40      	subs	r0, r0, r5
 8001b82:	2802      	cmp	r0, #2
 8001b84:	d9f6      	bls.n	8001b74 <HAL_RCC_OscConfig+0x370>
          return HAL_TIMEOUT;
 8001b86:	2003      	movs	r0, #3
 8001b88:	e075      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b8a:	4940      	ldr	r1, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001b8e:	22f8      	movs	r2, #248	; 0xf8
 8001b90:	4393      	bics	r3, r2
 8001b92:	69a2      	ldr	r2, [r4, #24]
 8001b94:	00d2      	lsls	r2, r2, #3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	634b      	str	r3, [r1, #52]	; 0x34
 8001b9a:	e7b9      	b.n	8001b10 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba8:	3903      	subs	r1, #3
 8001baa:	438a      	bics	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001bae:	f7ff fbf5 	bl	800139c <HAL_GetTick>
 8001bb2:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	079b      	lsls	r3, r3, #30
 8001bba:	d5a9      	bpl.n	8001b10 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bbc:	f7ff fbee 	bl	800139c <HAL_GetTick>
 8001bc0:	1b40      	subs	r0, r0, r5
 8001bc2:	2802      	cmp	r0, #2
 8001bc4:	d9f6      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3b0>
          return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e055      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	4930      	ldr	r1, [pc, #192]	; (8001c90 <HAL_RCC_OscConfig+0x48c>)
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fbe2 	bl	800139c <HAL_GetTick>
 8001bd8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	d506      	bpl.n	8001bf0 <HAL_RCC_OscConfig+0x3ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff fbdb 	bl	800139c <HAL_GetTick>
 8001be6:	1b40      	subs	r0, r0, r5
 8001be8:	2802      	cmp	r0, #2
 8001bea:	d9f6      	bls.n	8001bda <HAL_RCC_OscConfig+0x3d6>
            return HAL_TIMEOUT;
 8001bec:	2003      	movs	r0, #3
 8001bee:	e042      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf4:	210f      	movs	r1, #15
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4925      	ldr	r1, [pc, #148]	; (8001c98 <HAL_RCC_OscConfig+0x494>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c08:	4301      	orrs	r1, r0
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	0452      	lsls	r2, r2, #17
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c18:	f7ff fbc0 	bl	800139c <HAL_GetTick>
 8001c1c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	019b      	lsls	r3, r3, #6
 8001c24:	d406      	bmi.n	8001c34 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fbb9 	bl	800139c <HAL_GetTick>
 8001c2a:	1b00      	subs	r0, r0, r4
 8001c2c:	2802      	cmp	r0, #2
 8001c2e:	d9f6      	bls.n	8001c1e <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8001c30:	2003      	movs	r0, #3
 8001c32:	e020      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        }
      }
    }
  }

  return HAL_OK;
 8001c34:	2000      	movs	r0, #0
 8001c36:	e01e      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
 8001c38:	2000      	movs	r0, #0
 8001c3a:	e01c      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_OscConfig+0x47e>
        pll_config  = RCC->CFGR;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_OscConfig+0x488>)
 8001c42:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001c4e:	4283      	cmp	r3, r0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x452>
          return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
 8001c54:	e00f      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c56:	230f      	movs	r3, #15
 8001c58:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8001c60:	2001      	movs	r0, #1
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c64:	23f0      	movs	r3, #240	; 0xf0
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	401a      	ands	r2, r3
 8001c6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d00a      	beq.n	8001c86 <HAL_RCC_OscConfig+0x482>
          return HAL_ERROR;
 8001c70:	2001      	movs	r0, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
    return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
}
 8001c76:	b002      	add	sp, #8
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e7fb      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7f9      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
        return HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
 8001c84:	e7f7      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7f5      	b.n	8001c76 <HAL_RCC_OscConfig+0x472>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	feffffff 	.word	0xfeffffff
 8001c94:	efffffff 	.word	0xefffffff
 8001c98:	ffc2ffff 	.word	0xffc2ffff

08001c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b530      	push	{r4, r5, lr}
 8001c9e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ca0:	aa04      	add	r2, sp, #16
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x64>)
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	c832      	ldmia	r0!, {r1, r4, r5}
 8001ca8:	c232      	stmia	r2!, {r1, r4, r5}
 8001caa:	0011      	movs	r1, r2
 8001cac:	6802      	ldr	r2, [r0, #0]
 8001cae:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cb0:	466a      	mov	r2, sp
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001cb6:	c213      	stmia	r2!, {r0, r1, r4}
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x68>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d119      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cc8:	0c91      	lsrs	r1, r2, #18
 8001cca:	3307      	adds	r3, #7
 8001ccc:	4019      	ands	r1, r3
 8001cce:	a804      	add	r0, sp, #16
 8001cd0:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cd2:	490c      	ldr	r1, [pc, #48]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x68>)
 8001cd4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	4669      	mov	r1, sp
 8001cda:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cdc:	03d3      	lsls	r3, r2, #15
 8001cde:	d408      	bmi.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ce0:	0163      	lsls	r3, r4, #5
 8001ce2:	1b1b      	subs	r3, r3, r4
 8001ce4:	0198      	lsls	r0, r3, #6
 8001ce6:	1ac0      	subs	r0, r0, r3
 8001ce8:	00c0      	lsls	r0, r0, #3
 8001cea:	1904      	adds	r4, r0, r4
 8001cec:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cee:	b009      	add	sp, #36	; 0x24
 8001cf0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001cf4:	f7fe fa08 	bl	8000108 <__udivsi3>
 8001cf8:	4360      	muls	r0, r4
 8001cfa:	e7f8      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001cfe:	e7f6      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x52>
 8001d00:	080033c0 	.word	0x080033c0
 8001d04:	40021000 	.word	0x40021000
 8001d08:	007a1200 	.word	0x007a1200

08001d0c <HAL_RCC_ClockConfig>:
{
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	0004      	movs	r4, r0
 8001d10:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d100      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xc>
 8001d16:	e081      	b.n	8001e1c <HAL_RCC_ClockConfig+0x110>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_ClockConfig+0x118>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	428b      	cmp	r3, r1
 8001d22:	d20b      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	493f      	ldr	r1, [pc, #252]	; (8001e24 <HAL_RCC_ClockConfig+0x118>)
 8001d26:	680b      	ldr	r3, [r1, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	432b      	orrs	r3, r5
 8001d2e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d30:	680b      	ldr	r3, [r1, #0]
 8001d32:	401a      	ands	r2, r3
 8001d34:	42aa      	cmp	r2, r5
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001d38:	2001      	movs	r0, #1
 8001d3a:	e070      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	079a      	lsls	r2, r3, #30
 8001d40:	d50e      	bpl.n	8001d60 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	075b      	lsls	r3, r3, #29
 8001d44:	d505      	bpl.n	8001d52 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d46:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001d48:	6851      	ldr	r1, [r2, #4]
 8001d4a:	23e0      	movs	r3, #224	; 0xe0
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d52:	4a35      	ldr	r2, [pc, #212]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001d54:	6853      	ldr	r3, [r2, #4]
 8001d56:	21f0      	movs	r1, #240	; 0xf0
 8001d58:	438b      	bics	r3, r1
 8001d5a:	68a1      	ldr	r1, [r4, #8]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	07db      	lsls	r3, r3, #31
 8001d64:	d52d      	bpl.n	8001dc2 <HAL_RCC_ClockConfig+0xb6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	6863      	ldr	r3, [r4, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d01e      	beq.n	8001daa <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d022      	beq.n	8001db6 <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	0792      	lsls	r2, r2, #30
 8001d76:	d553      	bpl.n	8001e20 <HAL_RCC_ClockConfig+0x114>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	492b      	ldr	r1, [pc, #172]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001d7a:	684a      	ldr	r2, [r1, #4]
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	4382      	bics	r2, r0
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001d84:	f7ff fb0a 	bl	800139c <HAL_GetTick>
 8001d88:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	401a      	ands	r2, r3
 8001d92:	6863      	ldr	r3, [r4, #4]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d013      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0xb6>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9a:	f7ff faff 	bl	800139c <HAL_GetTick>
 8001d9e:	1b80      	subs	r0, r0, r6
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_RCC_ClockConfig+0x120>)
 8001da2:	4298      	cmp	r0, r3
 8001da4:	d9f1      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001da6:	2003      	movs	r0, #3
 8001da8:	e039      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	0392      	lsls	r2, r2, #14
 8001db0:	d4e2      	bmi.n	8001d78 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	e033      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	0192      	lsls	r2, r2, #6
 8001dbc:	d4dc      	bmi.n	8001d78 <HAL_RCC_ClockConfig+0x6c>
        return HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_RCC_ClockConfig+0x118>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	42ab      	cmp	r3, r5
 8001dcc:	d90b      	bls.n	8001de6 <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4915      	ldr	r1, [pc, #84]	; (8001e24 <HAL_RCC_ClockConfig+0x118>)
 8001dd0:	680b      	ldr	r3, [r1, #0]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	432b      	orrs	r3, r5
 8001dd8:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	680b      	ldr	r3, [r1, #0]
 8001ddc:	401a      	ands	r2, r3
 8001dde:	42aa      	cmp	r2, r5
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xda>
      return HAL_ERROR;
 8001de2:	2001      	movs	r0, #1
 8001de4:	e01b      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	075b      	lsls	r3, r3, #29
 8001dea:	d506      	bpl.n	8001dfa <HAL_RCC_ClockConfig+0xee>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001dee:	6853      	ldr	r3, [r2, #4]
 8001df0:	490f      	ldr	r1, [pc, #60]	; (8001e30 <HAL_RCC_ClockConfig+0x124>)
 8001df2:	400b      	ands	r3, r1
 8001df4:	68e1      	ldr	r1, [r4, #12]
 8001df6:	430b      	orrs	r3, r1
 8001df8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dfa:	f7ff ff4f 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x11c>)
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	0912      	lsrs	r2, r2, #4
 8001e04:	230f      	movs	r3, #15
 8001e06:	4013      	ands	r3, r2
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x128>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	40d8      	lsrs	r0, r3
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x12c>)
 8001e10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fa7e 	bl	8001314 <HAL_InitTick>
  return HAL_OK;
 8001e18:	2000      	movs	r0, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
    return HAL_ERROR;
 8001e1c:	2001      	movs	r0, #1
}
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	e7fc      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
 8001e24:	40022000 	.word	0x40022000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	00001388 	.word	0x00001388
 8001e30:	fffff8ff 	.word	0xfffff8ff
 8001e34:	0800351c 	.word	0x0800351c
 8001e38:	20000014 	.word	0x20000014

08001e3c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
}
 8001e40:	4770      	bx	lr
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000014 	.word	0x20000014

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e4a:	f7ff fff7 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	0a12      	lsrs	r2, r2, #8
 8001e54:	2307      	movs	r3, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a02      	ldr	r2, [pc, #8]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	40d8      	lsrs	r0, r3
}    
 8001e5e:	bd10      	pop	{r4, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	0800352c 	.word	0x0800352c

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e6e:	6803      	ldr	r3, [r0, #0]
 8001e70:	03db      	lsls	r3, r3, #15
 8001e72:	d535      	bpl.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	d448      	bmi.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4a3a      	ldr	r2, [pc, #232]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001e7e:	69d1      	ldr	r1, [r2, #28]
 8001e80:	2080      	movs	r0, #128	; 0x80
 8001e82:	0540      	lsls	r0, r0, #21
 8001e84:	4301      	orrs	r1, r0
 8001e86:	61d1      	str	r1, [r2, #28]
 8001e88:	69d3      	ldr	r3, [r2, #28]
 8001e8a:	4003      	ands	r3, r0
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e90:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	05db      	lsls	r3, r3, #23
 8001e98:	d53b      	bpl.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	22c0      	movs	r2, #192	; 0xc0
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea4:	d013      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x66>
 8001ea6:	6861      	ldr	r1, [r4, #4]
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d00f      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001eb0:	6a18      	ldr	r0, [r3, #32]
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001eb4:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb6:	6a1e      	ldr	r6, [r3, #32]
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0249      	lsls	r1, r1, #9
 8001ebc:	4331      	orrs	r1, r6
 8001ebe:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec0:	6a19      	ldr	r1, [r3, #32]
 8001ec2:	4e2c      	ldr	r6, [pc, #176]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001ec4:	4031      	ands	r1, r6
 8001ec6:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ec8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eca:	07c3      	lsls	r3, r0, #31
 8001ecc:	d435      	bmi.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001ed0:	6a13      	ldr	r3, [r2, #32]
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	6861      	ldr	r1, [r4, #4]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001edc:	2d01      	cmp	r5, #1
 8001ede:	d03b      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	07db      	lsls	r3, r3, #31
 8001ee4:	d506      	bpl.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ee6:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001ee8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001eea:	2103      	movs	r1, #3
 8001eec:	438b      	bics	r3, r1
 8001eee:	68a1      	ldr	r1, [r4, #8]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	d533      	bpl.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001efa:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001efe:	2110      	movs	r1, #16
 8001f00:	438b      	bics	r3, r1
 8001f02:	68e1      	ldr	r1, [r4, #12]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f08:	2000      	movs	r0, #0
}
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2500      	movs	r5, #0
 8001f10:	e7bf      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fa3d 	bl	800139c <HAL_GetTick>
 8001f22:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	d4b6      	bmi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff fa36 	bl	800139c <HAL_GetTick>
 8001f30:	1b80      	subs	r0, r0, r6
 8001f32:	2864      	cmp	r0, #100	; 0x64
 8001f34:	d9f6      	bls.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001f36:	2003      	movs	r0, #3
 8001f38:	e7e7      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fa2f 	bl	800139c <HAL_GetTick>
 8001f3e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	079b      	lsls	r3, r3, #30
 8001f46:	d4c2      	bmi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7ff fa28 	bl	800139c <HAL_GetTick>
 8001f4c:	1b80      	subs	r0, r0, r6
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001f50:	4298      	cmp	r0, r3
 8001f52:	d9f5      	bls.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8001f54:	2003      	movs	r0, #3
 8001f56:	e7d8      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	69d3      	ldr	r3, [r2, #28]
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	61d3      	str	r3, [r2, #28]
 8001f60:	e7be      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8001f62:	2000      	movs	r0, #0
 8001f64:	e7d1      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	fffffcff 	.word	0xfffffcff
 8001f74:	fffeffff 	.word	0xfffeffff
 8001f78:	00001388 	.word	0x00001388
 8001f7c:	efffffff 	.word	0xefffffff

08001f80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001f84:	6802      	ldr	r2, [r0, #0]
 8001f86:	68d3      	ldr	r3, [r2, #12]
 8001f88:	21a0      	movs	r1, #160	; 0xa0
 8001f8a:	438b      	bics	r3, r1
 8001f8c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001f8e:	f7ff fa05 	bl	800139c <HAL_GetTick>
 8001f92:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	069b      	lsls	r3, r3, #26
 8001f9a:	d408      	bmi.n	8001fae <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f9c:	f7ff f9fe 	bl	800139c <HAL_GetTick>
 8001fa0:	1b40      	subs	r0, r0, r5
 8001fa2:	23fa      	movs	r3, #250	; 0xfa
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4298      	cmp	r0, r3
 8001fa8:	d9f4      	bls.n	8001f94 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8001faa:	2003      	movs	r0, #3
 8001fac:	e000      	b.n	8001fb0 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8001fae:	2000      	movs	r0, #0
}
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}

08001fb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
 8001fb4:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001fb6:	6803      	ldr	r3, [r0, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	0652      	lsls	r2, r2, #25
 8001fbc:	d501      	bpl.n	8001fc2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001fbe:	2000      	movs	r0, #0
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4252      	negs	r2, r2
 8001fc6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f9e8 	bl	800139c <HAL_GetTick>
 8001fcc:	0005      	movs	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	065b      	lsls	r3, r3, #25
 8001fd4:	d408      	bmi.n	8001fe8 <RTC_EnterInitMode+0x36>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fd6:	f7ff f9e1 	bl	800139c <HAL_GetTick>
 8001fda:	1b40      	subs	r0, r0, r5
 8001fdc:	23fa      	movs	r3, #250	; 0xfa
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d9f4      	bls.n	8001fce <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	e7eb      	b.n	8001fc0 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8001fe8:	2000      	movs	r0, #0
 8001fea:	e7e9      	b.n	8001fc0 <RTC_EnterInitMode+0xe>

08001fec <HAL_RTC_Init>:
{
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8001ff0:	d057      	beq.n	80020a2 <HAL_RTC_Init+0xb6>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ff2:	7f43      	ldrb	r3, [r0, #29]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03c      	beq.n	8002072 <HAL_RTC_Init+0x86>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	22ca      	movs	r2, #202	; 0xca
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	3a77      	subs	r2, #119	; 0x77
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002008:	0020      	movs	r0, r4
 800200a:	f7ff ffd2 	bl	8001fb2 <RTC_EnterInitMode>
 800200e:	1e05      	subs	r5, r0, #0
 8002010:	d133      	bne.n	800207a <HAL_RTC_Init+0x8e>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	6893      	ldr	r3, [r2, #8]
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <HAL_RTC_Init+0xbc>)
 8002018:	400b      	ands	r3, r1
 800201a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800201c:	6821      	ldr	r1, [r4, #0]
 800201e:	688a      	ldr	r2, [r1, #8]
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	6920      	ldr	r0, [r4, #16]
 8002024:	4303      	orrs	r3, r0
 8002026:	6960      	ldr	r0, [r4, #20]
 8002028:	4303      	orrs	r3, r0
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	68e2      	ldr	r2, [r4, #12]
 8002032:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002034:	6821      	ldr	r1, [r4, #0]
 8002036:	690b      	ldr	r3, [r1, #16]
 8002038:	68a2      	ldr	r2, [r4, #8]
 800203a:	0412      	lsls	r2, r2, #16
 800203c:	4313      	orrs	r3, r2
 800203e:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002040:	6822      	ldr	r2, [r4, #0]
 8002042:	68d3      	ldr	r3, [r2, #12]
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	438b      	bics	r3, r1
 8002048:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	d51b      	bpl.n	800208a <HAL_RTC_Init+0x9e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002052:	6822      	ldr	r2, [r4, #0]
 8002054:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002056:	4915      	ldr	r1, [pc, #84]	; (80020ac <HAL_RTC_Init+0xc0>)
 8002058:	400b      	ands	r3, r1
 800205a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002060:	69a1      	ldr	r1, [r4, #24]
 8002062:	430b      	orrs	r3, r1
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	22ff      	movs	r2, #255	; 0xff
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800206c:	2301      	movs	r3, #1
 800206e:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002070:	e009      	b.n	8002086 <HAL_RTC_Init+0x9a>
    hrtc->Lock = HAL_UNLOCKED;
 8002072:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002074:	f7ff f878 	bl	8001168 <HAL_RTC_MspInit>
 8002078:	e7be      	b.n	8001ff8 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	22ff      	movs	r2, #255	; 0xff
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002080:	2304      	movs	r3, #4
 8002082:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002084:	2501      	movs	r5, #1
}
 8002086:	0028      	movs	r0, r5
 8002088:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800208a:	0020      	movs	r0, r4
 800208c:	f7ff ff78 	bl	8001f80 <HAL_RTC_WaitForSynchro>
 8002090:	2800      	cmp	r0, #0
 8002092:	d0de      	beq.n	8002052 <HAL_RTC_Init+0x66>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800209a:	2304      	movs	r3, #4
 800209c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800209e:	2501      	movs	r5, #1
 80020a0:	e7f1      	b.n	8002086 <HAL_RTC_Init+0x9a>
    return HAL_ERROR;
 80020a2:	2501      	movs	r5, #1
 80020a4:	e7ef      	b.n	8002086 <HAL_RTC_Init+0x9a>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	ff8fffbf 	.word	0xff8fffbf
 80020ac:	fffbffff 	.word	0xfffbffff

080020b0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80020b0:	2300      	movs	r3, #0

  while (Value >= 10U)
 80020b2:	e002      	b.n	80020ba <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80020b4:	3301      	adds	r3, #1
    Value -= 10U;
 80020b6:	380a      	subs	r0, #10
 80020b8:	b2c0      	uxtb	r0, r0
  while (Value >= 10U)
 80020ba:	2809      	cmp	r0, #9
 80020bc:	d8fa      	bhi.n	80020b4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	4318      	orrs	r0, r3
}
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_RTC_SetTime>:
{
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	0004      	movs	r4, r0
 80020cc:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80020ce:	7f03      	ldrb	r3, [r0, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d100      	bne.n	80020d6 <HAL_RTC_SetTime+0xe>
 80020d4:	e070      	b.n	80021b8 <HAL_RTC_SetTime+0xf0>
 80020d6:	2301      	movs	r3, #1
 80020d8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020da:	3301      	adds	r3, #1
 80020dc:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 80020de:	2a00      	cmp	r2, #0
 80020e0:	d141      	bne.n	8002166 <HAL_RTC_SetTime+0x9e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	065b      	lsls	r3, r3, #25
 80020e8:	d401      	bmi.n	80020ee <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020ee:	7830      	ldrb	r0, [r6, #0]
 80020f0:	f7ff ffde 	bl	80020b0 <RTC_ByteToBcd2>
 80020f4:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80020f6:	7870      	ldrb	r0, [r6, #1]
 80020f8:	f7ff ffda 	bl	80020b0 <RTC_ByteToBcd2>
 80020fc:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020fe:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002100:	78b0      	ldrb	r0, [r6, #2]
 8002102:	f7ff ffd5 	bl	80020b0 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002106:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002108:	78f0      	ldrb	r0, [r6, #3]
 800210a:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800210c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	22ca      	movs	r2, #202	; 0xca
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	3a77      	subs	r2, #119	; 0x77
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800211a:	0020      	movs	r0, r4
 800211c:	f7ff ff49 	bl	8001fb2 <RTC_EnterInitMode>
 8002120:	1e07      	subs	r7, r0, #0
 8002122:	d131      	bne.n	8002188 <HAL_RTC_SetTime+0xc0>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	4825      	ldr	r0, [pc, #148]	; (80021bc <HAL_RTC_SetTime+0xf4>)
 8002128:	4005      	ands	r5, r0
 800212a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	6893      	ldr	r3, [r2, #8]
 8002130:	4923      	ldr	r1, [pc, #140]	; (80021c0 <HAL_RTC_SetTime+0xf8>)
 8002132:	400b      	ands	r3, r1
 8002134:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002136:	6821      	ldr	r1, [r4, #0]
 8002138:	688b      	ldr	r3, [r1, #8]
 800213a:	68f2      	ldr	r2, [r6, #12]
 800213c:	6930      	ldr	r0, [r6, #16]
 800213e:	4302      	orrs	r2, r0
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	68d3      	ldr	r3, [r2, #12]
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	438b      	bics	r3, r1
 800214c:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	069b      	lsls	r3, r3, #26
 8002154:	d522      	bpl.n	800219c <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800215c:	2301      	movs	r3, #1
 800215e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002160:	2300      	movs	r3, #0
 8002162:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8002164:	e018      	b.n	8002198 <HAL_RTC_SetTime+0xd0>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	065b      	lsls	r3, r3, #25
 800216c:	d401      	bmi.n	8002172 <HAL_RTC_SetTime+0xaa>
      sTime->TimeFormat = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002172:	7835      	ldrb	r5, [r6, #0]
 8002174:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002176:	7870      	ldrb	r0, [r6, #1]
 8002178:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800217a:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 800217c:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800217e:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002180:	78f0      	ldrb	r0, [r6, #3]
 8002182:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002184:	4305      	orrs	r5, r0
 8002186:	e7c2      	b.n	800210e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800218e:	2304      	movs	r3, #4
 8002190:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002192:	2300      	movs	r3, #0
 8002194:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002196:	2701      	movs	r7, #1
}
 8002198:	0038      	movs	r0, r7
 800219a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800219c:	0020      	movs	r0, r4
 800219e:	f7ff feef 	bl	8001f80 <HAL_RTC_WaitForSynchro>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d0d7      	beq.n	8002156 <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	22ff      	movs	r2, #255	; 0xff
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021ac:	2304      	movs	r3, #4
 80021ae:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80021b0:	2300      	movs	r3, #0
 80021b2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80021b4:	2701      	movs	r7, #1
 80021b6:	e7ef      	b.n	8002198 <HAL_RTC_SetTime+0xd0>
  __HAL_LOCK(hrtc);
 80021b8:	2702      	movs	r7, #2
 80021ba:	e7ed      	b.n	8002198 <HAL_RTC_SetTime+0xd0>
 80021bc:	007f7f7f 	.word	0x007f7f7f
 80021c0:	fffbffff 	.word	0xfffbffff

080021c4 <HAL_RTC_SetDate>:
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
 80021c6:	0004      	movs	r4, r0
 80021c8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80021ca:	7f03      	ldrb	r3, [r0, #28]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d061      	beq.n	8002294 <HAL_RTC_SetDate+0xd0>
 80021d0:	2301      	movs	r3, #1
 80021d2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021d4:	3301      	adds	r3, #1
 80021d6:	7743      	strb	r3, [r0, #29]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d106      	bne.n	80021ea <HAL_RTC_SetDate+0x26>
 80021dc:	784b      	ldrb	r3, [r1, #1]
 80021de:	06d9      	lsls	r1, r3, #27
 80021e0:	d503      	bpl.n	80021ea <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021e2:	2110      	movs	r1, #16
 80021e4:	438b      	bics	r3, r1
 80021e6:	330a      	adds	r3, #10
 80021e8:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d12f      	bne.n	800224e <HAL_RTC_SetDate+0x8a>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021ee:	78f0      	ldrb	r0, [r6, #3]
 80021f0:	f7ff ff5e 	bl	80020b0 <RTC_ByteToBcd2>
 80021f4:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80021f6:	7870      	ldrb	r0, [r6, #1]
 80021f8:	f7ff ff5a 	bl	80020b0 <RTC_ByteToBcd2>
 80021fc:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80021fe:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002200:	78b0      	ldrb	r0, [r6, #2]
 8002202:	f7ff ff55 	bl	80020b0 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002206:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << 13U));
 8002208:	7830      	ldrb	r0, [r6, #0]
 800220a:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800220c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	22ca      	movs	r2, #202	; 0xca
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	3a77      	subs	r2, #119	; 0x77
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800221a:	0020      	movs	r0, r4
 800221c:	f7ff fec9 	bl	8001fb2 <RTC_EnterInitMode>
 8002220:	1e06      	subs	r6, r0, #0
 8002222:	d11f      	bne.n	8002264 <HAL_RTC_SetDate+0xa0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	481c      	ldr	r0, [pc, #112]	; (8002298 <HAL_RTC_SetDate+0xd4>)
 8002228:	4005      	ands	r5, r0
 800222a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800222c:	6822      	ldr	r2, [r4, #0]
 800222e:	68d3      	ldr	r3, [r2, #12]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	438b      	bics	r3, r1
 8002234:	60d3      	str	r3, [r2, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	d51c      	bpl.n	8002278 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002244:	2301      	movs	r3, #1
 8002246:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002248:	2300      	movs	r3, #0
 800224a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 800224c:	e012      	b.n	8002274 <HAL_RTC_SetDate+0xb0>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800224e:	78f5      	ldrb	r5, [r6, #3]
 8002250:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002252:	7870      	ldrb	r0, [r6, #1]
 8002254:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002256:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8002258:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800225a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13U));
 800225c:	7830      	ldrb	r0, [r6, #0]
 800225e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002260:	4305      	orrs	r5, r0
 8002262:	e7d4      	b.n	800220e <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800226a:	2304      	movs	r3, #4
 800226c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800226e:	2300      	movs	r3, #0
 8002270:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002272:	2601      	movs	r6, #1
}
 8002274:	0030      	movs	r0, r6
 8002276:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002278:	0020      	movs	r0, r4
 800227a:	f7ff fe81 	bl	8001f80 <HAL_RTC_WaitForSynchro>
 800227e:	2800      	cmp	r0, #0
 8002280:	d0dd      	beq.n	800223e <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	22ff      	movs	r2, #255	; 0xff
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002288:	2304      	movs	r3, #4
 800228a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800228c:	2300      	movs	r3, #0
 800228e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002290:	2601      	movs	r6, #1
 8002292:	e7ef      	b.n	8002274 <HAL_RTC_SetDate+0xb0>
  __HAL_LOCK(hrtc);
 8002294:	2602      	movs	r6, #2
 8002296:	e7ed      	b.n	8002274 <HAL_RTC_SetDate+0xb0>
 8002298:	00ffff3f 	.word	0x00ffff3f

0800229c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	0006      	movs	r6, r0
 80022a0:	000c      	movs	r4, r1
 80022a2:	0017      	movs	r7, r2
 80022a4:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022a6:	6833      	ldr	r3, [r6, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4023      	ands	r3, r4
 80022ac:	1b1b      	subs	r3, r3, r4
 80022ae:	425a      	negs	r2, r3
 80022b0:	4153      	adcs	r3, r2
 80022b2:	42bb      	cmp	r3, r7
 80022b4:	d03b      	beq.n	800232e <SPI_WaitFlagStateUntilTimeout+0x92>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	1c6b      	adds	r3, r5, #1
 80022b8:	d0f5      	beq.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022ba:	f7ff f86f 	bl	800139c <HAL_GetTick>
 80022be:	9b06      	ldr	r3, [sp, #24]
 80022c0:	1ac0      	subs	r0, r0, r3
 80022c2:	42a8      	cmp	r0, r5
 80022c4:	d201      	bcs.n	80022ca <SPI_WaitFlagStateUntilTimeout+0x2e>
 80022c6:	2d00      	cmp	r5, #0
 80022c8:	d1ed      	bne.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ca:	6832      	ldr	r2, [r6, #0]
 80022cc:	6853      	ldr	r3, [r2, #4]
 80022ce:	21e0      	movs	r1, #224	; 0xe0
 80022d0:	438b      	bics	r3, r1
 80022d2:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d4:	2382      	movs	r3, #130	; 0x82
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	6872      	ldr	r2, [r6, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d00c      	beq.n	80022f8 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	019b      	lsls	r3, r3, #6
 80022e2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d016      	beq.n	8002316 <SPI_WaitFlagStateUntilTimeout+0x7a>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022e8:	235d      	movs	r3, #93	; 0x5d
 80022ea:	2201      	movs	r2, #1
 80022ec:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ee:	3b01      	subs	r3, #1
 80022f0:	2200      	movs	r2, #0
 80022f2:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 80022f4:	2003      	movs	r0, #3
 80022f6:	e01b      	b.n	8002330 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f8:	68b3      	ldr	r3, [r6, #8]
 80022fa:	2280      	movs	r2, #128	; 0x80
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	00d2      	lsls	r2, r2, #3
 8002306:	4293      	cmp	r3, r2
 8002308:	d1e9      	bne.n	80022de <SPI_WaitFlagStateUntilTimeout+0x42>
          __HAL_SPI_DISABLE(hspi);
 800230a:	6832      	ldr	r2, [r6, #0]
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	2140      	movs	r1, #64	; 0x40
 8002310:	438b      	bics	r3, r1
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e7e3      	b.n	80022de <SPI_WaitFlagStateUntilTimeout+0x42>
          SPI_RESET_CRC(hspi);
 8002316:	6832      	ldr	r2, [r6, #0]
 8002318:	6813      	ldr	r3, [r2, #0]
 800231a:	4906      	ldr	r1, [pc, #24]	; (8002334 <SPI_WaitFlagStateUntilTimeout+0x98>)
 800231c:	400b      	ands	r3, r1
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	6832      	ldr	r2, [r6, #0]
 8002322:	6811      	ldr	r1, [r2, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	019b      	lsls	r3, r3, #6
 8002328:	430b      	orrs	r3, r1
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e7dc      	b.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 800232e:	2000      	movs	r0, #0
}
 8002330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	ffffdfff 	.word	0xffffdfff

08002338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	0007      	movs	r7, r0
 800233c:	000c      	movs	r4, r1
 800233e:	0015      	movs	r5, r2
 8002340:	001e      	movs	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8002342:	e001      	b.n	8002348 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8002344:	1c73      	adds	r3, r6, #1
 8002346:	d10c      	bne.n	8002362 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	6893      	ldr	r3, [r2, #8]
 800234c:	4023      	ands	r3, r4
 800234e:	42ab      	cmp	r3, r5
 8002350:	d041      	beq.n	80023d6 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	429c      	cmp	r4, r3
 8002358:	d1f4      	bne.n	8002344 <SPI_WaitFifoStateUntilTimeout+0xc>
 800235a:	2d00      	cmp	r5, #0
 800235c:	d1f2      	bne.n	8002344 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800235e:	7b13      	ldrb	r3, [r2, #12]
 8002360:	e7f0      	b.n	8002344 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002362:	f7ff f81b 	bl	800139c <HAL_GetTick>
 8002366:	9b06      	ldr	r3, [sp, #24]
 8002368:	1ac0      	subs	r0, r0, r3
 800236a:	42b0      	cmp	r0, r6
 800236c:	d201      	bcs.n	8002372 <SPI_WaitFifoStateUntilTimeout+0x3a>
 800236e:	2e00      	cmp	r6, #0
 8002370:	d1ea      	bne.n	8002348 <SPI_WaitFifoStateUntilTimeout+0x10>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	6853      	ldr	r3, [r2, #4]
 8002376:	21e0      	movs	r1, #224	; 0xe0
 8002378:	438b      	bics	r3, r1
 800237a:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800237c:	2382      	movs	r3, #130	; 0x82
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d00c      	beq.n	80023a0 <SPI_WaitFifoStateUntilTimeout+0x68>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800238c:	429a      	cmp	r2, r3
 800238e:	d016      	beq.n	80023be <SPI_WaitFifoStateUntilTimeout+0x86>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002390:	235d      	movs	r3, #93	; 0x5d
 8002392:	2201      	movs	r2, #1
 8002394:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002396:	3b01      	subs	r3, #1
 8002398:	2200      	movs	r2, #0
 800239a:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 800239c:	2003      	movs	r0, #3
 800239e:	e01b      	b.n	80023d8 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0212      	lsls	r2, r2, #8
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <SPI_WaitFifoStateUntilTimeout+0x7a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	00d2      	lsls	r2, r2, #3
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d1e9      	bne.n	8002386 <SPI_WaitFifoStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	6813      	ldr	r3, [r2, #0]
 80023b6:	2140      	movs	r1, #64	; 0x40
 80023b8:	438b      	bics	r3, r1
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e7e3      	b.n	8002386 <SPI_WaitFifoStateUntilTimeout+0x4e>
          SPI_RESET_CRC(hspi);
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	4906      	ldr	r1, [pc, #24]	; (80023dc <SPI_WaitFifoStateUntilTimeout+0xa4>)
 80023c4:	400b      	ands	r3, r1
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6811      	ldr	r1, [r2, #0]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	019b      	lsls	r3, r3, #6
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e7dc      	b.n	8002390 <SPI_WaitFifoStateUntilTimeout+0x58>
      }
    }
  }

  return HAL_OK;
 80023d6:	2000      	movs	r0, #0
}
 80023d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	ffffdfff 	.word	0xffffdfff

080023e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	0004      	movs	r4, r0
 80023e6:	000d      	movs	r5, r1
 80023e8:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80023ea:	21c0      	movs	r1, #192	; 0xc0
 80023ec:	9200      	str	r2, [sp, #0]
 80023ee:	002b      	movs	r3, r5
 80023f0:	2200      	movs	r2, #0
 80023f2:	0149      	lsls	r1, r1, #5
 80023f4:	f7ff ffa0 	bl	8002338 <SPI_WaitFifoStateUntilTimeout>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d118      	bne.n	800242e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	9600      	str	r6, [sp, #0]
 80023fe:	002b      	movs	r3, r5
 8002400:	2200      	movs	r2, #0
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0020      	movs	r0, r4
 8002406:	f7ff ff49 	bl	800229c <SPI_WaitFlagStateUntilTimeout>
 800240a:	2800      	cmp	r0, #0
 800240c:	d116      	bne.n	800243c <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800240e:	21c0      	movs	r1, #192	; 0xc0
 8002410:	9600      	str	r6, [sp, #0]
 8002412:	002b      	movs	r3, r5
 8002414:	2200      	movs	r2, #0
 8002416:	00c9      	lsls	r1, r1, #3
 8002418:	0020      	movs	r0, r4
 800241a:	f7ff ff8d 	bl	8002338 <SPI_WaitFifoStateUntilTimeout>
 800241e:	2800      	cmp	r0, #0
 8002420:	d00a      	beq.n	8002438 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002422:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002424:	2220      	movs	r2, #32
 8002426:	4313      	orrs	r3, r2
 8002428:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800242a:	2003      	movs	r0, #3
 800242c:	e004      	b.n	8002438 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800242e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002430:	2220      	movs	r2, #32
 8002432:	4313      	orrs	r3, r2
 8002434:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002436:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002438:	b002      	add	sp, #8
 800243a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800243c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800243e:	2220      	movs	r2, #32
 8002440:	4313      	orrs	r3, r2
 8002442:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002444:	2003      	movs	r0, #3
 8002446:	e7f7      	b.n	8002438 <SPI_EndRxTxTransaction+0x58>

08002448 <HAL_SPI_Init>:
{
 8002448:	b510      	push	{r4, lr}
 800244a:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 800244c:	d05e      	beq.n	800250c <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002452:	335d      	adds	r3, #93	; 0x5d
 8002454:	5cc3      	ldrb	r3, [r0, r3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d04c      	beq.n	80024f4 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 800245a:	235d      	movs	r3, #93	; 0x5d
 800245c:	2202      	movs	r2, #2
 800245e:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8002460:	6822      	ldr	r2, [r4, #0]
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	438b      	bics	r3, r1
 8002468:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800246a:	68e3      	ldr	r3, [r4, #12]
 800246c:	22e0      	movs	r2, #224	; 0xe0
 800246e:	00d2      	lsls	r2, r2, #3
 8002470:	4293      	cmp	r3, r2
 8002472:	d945      	bls.n	8002500 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002474:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002476:	21f0      	movs	r1, #240	; 0xf0
 8002478:	0109      	lsls	r1, r1, #4
 800247a:	428b      	cmp	r3, r1
 800247c:	d005      	beq.n	800248a <HAL_SPI_Init+0x42>
 800247e:	21e0      	movs	r1, #224	; 0xe0
 8002480:	00c9      	lsls	r1, r1, #3
 8002482:	428b      	cmp	r3, r1
 8002484:	d001      	beq.n	800248a <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002486:	2100      	movs	r1, #0
 8002488:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800248a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800248c:	2900      	cmp	r1, #0
 800248e:	d105      	bne.n	800249c <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002490:	21e0      	movs	r1, #224	; 0xe0
 8002492:	00c9      	lsls	r1, r1, #3
 8002494:	428b      	cmp	r3, r1
 8002496:	d936      	bls.n	8002506 <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002498:	2302      	movs	r3, #2
 800249a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800249c:	6863      	ldr	r3, [r4, #4]
 800249e:	68a1      	ldr	r1, [r4, #8]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6921      	ldr	r1, [r4, #16]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6961      	ldr	r1, [r4, #20]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0089      	lsls	r1, r1, #2
 80024ae:	69a0      	ldr	r0, [r4, #24]
 80024b0:	4001      	ands	r1, r0
 80024b2:	430b      	orrs	r3, r1
 80024b4:	69e1      	ldr	r1, [r4, #28]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	6a21      	ldr	r1, [r4, #32]
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6821      	ldr	r1, [r4, #0]
 80024be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024c0:	4303      	orrs	r3, r0
 80024c2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80024c4:	8b61      	ldrh	r1, [r4, #26]
 80024c6:	2304      	movs	r3, #4
 80024c8:	400b      	ands	r3, r1
 80024ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024d0:	430b      	orrs	r3, r1
 80024d2:	68e1      	ldr	r1, [r4, #12]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6821      	ldr	r1, [r4, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	69d3      	ldr	r3, [r2, #28]
 80024e0:	490b      	ldr	r1, [pc, #44]	; (8002510 <HAL_SPI_Init+0xc8>)
 80024e2:	400b      	ands	r3, r1
 80024e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024ea:	335d      	adds	r3, #93	; 0x5d
 80024ec:	2201      	movs	r2, #1
 80024ee:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80024f0:	2000      	movs	r0, #0
}
 80024f2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80024f4:	335c      	adds	r3, #92	; 0x5c
 80024f6:	2200      	movs	r2, #0
 80024f8:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 80024fa:	f7fe fe45 	bl	8001188 <HAL_SPI_MspInit>
 80024fe:	e7ac      	b.n	800245a <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	0152      	lsls	r2, r2, #5
 8002504:	e7b7      	b.n	8002476 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002506:	2301      	movs	r3, #1
 8002508:	6323      	str	r3, [r4, #48]	; 0x30
 800250a:	e7c7      	b.n	800249c <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 800250c:	2001      	movs	r0, #1
 800250e:	e7f0      	b.n	80024f2 <HAL_SPI_Init+0xaa>
 8002510:	fffff7ff 	.word	0xfffff7ff

08002514 <HAL_SPI_Transmit>:
{
 8002514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	0004      	movs	r4, r0
 800251a:	9101      	str	r1, [sp, #4]
 800251c:	0016      	movs	r6, r2
 800251e:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8002520:	235c      	movs	r3, #92	; 0x5c
 8002522:	5cc3      	ldrb	r3, [r0, r3]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d100      	bne.n	800252a <HAL_SPI_Transmit+0x16>
 8002528:	e0e2      	b.n	80026f0 <HAL_SPI_Transmit+0x1dc>
 800252a:	235c      	movs	r3, #92	; 0x5c
 800252c:	2201      	movs	r2, #1
 800252e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002530:	f7fe ff34 	bl	800139c <HAL_GetTick>
 8002534:	0005      	movs	r5, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002536:	235d      	movs	r3, #93	; 0x5d
 8002538:	5ce3      	ldrb	r3, [r4, r3]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d008      	beq.n	8002550 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 800253e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002540:	235d      	movs	r3, #93	; 0x5d
 8002542:	2201      	movs	r2, #1
 8002544:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002546:	3b01      	subs	r3, #1
 8002548:	2200      	movs	r2, #0
 800254a:	54e2      	strb	r2, [r4, r3]
}
 800254c:	b005      	add	sp, #20
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8002550:	9901      	ldr	r1, [sp, #4]
 8002552:	2900      	cmp	r1, #0
 8002554:	d100      	bne.n	8002558 <HAL_SPI_Transmit+0x44>
 8002556:	e0bd      	b.n	80026d4 <HAL_SPI_Transmit+0x1c0>
 8002558:	2e00      	cmp	r6, #0
 800255a:	d100      	bne.n	800255e <HAL_SPI_Transmit+0x4a>
 800255c:	e0bc      	b.n	80026d8 <HAL_SPI_Transmit+0x1c4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	2203      	movs	r2, #3
 8002562:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002564:	2300      	movs	r3, #0
 8002566:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002568:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800256a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800256c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800256e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002570:	3241      	adds	r2, #65	; 0x41
 8002572:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8002574:	3202      	adds	r2, #2
 8002576:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8002578:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800257a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	68a2      	ldr	r2, [r4, #8]
 8002582:	429a      	cmp	r2, r3
 8002584:	d01d      	beq.n	80025c2 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	0652      	lsls	r2, r2, #25
 800258c:	d403      	bmi.n	8002596 <HAL_SPI_Transmit+0x82>
    __HAL_SPI_ENABLE(hspi);
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002596:	23e0      	movs	r3, #224	; 0xe0
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	68e2      	ldr	r2, [r4, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d935      	bls.n	800260c <HAL_SPI_Transmit+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_SPI_Transmit+0x96>
 80025a6:	2e01      	cmp	r6, #1
 80025a8:	d11d      	bne.n	80025e6 <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025ae:	8812      	ldrh	r2, [r2, #0]
 80025b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025b4:	3302      	adds	r3, #2
 80025b6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80025b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80025c0:	e011      	b.n	80025e6 <HAL_SPI_Transmit+0xd2>
    SPI_1LINE_TX(hspi);
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	01db      	lsls	r3, r3, #7
 80025ca:	430b      	orrs	r3, r1
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e7da      	b.n	8002586 <HAL_SPI_Transmit+0x72>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025d0:	f7fe fee4 	bl	800139c <HAL_GetTick>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	42b8      	cmp	r0, r7
 80025d8:	d302      	bcc.n	80025e0 <HAL_SPI_Transmit+0xcc>
 80025da:	1c7b      	adds	r3, r7, #1
 80025dc:	d000      	beq.n	80025e0 <HAL_SPI_Transmit+0xcc>
 80025de:	e07d      	b.n	80026dc <HAL_SPI_Transmit+0x1c8>
 80025e0:	2f00      	cmp	r7, #0
 80025e2:	d100      	bne.n	80025e6 <HAL_SPI_Transmit+0xd2>
 80025e4:	e07c      	b.n	80026e0 <HAL_SPI_Transmit+0x1cc>
    while (hspi->TxXferCount > 0U)
 80025e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d05a      	beq.n	80026a4 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	0792      	lsls	r2, r2, #30
 80025f4:	d5ec      	bpl.n	80025d0 <HAL_SPI_Transmit+0xbc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025fe:	3302      	adds	r3, #2
 8002600:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002602:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002604:	3b01      	subs	r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800260a:	e7ec      	b.n	80025e6 <HAL_SPI_Transmit+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_SPI_Transmit+0x102>
 8002612:	2e01      	cmp	r6, #1
 8002614:	d12f      	bne.n	8002676 <HAL_SPI_Transmit+0x162>
      if (hspi->TxXferCount > 1U)
 8002616:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d90b      	bls.n	8002636 <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002622:	8812      	ldrh	r2, [r2, #0]
 8002624:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002628:	3302      	adds	r3, #2
 800262a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800262c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800262e:	3b02      	subs	r3, #2
 8002630:	b29b      	uxth	r3, r3
 8002632:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002634:	e01f      	b.n	8002676 <HAL_SPI_Transmit+0x162>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr ++;
 800263e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002640:	3301      	adds	r3, #1
 8002642:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002644:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002646:	3b01      	subs	r3, #1
 8002648:	b29b      	uxth	r3, r3
 800264a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800264c:	e013      	b.n	8002676 <HAL_SPI_Transmit+0x162>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800264e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002656:	3301      	adds	r3, #1
 8002658:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800265a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800265c:	3b01      	subs	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002662:	e008      	b.n	8002676 <HAL_SPI_Transmit+0x162>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002664:	f7fe fe9a 	bl	800139c <HAL_GetTick>
 8002668:	1b40      	subs	r0, r0, r5
 800266a:	42b8      	cmp	r0, r7
 800266c:	d301      	bcc.n	8002672 <HAL_SPI_Transmit+0x15e>
 800266e:	1c7b      	adds	r3, r7, #1
 8002670:	d138      	bne.n	80026e4 <HAL_SPI_Transmit+0x1d0>
 8002672:	2f00      	cmp	r7, #0
 8002674:	d038      	beq.n	80026e8 <HAL_SPI_Transmit+0x1d4>
    while (hspi->TxXferCount > 0U)
 8002676:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d012      	beq.n	80026a4 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6893      	ldr	r3, [r2, #8]
 8002682:	079b      	lsls	r3, r3, #30
 8002684:	d5ee      	bpl.n	8002664 <HAL_SPI_Transmit+0x150>
        if (hspi->TxXferCount > 1U)
 8002686:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d9df      	bls.n	800264e <HAL_SPI_Transmit+0x13a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002696:	3302      	adds	r3, #2
 8002698:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800269a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800269c:	3b02      	subs	r3, #2
 800269e:	b29b      	uxth	r3, r3
 80026a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80026a2:	e7e8      	b.n	8002676 <HAL_SPI_Transmit+0x162>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026a4:	002a      	movs	r2, r5
 80026a6:	0039      	movs	r1, r7
 80026a8:	0020      	movs	r0, r4
 80026aa:	f7ff fe99 	bl	80023e0 <SPI_EndRxTxTransaction>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_Transmit+0x1a2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b2:	2320      	movs	r3, #32
 80026b4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026b6:	68a3      	ldr	r3, [r4, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_SPI_Transmit+0x1b6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026bc:	9303      	str	r3, [sp, #12]
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	9203      	str	r2, [sp, #12]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	9303      	str	r3, [sp, #12]
 80026c8:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_SPI_Transmit+0x1d8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d0:	2000      	movs	r0, #0
 80026d2:	e735      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 80026d4:	2001      	movs	r0, #1
 80026d6:	e733      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
 80026d8:	2001      	movs	r0, #1
 80026da:	e731      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
 80026de:	e72f      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
 80026e0:	2003      	movs	r0, #3
 80026e2:	e72d      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 80026e4:	2003      	movs	r0, #3
 80026e6:	e72b      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
 80026e8:	2003      	movs	r0, #3
 80026ea:	e729      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 80026ec:	2001      	movs	r0, #1
 80026ee:	e727      	b.n	8002540 <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 80026f0:	2002      	movs	r0, #2
 80026f2:	e72b      	b.n	800254c <HAL_SPI_Transmit+0x38>

080026f4 <HAL_SPI_TransmitReceive>:
{
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f6:	b083      	sub	sp, #12
 80026f8:	0004      	movs	r4, r0
 80026fa:	000e      	movs	r6, r1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8002700:	235c      	movs	r3, #92	; 0x5c
 8002702:	5cc3      	ldrb	r3, [r0, r3]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d100      	bne.n	800270a <HAL_SPI_TransmitReceive+0x16>
 8002708:	e157      	b.n	80029ba <HAL_SPI_TransmitReceive+0x2c6>
 800270a:	235c      	movs	r3, #92	; 0x5c
 800270c:	2201      	movs	r2, #1
 800270e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002710:	f7fe fe44 	bl	800139c <HAL_GetTick>
 8002714:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 8002716:	235d      	movs	r3, #93	; 0x5d
 8002718:	5ce3      	ldrb	r3, [r4, r3]
 800271a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800271c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800271e:	2b01      	cmp	r3, #1
 8002720:	d014      	beq.n	800274c <HAL_SPI_TransmitReceive+0x58>
 8002722:	2182      	movs	r1, #130	; 0x82
 8002724:	0049      	lsls	r1, r1, #1
 8002726:	428a      	cmp	r2, r1
 8002728:	d008      	beq.n	800273c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800272a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800272c:	235d      	movs	r3, #93	; 0x5d
 800272e:	2201      	movs	r2, #1
 8002730:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002732:	3b01      	subs	r3, #1
 8002734:	2200      	movs	r2, #0
 8002736:	54e2      	strb	r2, [r4, r3]
}
 8002738:	b003      	add	sp, #12
 800273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800273c:	68a2      	ldr	r2, [r4, #8]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d000      	beq.n	8002744 <HAL_SPI_TransmitReceive+0x50>
 8002742:	e12c      	b.n	800299e <HAL_SPI_TransmitReceive+0x2aa>
 8002744:	2b04      	cmp	r3, #4
 8002746:	d001      	beq.n	800274c <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 8002748:	2002      	movs	r0, #2
 800274a:	e7ef      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800274c:	2e00      	cmp	r6, #0
 800274e:	d100      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x5e>
 8002750:	e127      	b.n	80029a2 <HAL_SPI_TransmitReceive+0x2ae>
 8002752:	9b01      	ldr	r3, [sp, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d100      	bne.n	800275a <HAL_SPI_TransmitReceive+0x66>
 8002758:	e125      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x2b2>
 800275a:	2d00      	cmp	r5, #0
 800275c:	d100      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x6c>
 800275e:	e124      	b.n	80029aa <HAL_SPI_TransmitReceive+0x2b6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002760:	235d      	movs	r3, #93	; 0x5d
 8002762:	5ce3      	ldrb	r3, [r4, r3]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d002      	beq.n	800276e <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002768:	235d      	movs	r3, #93	; 0x5d
 800276a:	2205      	movs	r2, #5
 800276c:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800276e:	2300      	movs	r3, #0
 8002770:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002772:	9a01      	ldr	r2, [sp, #4]
 8002774:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002776:	2246      	movs	r2, #70	; 0x46
 8002778:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 800277a:	3a02      	subs	r2, #2
 800277c:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800277e:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002780:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002782:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8002784:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002786:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002788:	23e0      	movs	r3, #224	; 0xe0
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	68e2      	ldr	r2, [r4, #12]
 800278e:	429a      	cmp	r2, r3
 8002790:	d801      	bhi.n	8002796 <HAL_SPI_TransmitReceive+0xa2>
 8002792:	2d01      	cmp	r5, #1
 8002794:	d923      	bls.n	80027de <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002796:	6822      	ldr	r2, [r4, #0]
 8002798:	6853      	ldr	r3, [r2, #4]
 800279a:	4989      	ldr	r1, [pc, #548]	; (80029c0 <HAL_SPI_TransmitReceive+0x2cc>)
 800279c:	400b      	ands	r3, r1
 800279e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	0652      	lsls	r2, r2, #25
 80027a6:	d403      	bmi.n	80027b0 <HAL_SPI_TransmitReceive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b0:	23e0      	movs	r3, #224	; 0xe0
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	68e2      	ldr	r2, [r4, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d956      	bls.n	8002868 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ba:	6863      	ldr	r3, [r4, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_SPI_TransmitReceive+0xd0>
 80027c0:	2d01      	cmp	r5, #1
 80027c2:	d10a      	bne.n	80027da <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027c8:	8812      	ldrh	r2, [r2, #0]
 80027ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027ce:	3302      	adds	r3, #2
 80027d0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80027d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80027da:	2501      	movs	r5, #1
 80027dc:	e024      	b.n	8002828 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	6851      	ldr	r1, [r2, #4]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	015b      	lsls	r3, r3, #5
 80027e6:	430b      	orrs	r3, r1
 80027e8:	6053      	str	r3, [r2, #4]
 80027ea:	e7d9      	b.n	80027a0 <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	07d2      	lsls	r2, r2, #31
 80027f2:	d510      	bpl.n	8002816 <HAL_SPI_TransmitReceive+0x122>
 80027f4:	2246      	movs	r2, #70	; 0x46
 80027f6:	5aa2      	ldrh	r2, [r4, r2]
 80027f8:	b292      	uxth	r2, r2
 80027fa:	2a00      	cmp	r2, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002802:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002806:	3302      	adds	r3, #2
 8002808:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800280a:	2246      	movs	r2, #70	; 0x46
 800280c:	5aa3      	ldrh	r3, [r4, r2]
 800280e:	3b01      	subs	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8002814:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002816:	f7fe fdc1 	bl	800139c <HAL_GetTick>
 800281a:	1bc0      	subs	r0, r0, r7
 800281c:	9b08      	ldr	r3, [sp, #32]
 800281e:	4298      	cmp	r0, r3
 8002820:	d302      	bcc.n	8002828 <HAL_SPI_TransmitReceive+0x134>
 8002822:	3301      	adds	r3, #1
 8002824:	d000      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x134>
 8002826:	e0c2      	b.n	80029ae <HAL_SPI_TransmitReceive+0x2ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002828:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_SPI_TransmitReceive+0x148>
 8002830:	3346      	adds	r3, #70	; 0x46
 8002832:	5ae3      	ldrh	r3, [r4, r3]
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <HAL_SPI_TransmitReceive+0x148>
 800283a:	e0a4      	b.n	8002986 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	0792      	lsls	r2, r2, #30
 8002842:	d5d3      	bpl.n	80027ec <HAL_SPI_TransmitReceive+0xf8>
 8002844:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002846:	b292      	uxth	r2, r2
 8002848:	2a00      	cmp	r2, #0
 800284a:	d0cf      	beq.n	80027ec <HAL_SPI_TransmitReceive+0xf8>
 800284c:	2d01      	cmp	r5, #1
 800284e:	d1cd      	bne.n	80027ec <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002850:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002852:	8812      	ldrh	r2, [r2, #0]
 8002854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002858:	3302      	adds	r3, #2
 800285a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800285c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800285e:	3b01      	subs	r3, #1
 8002860:	b29b      	uxth	r3, r3
 8002862:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002864:	2500      	movs	r5, #0
 8002866:	e7c1      	b.n	80027ec <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002868:	6863      	ldr	r3, [r4, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x17e>
 800286e:	2d01      	cmp	r5, #1
 8002870:	d10e      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 8002872:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d90c      	bls.n	8002894 <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002884:	3302      	adds	r3, #2
 8002886:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002888:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800288a:	3b02      	subs	r3, #2
 800288c:	b29b      	uxth	r3, r3
 800288e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002890:	2501      	movs	r5, #1
 8002892:	e046      	b.n	8002922 <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	6822      	ldr	r2, [r4, #0]
 800289a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800289c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800289e:	3301      	adds	r3, #1
 80028a0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80028a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80028aa:	e7f1      	b.n	8002890 <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 80028ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80028ae:	b292      	uxth	r2, r2
 80028b0:	2a01      	cmp	r2, #1
 80028b2:	d90b      	bls.n	80028cc <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028bc:	3302      	adds	r3, #2
 80028be:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80028c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028c2:	3b02      	subs	r3, #2
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80028c8:	2500      	movs	r5, #0
 80028ca:	e03d      	b.n	8002948 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80028d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028d4:	3301      	adds	r3, #1
 80028d6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80028d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80028e0:	2500      	movs	r5, #0
 80028e2:	e031      	b.n	8002948 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	6851      	ldr	r1, [r2, #4]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80028f0:	2501      	movs	r5, #1
 80028f2:	e00b      	b.n	800290c <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028f4:	7b1b      	ldrb	r3, [r3, #12]
 80028f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028f8:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80028fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028fc:	3301      	adds	r3, #1
 80028fe:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002900:	2246      	movs	r2, #70	; 0x46
 8002902:	5aa3      	ldrh	r3, [r4, r2]
 8002904:	3b01      	subs	r3, #1
 8002906:	b29b      	uxth	r3, r3
 8002908:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800290a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800290c:	f7fe fd46 	bl	800139c <HAL_GetTick>
 8002910:	1bc0      	subs	r0, r0, r7
 8002912:	9b08      	ldr	r3, [sp, #32]
 8002914:	4298      	cmp	r0, r3
 8002916:	d301      	bcc.n	800291c <HAL_SPI_TransmitReceive+0x228>
 8002918:	3301      	adds	r3, #1
 800291a:	d14a      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x2be>
 800291c:	9b08      	ldr	r3, [sp, #32]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d049      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x2c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002922:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <HAL_SPI_TransmitReceive+0x240>
 800292a:	3346      	adds	r3, #70	; 0x46
 800292c:	5ae3      	ldrh	r3, [r4, r3]
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d028      	beq.n	8002986 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	0792      	lsls	r2, r2, #30
 800293a:	d505      	bpl.n	8002948 <HAL_SPI_TransmitReceive+0x254>
 800293c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800293e:	b292      	uxth	r2, r2
 8002940:	2a00      	cmp	r2, #0
 8002942:	d001      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x254>
 8002944:	2d01      	cmp	r5, #1
 8002946:	d0b1      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002948:	6823      	ldr	r3, [r4, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	07d2      	lsls	r2, r2, #31
 800294e:	d5dd      	bpl.n	800290c <HAL_SPI_TransmitReceive+0x218>
 8002950:	2246      	movs	r2, #70	; 0x46
 8002952:	5aa2      	ldrh	r2, [r4, r2]
 8002954:	b292      	uxth	r2, r2
 8002956:	2a00      	cmp	r2, #0
 8002958:	d0d8      	beq.n	800290c <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 800295a:	2246      	movs	r2, #70	; 0x46
 800295c:	5aa2      	ldrh	r2, [r4, r2]
 800295e:	b292      	uxth	r2, r2
 8002960:	2a01      	cmp	r2, #1
 8002962:	d9c7      	bls.n	80028f4 <HAL_SPI_TransmitReceive+0x200>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002968:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800296a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800296c:	3302      	adds	r3, #2
 800296e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002970:	2246      	movs	r2, #70	; 0x46
 8002972:	5aa3      	ldrh	r3, [r4, r2]
 8002974:	3b02      	subs	r3, #2
 8002976:	b29b      	uxth	r3, r3
 8002978:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 800297a:	5aa3      	ldrh	r3, [r4, r2]
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d9b0      	bls.n	80028e4 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 8002982:	2501      	movs	r5, #1
 8002984:	e7c2      	b.n	800290c <HAL_SPI_TransmitReceive+0x218>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002986:	003a      	movs	r2, r7
 8002988:	9908      	ldr	r1, [sp, #32]
 800298a:	0020      	movs	r0, r4
 800298c:	f7ff fd28 	bl	80023e0 <SPI_EndRxTxTransaction>
 8002990:	2800      	cmp	r0, #0
 8002992:	d100      	bne.n	8002996 <HAL_SPI_TransmitReceive+0x2a2>
 8002994:	e6ca      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002996:	2320      	movs	r3, #32
 8002998:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800299a:	2001      	movs	r0, #1
 800299c:	e6c6      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 800299e:	2002      	movs	r0, #2
 80029a0:	e6c4      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
 80029a4:	e6c2      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
 80029a6:	2001      	movs	r0, #1
 80029a8:	e6c0      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
 80029aa:	2001      	movs	r0, #1
 80029ac:	e6be      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 80029ae:	2003      	movs	r0, #3
 80029b0:	e6bc      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 80029b2:	2003      	movs	r0, #3
 80029b4:	e6ba      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
 80029b6:	2003      	movs	r0, #3
 80029b8:	e6b8      	b.n	800272c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80029ba:	2002      	movs	r0, #2
 80029bc:	e6bc      	b.n	8002738 <HAL_SPI_TransmitReceive+0x44>
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	ffffefff 	.word	0xffffefff

080029c4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029c4:	6802      	ldr	r2, [r0, #0]
 80029c6:	6813      	ldr	r3, [r2, #0]
 80029c8:	4906      	ldr	r1, [pc, #24]	; (80029e4 <UART_EndRxTransfer+0x20>)
 80029ca:	400b      	ands	r3, r1
 80029cc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ce:	6802      	ldr	r2, [r0, #0]
 80029d0:	6893      	ldr	r3, [r2, #8]
 80029d2:	3123      	adds	r1, #35	; 0x23
 80029d4:	31ff      	adds	r1, #255	; 0xff
 80029d6:	438b      	bics	r3, r1
 80029d8:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029da:	2320      	movs	r3, #32
 80029dc:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	6603      	str	r3, [r0, #96]	; 0x60
}
 80029e2:	4770      	bx	lr
 80029e4:	fffffedf 	.word	0xfffffedf

080029e8 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80029ea:	2b21      	cmp	r3, #33	; 0x21
 80029ec:	d000      	beq.n	80029f0 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80029ee:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80029f0:	3331      	adds	r3, #49	; 0x31
 80029f2:	5ac3      	ldrh	r3, [r0, r3]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80029fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	6802      	ldr	r2, [r0, #0]
 8002a00:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002a02:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a04:	3301      	adds	r3, #1
 8002a06:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002a08:	2252      	movs	r2, #82	; 0x52
 8002a0a:	5a83      	ldrh	r3, [r0, r2]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	5283      	strh	r3, [r0, r2]
}
 8002a12:	e7ec      	b.n	80029ee <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a14:	6802      	ldr	r2, [r0, #0]
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	438b      	bics	r3, r1
 8002a1c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a1e:	6802      	ldr	r2, [r0, #0]
 8002a20:	6813      	ldr	r3, [r2, #0]
 8002a22:	3940      	subs	r1, #64	; 0x40
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e7e1      	b.n	80029ee <UART_TxISR_8BIT+0x6>

08002a2a <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a2a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002a2c:	2b21      	cmp	r3, #33	; 0x21
 8002a2e:	d000      	beq.n	8002a32 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002a30:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002a32:	3331      	adds	r3, #49	; 0x31
 8002a34:	5ac3      	ldrh	r3, [r0, r3]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002a3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	05db      	lsls	r3, r3, #23
 8002a42:	0ddb      	lsrs	r3, r3, #23
 8002a44:	6802      	ldr	r2, [r0, #0]
 8002a46:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002a48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002a4e:	2252      	movs	r2, #82	; 0x52
 8002a50:	5a83      	ldrh	r3, [r0, r2]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	5283      	strh	r3, [r0, r2]
}
 8002a58:	e7ea      	b.n	8002a30 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a5a:	6802      	ldr	r2, [r0, #0]
 8002a5c:	6813      	ldr	r3, [r2, #0]
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	438b      	bics	r3, r1
 8002a62:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a64:	6802      	ldr	r2, [r0, #0]
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	3940      	subs	r1, #64	; 0x40
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e7df      	b.n	8002a30 <UART_TxISR_16BIT+0x6>

08002a70 <HAL_UART_DeInit>:
{
 8002a70:	b570      	push	{r4, r5, r6, lr}
 8002a72:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002a74:	d016      	beq.n	8002aa4 <HAL_UART_DeInit+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a76:	2324      	movs	r3, #36	; 0x24
 8002a78:	6743      	str	r3, [r0, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002a7a:	6802      	ldr	r2, [r0, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	438b      	bics	r3, r1
 8002a82:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	2500      	movs	r5, #0
 8002a88:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002a8a:	6803      	ldr	r3, [r0, #0]
 8002a8c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002a92:	f7fe fbe7 	bl	8001264 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a96:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8002a98:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8002a9a:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002a9c:	2370      	movs	r3, #112	; 0x70
 8002a9e:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8002aa0:	2000      	movs	r0, #0
}
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e7fc      	b.n	8002aa2 <HAL_UART_DeInit+0x32>

08002aa8 <HAL_UART_Transmit_IT>:
{
 8002aa8:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8002aaa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d136      	bne.n	8002b1e <HAL_UART_Transmit_IT+0x76>
    if ((pData == NULL) || (Size == 0U))
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	d036      	beq.n	8002b22 <HAL_UART_Transmit_IT+0x7a>
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d036      	beq.n	8002b26 <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab8:	6883      	ldr	r3, [r0, #8]
 8002aba:	2480      	movs	r4, #128	; 0x80
 8002abc:	0164      	lsls	r4, r4, #5
 8002abe:	42a3      	cmp	r3, r4
 8002ac0:	d020      	beq.n	8002b04 <HAL_UART_Transmit_IT+0x5c>
    __HAL_LOCK(huart);
 8002ac2:	2470      	movs	r4, #112	; 0x70
 8002ac4:	5d04      	ldrb	r4, [r0, r4]
 8002ac6:	2c01      	cmp	r4, #1
 8002ac8:	d02f      	beq.n	8002b2a <HAL_UART_Transmit_IT+0x82>
 8002aca:	2470      	movs	r4, #112	; 0x70
 8002acc:	2501      	movs	r5, #1
 8002ace:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 8002ad0:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ad2:	2150      	movs	r1, #80	; 0x50
 8002ad4:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 8002ad6:	3102      	adds	r1, #2
 8002ad8:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 8002ada:	2200      	movs	r2, #0
 8002adc:	6642      	str	r2, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ade:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ae0:	3221      	adds	r2, #33	; 0x21
 8002ae2:	6742      	str	r2, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	0152      	lsls	r2, r2, #5
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d012      	beq.n	8002b12 <HAL_UART_Transmit_IT+0x6a>
      huart->TxISR = UART_TxISR_8BIT;
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_UART_Transmit_IT+0x88>)
 8002aee:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8002af0:	2370      	movs	r3, #112	; 0x70
 8002af2:	2200      	movs	r2, #0
 8002af4:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002af6:	6802      	ldr	r2, [r0, #0]
 8002af8:	6813      	ldr	r3, [r2, #0]
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002b00:	2000      	movs	r0, #0
 8002b02:	e00d      	b.n	8002b20 <HAL_UART_Transmit_IT+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b04:	6904      	ldr	r4, [r0, #16]
 8002b06:	2c00      	cmp	r4, #0
 8002b08:	d1db      	bne.n	8002ac2 <HAL_UART_Transmit_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b0a:	07cc      	lsls	r4, r1, #31
 8002b0c:	d5d9      	bpl.n	8002ac2 <HAL_UART_Transmit_IT+0x1a>
        return  HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
 8002b10:	e006      	b.n	8002b20 <HAL_UART_Transmit_IT+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b12:	6903      	ldr	r3, [r0, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e9      	bne.n	8002aec <HAL_UART_Transmit_IT+0x44>
      huart->TxISR = UART_TxISR_16BIT;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_UART_Transmit_IT+0x8c>)
 8002b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8002b1c:	e7e8      	b.n	8002af0 <HAL_UART_Transmit_IT+0x48>
    return HAL_BUSY;
 8002b1e:	2002      	movs	r0, #2
}
 8002b20:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002b22:	2001      	movs	r0, #1
 8002b24:	e7fc      	b.n	8002b20 <HAL_UART_Transmit_IT+0x78>
 8002b26:	2001      	movs	r0, #1
 8002b28:	e7fa      	b.n	8002b20 <HAL_UART_Transmit_IT+0x78>
    __HAL_LOCK(huart);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	e7f8      	b.n	8002b20 <HAL_UART_Transmit_IT+0x78>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	080029e9 	.word	0x080029e9
 8002b34:	08002a2b 	.word	0x08002a2b

08002b38 <HAL_UART_Receive_IT>:
{
 8002b38:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b3a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d15c      	bne.n	8002bfa <HAL_UART_Receive_IT+0xc2>
    if ((pData == NULL) || (Size == 0U))
 8002b40:	2900      	cmp	r1, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_UART_Receive_IT+0xc6>
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d05c      	beq.n	8002c02 <HAL_UART_Receive_IT+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	6883      	ldr	r3, [r0, #8]
 8002b4a:	2480      	movs	r4, #128	; 0x80
 8002b4c:	0164      	lsls	r4, r4, #5
 8002b4e:	42a3      	cmp	r3, r4
 8002b50:	d01a      	beq.n	8002b88 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8002b52:	2470      	movs	r4, #112	; 0x70
 8002b54:	5d04      	ldrb	r4, [r0, r4]
 8002b56:	2c01      	cmp	r4, #1
 8002b58:	d055      	beq.n	8002c06 <HAL_UART_Receive_IT+0xce>
 8002b5a:	2470      	movs	r4, #112	; 0x70
 8002b5c:	2501      	movs	r5, #1
 8002b5e:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 8002b60:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002b62:	2158      	movs	r1, #88	; 0x58
 8002b64:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 8002b66:	3102      	adds	r1, #2
 8002b68:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	0152      	lsls	r2, r2, #5
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00f      	beq.n	8002b96 <HAL_UART_Receive_IT+0x5e>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11c      	bne.n	8002bb4 <HAL_UART_Receive_IT+0x7c>
 8002b7a:	6903      	ldr	r3, [r0, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d115      	bne.n	8002bac <HAL_UART_Receive_IT+0x74>
 8002b80:	335c      	adds	r3, #92	; 0x5c
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	52c2      	strh	r2, [r0, r3]
 8002b86:	e018      	b.n	8002bba <HAL_UART_Receive_IT+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b88:	6904      	ldr	r4, [r0, #16]
 8002b8a:	2c00      	cmp	r4, #0
 8002b8c:	d1e1      	bne.n	8002b52 <HAL_UART_Receive_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b8e:	07cc      	lsls	r4, r1, #31
 8002b90:	d5df      	bpl.n	8002b52 <HAL_UART_Receive_IT+0x1a>
        return  HAL_ERROR;
 8002b92:	2001      	movs	r0, #1
 8002b94:	e032      	b.n	8002bfc <HAL_UART_Receive_IT+0xc4>
    UART_MASK_COMPUTATION(huart);
 8002b96:	6903      	ldr	r3, [r0, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <HAL_UART_Receive_IT+0x6c>
 8002b9c:	335c      	adds	r3, #92	; 0x5c
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_UART_Receive_IT+0xd4>)
 8002ba0:	52c2      	strh	r2, [r0, r3]
 8002ba2:	e00a      	b.n	8002bba <HAL_UART_Receive_IT+0x82>
 8002ba4:	235c      	movs	r3, #92	; 0x5c
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	52c2      	strh	r2, [r0, r3]
 8002baa:	e006      	b.n	8002bba <HAL_UART_Receive_IT+0x82>
 8002bac:	235c      	movs	r3, #92	; 0x5c
 8002bae:	227f      	movs	r2, #127	; 0x7f
 8002bb0:	52c2      	strh	r2, [r0, r3]
 8002bb2:	e002      	b.n	8002bba <HAL_UART_Receive_IT+0x82>
 8002bb4:	235c      	movs	r3, #92	; 0x5c
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bbe:	3322      	adds	r3, #34	; 0x22
 8002bc0:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc2:	6802      	ldr	r2, [r0, #0]
 8002bc4:	6893      	ldr	r3, [r2, #8]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	6882      	ldr	r2, [r0, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d00b      	beq.n	8002bee <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_8BIT;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_UART_Receive_IT+0xd8>)
 8002bd8:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8002bda:	2370      	movs	r3, #112	; 0x70
 8002bdc:	2200      	movs	r2, #0
 8002bde:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002be0:	6802      	ldr	r2, [r0, #0]
 8002be2:	6811      	ldr	r1, [r2, #0]
 8002be4:	33b0      	adds	r3, #176	; 0xb0
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8002bea:	2000      	movs	r0, #0
 8002bec:	e006      	b.n	8002bfc <HAL_UART_Receive_IT+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bee:	6903      	ldr	r3, [r0, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_UART_Receive_IT+0x9e>
      huart->RxISR = UART_RxISR_16BIT;
 8002bf4:	4b07      	ldr	r3, [pc, #28]	; (8002c14 <HAL_UART_Receive_IT+0xdc>)
 8002bf6:	6603      	str	r3, [r0, #96]	; 0x60
 8002bf8:	e7ef      	b.n	8002bda <HAL_UART_Receive_IT+0xa2>
    return HAL_BUSY;
 8002bfa:	2002      	movs	r0, #2
}
 8002bfc:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e7fc      	b.n	8002bfc <HAL_UART_Receive_IT+0xc4>
 8002c02:	2001      	movs	r0, #1
 8002c04:	e7fa      	b.n	8002bfc <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8002c06:	2002      	movs	r0, #2
 8002c08:	e7f8      	b.n	8002bfc <HAL_UART_Receive_IT+0xc4>
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	000001ff 	.word	0x000001ff
 8002c10:	08002c35 	.word	0x08002c35
 8002c14:	08002c99 	.word	0x08002c99

08002c18 <HAL_UART_TxCpltCallback>:
}
 8002c18:	4770      	bx	lr

08002c1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c1c:	6802      	ldr	r2, [r0, #0]
 8002c1e:	6813      	ldr	r3, [r2, #0]
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	438b      	bics	r3, r1
 8002c24:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c26:	2320      	movs	r3, #32
 8002c28:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c2e:	f7ff fff3 	bl	8002c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002c34:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 8002c36:	235c      	movs	r3, #92	; 0x5c
 8002c38:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c3a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8002c3c:	2a22      	cmp	r2, #34	; 0x22
 8002c3e:	d005      	beq.n	8002c4c <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c40:	6802      	ldr	r2, [r0, #0]
 8002c42:	6993      	ldr	r3, [r2, #24]
 8002c44:	2108      	movs	r1, #8
 8002c46:	430b      	orrs	r3, r1
 8002c48:	6193      	str	r3, [r2, #24]
  }
}
 8002c4a:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c4c:	6802      	ldr	r2, [r0, #0]
 8002c4e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4013      	ands	r3, r2
 8002c54:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002c56:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8002c58:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002c5e:	225a      	movs	r2, #90	; 0x5a
 8002c60:	5a83      	ldrh	r3, [r0, r2]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002c68:	5a83      	ldrh	r3, [r0, r2]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ec      	bne.n	8002c4a <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c70:	6802      	ldr	r2, [r0, #0]
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <UART_RxISR_8BIT+0x60>)
 8002c76:	400b      	ands	r3, r1
 8002c78:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7a:	6802      	ldr	r2, [r0, #0]
 8002c7c:	6893      	ldr	r3, [r2, #8]
 8002c7e:	3123      	adds	r1, #35	; 0x23
 8002c80:	31ff      	adds	r1, #255	; 0xff
 8002c82:	438b      	bics	r3, r1
 8002c84:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002c86:	2320      	movs	r3, #32
 8002c88:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002c8e:	f7fd fe17 	bl	80008c0 <HAL_UART_RxCpltCallback>
 8002c92:	e7da      	b.n	8002c4a <UART_RxISR_8BIT+0x16>
 8002c94:	fffffedf 	.word	0xfffffedf

08002c98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002c98:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002c9a:	235c      	movs	r3, #92	; 0x5c
 8002c9c:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c9e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002ca0:	2b22      	cmp	r3, #34	; 0x22
 8002ca2:	d005      	beq.n	8002cb0 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ca4:	6802      	ldr	r2, [r0, #0]
 8002ca6:	6993      	ldr	r3, [r2, #24]
 8002ca8:	2108      	movs	r1, #8
 8002caa:	430b      	orrs	r3, r1
 8002cac:	6193      	str	r3, [r2, #24]
  }
}
 8002cae:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cb0:	6803      	ldr	r3, [r0, #0]
 8002cb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002cb8:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8002cba:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002cc0:	225a      	movs	r2, #90	; 0x5a
 8002cc2:	5a83      	ldrh	r3, [r0, r2]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002cca:	5a83      	ldrh	r3, [r0, r2]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ed      	bne.n	8002cae <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd2:	6802      	ldr	r2, [r0, #0]
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <UART_RxISR_16BIT+0x60>)
 8002cd8:	400b      	ands	r3, r1
 8002cda:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	6802      	ldr	r2, [r0, #0]
 8002cde:	6893      	ldr	r3, [r2, #8]
 8002ce0:	3123      	adds	r1, #35	; 0x23
 8002ce2:	31ff      	adds	r1, #255	; 0xff
 8002ce4:	438b      	bics	r3, r1
 8002ce6:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002cf0:	f7fd fde6 	bl	80008c0 <HAL_UART_RxCpltCallback>
 8002cf4:	e7db      	b.n	8002cae <UART_RxISR_16BIT+0x16>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	fffffedf 	.word	0xfffffedf

08002cfc <HAL_UART_IRQHandler>:
{
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d00:	6801      	ldr	r1, [r0, #0]
 8002d02:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d04:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d06:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d08:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_UART_IRQHandler+0x144>)
 8002d0a:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8002d0c:	d10a      	bne.n	8002d24 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d0e:	069e      	lsls	r6, r3, #26
 8002d10:	d508      	bpl.n	8002d24 <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d12:	0686      	lsls	r6, r0, #26
 8002d14:	d506      	bpl.n	8002d24 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8002d16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d100      	bne.n	8002d1e <HAL_UART_IRQHandler+0x22>
 8002d1c:	e08b      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
        huart->RxISR(huart);
 8002d1e:	0020      	movs	r0, r4
 8002d20:	4798      	blx	r3
 8002d22:	e088      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
  if ((errorflags != 0U)
 8002d24:	2a00      	cmp	r2, #0
 8002d26:	d078      	beq.n	8002e1a <HAL_UART_IRQHandler+0x11e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	402a      	ands	r2, r5
 8002d2c:	d103      	bne.n	8002d36 <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002d2e:	2590      	movs	r5, #144	; 0x90
 8002d30:	006d      	lsls	r5, r5, #1
 8002d32:	4228      	tst	r0, r5
 8002d34:	d071      	beq.n	8002e1a <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d36:	07dd      	lsls	r5, r3, #31
 8002d38:	d506      	bpl.n	8002d48 <HAL_UART_IRQHandler+0x4c>
 8002d3a:	05c5      	lsls	r5, r0, #23
 8002d3c:	d504      	bpl.n	8002d48 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d3e:	2501      	movs	r5, #1
 8002d40:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d42:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002d44:	4329      	orrs	r1, r5
 8002d46:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d48:	0799      	lsls	r1, r3, #30
 8002d4a:	d508      	bpl.n	8002d5e <HAL_UART_IRQHandler+0x62>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d50:	6821      	ldr	r1, [r4, #0]
 8002d52:	2502      	movs	r5, #2
 8002d54:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d56:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002d58:	3502      	adds	r5, #2
 8002d5a:	4329      	orrs	r1, r5
 8002d5c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d5e:	0759      	lsls	r1, r3, #29
 8002d60:	d508      	bpl.n	8002d74 <HAL_UART_IRQHandler+0x78>
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	2504      	movs	r5, #4
 8002d6a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d6c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002d6e:	3d02      	subs	r5, #2
 8002d70:	4329      	orrs	r1, r5
 8002d72:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d74:	0719      	lsls	r1, r3, #28
 8002d76:	d509      	bpl.n	8002d8c <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d78:	0681      	lsls	r1, r0, #26
 8002d7a:	d401      	bmi.n	8002d80 <HAL_UART_IRQHandler+0x84>
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	2108      	movs	r1, #8
 8002d84:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d86:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d8c:	051a      	lsls	r2, r3, #20
 8002d8e:	d509      	bpl.n	8002da4 <HAL_UART_IRQHandler+0xa8>
 8002d90:	0142      	lsls	r2, r0, #5
 8002d92:	d507      	bpl.n	8002da4 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0109      	lsls	r1, r1, #4
 8002d9a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d9c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002d9e:	2120      	movs	r1, #32
 8002da0:	430a      	orrs	r2, r1
 8002da2:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002da4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002da6:	2a00      	cmp	r2, #0
 8002da8:	d045      	beq.n	8002e36 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002daa:	069b      	lsls	r3, r3, #26
 8002dac:	d506      	bpl.n	8002dbc <HAL_UART_IRQHandler+0xc0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dae:	0683      	lsls	r3, r0, #26
 8002db0:	d504      	bpl.n	8002dbc <HAL_UART_IRQHandler+0xc0>
        if (huart->RxISR != NULL)
 8002db2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_IRQHandler+0xc0>
          huart->RxISR(huart);
 8002db8:	0020      	movs	r0, r4
 8002dba:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002dbc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	065b      	lsls	r3, r3, #25
 8002dc4:	d402      	bmi.n	8002dcc <HAL_UART_IRQHandler+0xd0>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dc6:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dc8:	4213      	tst	r3, r2
 8002dca:	d020      	beq.n	8002e0e <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8002dcc:	0020      	movs	r0, r4
 8002dce:	f7ff fdf9 	bl	80029c4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	0652      	lsls	r2, r2, #25
 8002dd8:	d515      	bpl.n	8002e06 <HAL_UART_IRQHandler+0x10a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	438a      	bics	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002de2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_UART_IRQHandler+0x102>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002de8:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_UART_IRQHandler+0x148>)
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002dee:	f7fe fb96 	bl	800151e <HAL_DMA_Abort_IT>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d01f      	beq.n	8002e36 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002df8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dfa:	4798      	blx	r3
 8002dfc:	e01b      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
            HAL_UART_ErrorCallback(huart);
 8002dfe:	0020      	movs	r0, r4
 8002e00:	f7fd fdf2 	bl	80009e8 <HAL_UART_ErrorCallback>
 8002e04:	e017      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
          HAL_UART_ErrorCallback(huart);
 8002e06:	0020      	movs	r0, r4
 8002e08:	f7fd fdee 	bl	80009e8 <HAL_UART_ErrorCallback>
 8002e0c:	e013      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
        HAL_UART_ErrorCallback(huart);
 8002e0e:	0020      	movs	r0, r4
 8002e10:	f7fd fdea 	bl	80009e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002e18:	e00d      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e1a:	061a      	lsls	r2, r3, #24
 8002e1c:	d507      	bpl.n	8002e2e <HAL_UART_IRQHandler+0x132>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e1e:	0602      	lsls	r2, r0, #24
 8002e20:	d505      	bpl.n	8002e2e <HAL_UART_IRQHandler+0x132>
    if (huart->TxISR != NULL)
 8002e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <HAL_UART_IRQHandler+0x13a>
      huart->TxISR(huart);
 8002e28:	0020      	movs	r0, r4
 8002e2a:	4798      	blx	r3
 8002e2c:	e003      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	d501      	bpl.n	8002e36 <HAL_UART_IRQHandler+0x13a>
 8002e32:	0643      	lsls	r3, r0, #25
 8002e34:	d400      	bmi.n	8002e38 <HAL_UART_IRQHandler+0x13c>
}
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8002e38:	0020      	movs	r0, r4
 8002e3a:	f7ff feee 	bl	8002c1a <UART_EndTransmit_IT>
    return;
 8002e3e:	e7fa      	b.n	8002e36 <HAL_UART_IRQHandler+0x13a>
 8002e40:	0000080f 	.word	0x0000080f
 8002e44:	08002e49 	.word	0x08002e49

08002e48 <UART_DMAAbortOnError>:
{
 8002e48:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	225a      	movs	r2, #90	; 0x5a
 8002e50:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8002e52:	3a08      	subs	r2, #8
 8002e54:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8002e56:	f7fd fdc7 	bl	80009e8 <HAL_UART_ErrorCallback>
}
 8002e5a:	bd10      	pop	{r4, pc}

08002e5c <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 8002e5c:	6802      	ldr	r2, [r0, #0]
 8002e5e:	6993      	ldr	r3, [r2, #24]
 8002e60:	2104      	movs	r1, #4
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6193      	str	r3, [r2, #24]
}
 8002e66:	4770      	bx	lr

08002e68 <UART_SetConfig>:
{
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e6c:	6883      	ldr	r3, [r0, #8]
 8002e6e:	6902      	ldr	r2, [r0, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	6942      	ldr	r2, [r0, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	69c2      	ldr	r2, [r0, #28]
 8002e78:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e7a:	6801      	ldr	r1, [r0, #0]
 8002e7c:	680a      	ldr	r2, [r1, #0]
 8002e7e:	4864      	ldr	r0, [pc, #400]	; (8003010 <UART_SetConfig+0x1a8>)
 8002e80:	4002      	ands	r2, r0
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e86:	6822      	ldr	r2, [r4, #0]
 8002e88:	6853      	ldr	r3, [r2, #4]
 8002e8a:	4962      	ldr	r1, [pc, #392]	; (8003014 <UART_SetConfig+0x1ac>)
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	68e1      	ldr	r1, [r4, #12]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002e94:	6a22      	ldr	r2, [r4, #32]
 8002e96:	69a3      	ldr	r3, [r4, #24]
 8002e98:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9a:	6821      	ldr	r1, [r4, #0]
 8002e9c:	688b      	ldr	r3, [r1, #8]
 8002e9e:	485e      	ldr	r0, [pc, #376]	; (8003018 <UART_SetConfig+0x1b0>)
 8002ea0:	4003      	ands	r3, r0
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea6:	4b5d      	ldr	r3, [pc, #372]	; (800301c <UART_SetConfig+0x1b4>)
 8002ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eaa:	2303      	movs	r3, #3
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d024      	beq.n	8002efc <UART_SetConfig+0x94>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <UART_SetConfig+0x5a>
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d022      	beq.n	8002f00 <UART_SetConfig+0x98>
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d022      	beq.n	8002f04 <UART_SetConfig+0x9c>
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	e000      	b.n	8002ec4 <UART_SetConfig+0x5c>
 8002ec2:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec4:	2280      	movs	r2, #128	; 0x80
 8002ec6:	0212      	lsls	r2, r2, #8
 8002ec8:	69e1      	ldr	r1, [r4, #28]
 8002eca:	4291      	cmp	r1, r2
 8002ecc:	d01c      	beq.n	8002f08 <UART_SetConfig+0xa0>
    switch (clocksource)
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d100      	bne.n	8002ed4 <UART_SetConfig+0x6c>
 8002ed2:	e07e      	b.n	8002fd2 <UART_SetConfig+0x16a>
 8002ed4:	d965      	bls.n	8002fa2 <UART_SetConfig+0x13a>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d100      	bne.n	8002edc <UART_SetConfig+0x74>
 8002eda:	e086      	b.n	8002fea <UART_SetConfig+0x182>
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d000      	beq.n	8002ee2 <UART_SetConfig+0x7a>
 8002ee0:	e08f      	b.n	8003002 <UART_SetConfig+0x19a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	0858      	lsrs	r0, r3, #1
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	021b      	lsls	r3, r3, #8
 8002eea:	469c      	mov	ip, r3
 8002eec:	4460      	add	r0, ip
 8002eee:	6861      	ldr	r1, [r4, #4]
 8002ef0:	f7fd f90a 	bl	8000108 <__udivsi3>
 8002ef4:	0403      	lsls	r3, r0, #16
 8002ef6:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ef8:	2000      	movs	r0, #0
        break;
 8002efa:	e05f      	b.n	8002fbc <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002efc:	2304      	movs	r3, #4
 8002efe:	e7e1      	b.n	8002ec4 <UART_SetConfig+0x5c>
 8002f00:	2308      	movs	r3, #8
 8002f02:	e7df      	b.n	8002ec4 <UART_SetConfig+0x5c>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e7dd      	b.n	8002ec4 <UART_SetConfig+0x5c>
    switch (clocksource)
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d02e      	beq.n	8002f6a <UART_SetConfig+0x102>
 8002f0c:	d910      	bls.n	8002f30 <UART_SetConfig+0xc8>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d037      	beq.n	8002f82 <UART_SetConfig+0x11a>
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d142      	bne.n	8002f9c <UART_SetConfig+0x134>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f16:	6863      	ldr	r3, [r4, #4]
 8002f18:	0858      	lsrs	r0, r3, #1
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	025b      	lsls	r3, r3, #9
 8002f1e:	469c      	mov	ip, r3
 8002f20:	4460      	add	r0, ip
 8002f22:	6861      	ldr	r1, [r4, #4]
 8002f24:	f7fd f8f0 	bl	8000108 <__udivsi3>
 8002f28:	0403      	lsls	r3, r0, #16
 8002f2a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f2c:	2000      	movs	r0, #0
        break;
 8002f2e:	e00d      	b.n	8002f4c <UART_SetConfig+0xe4>
    switch (clocksource)
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d133      	bne.n	8002f9c <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f34:	f7fe ff88 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f38:	0040      	lsls	r0, r0, #1
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	18c0      	adds	r0, r0, r3
 8002f40:	6861      	ldr	r1, [r4, #4]
 8002f42:	f7fd f8e1 	bl	8000108 <__udivsi3>
 8002f46:	0403      	lsls	r3, r0, #16
 8002f48:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4c:	4934      	ldr	r1, [pc, #208]	; (8003020 <UART_SetConfig+0x1b8>)
 8002f4e:	001a      	movs	r2, r3
 8002f50:	3a10      	subs	r2, #16
 8002f52:	428a      	cmp	r2, r1
 8002f54:	d858      	bhi.n	8003008 <UART_SetConfig+0x1a0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f56:	220f      	movs	r2, #15
 8002f58:	0019      	movs	r1, r3
 8002f5a:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3a08      	subs	r2, #8
 8002f60:	4013      	ands	r3, r2
 8002f62:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 8002f64:	6822      	ldr	r2, [r4, #0]
 8002f66:	60d3      	str	r3, [r2, #12]
 8002f68:	e02f      	b.n	8002fca <UART_SetConfig+0x162>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	0858      	lsrs	r0, r3, #1
 8002f6e:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <UART_SetConfig+0x1bc>)
 8002f70:	469c      	mov	ip, r3
 8002f72:	4460      	add	r0, ip
 8002f74:	6861      	ldr	r1, [r4, #4]
 8002f76:	f7fd f8c7 	bl	8000108 <__udivsi3>
 8002f7a:	0403      	lsls	r3, r0, #16
 8002f7c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7e:	2000      	movs	r0, #0
        break;
 8002f80:	e7e4      	b.n	8002f4c <UART_SetConfig+0xe4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7fe fe8b 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f86:	0040      	lsls	r0, r0, #1
 8002f88:	6863      	ldr	r3, [r4, #4]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	18c0      	adds	r0, r0, r3
 8002f8e:	6861      	ldr	r1, [r4, #4]
 8002f90:	f7fd f8ba 	bl	8000108 <__udivsi3>
 8002f94:	0403      	lsls	r3, r0, #16
 8002f96:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f98:	2000      	movs	r0, #0
        break;
 8002f9a:	e7d7      	b.n	8002f4c <UART_SetConfig+0xe4>
        ret = HAL_ERROR;
 8002f9c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e7d4      	b.n	8002f4c <UART_SetConfig+0xe4>
    switch (clocksource)
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d12d      	bne.n	8003002 <UART_SetConfig+0x19a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa6:	f7fe ff4f 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002faa:	6863      	ldr	r3, [r4, #4]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	1818      	adds	r0, r3, r0
 8002fb0:	6861      	ldr	r1, [r4, #4]
 8002fb2:	f7fd f8a9 	bl	8000108 <__udivsi3>
 8002fb6:	0403      	lsls	r3, r0, #16
 8002fb8:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fba:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fbc:	4918      	ldr	r1, [pc, #96]	; (8003020 <UART_SetConfig+0x1b8>)
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	3a10      	subs	r2, #16
 8002fc2:	428a      	cmp	r2, r1
 8002fc4:	d822      	bhi.n	800300c <UART_SetConfig+0x1a4>
      huart->Instance->BRR = usartdiv;
 8002fc6:	6822      	ldr	r2, [r4, #0]
 8002fc8:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002fce:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002fd0:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	0858      	lsrs	r0, r3, #1
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <UART_SetConfig+0x1c0>)
 8002fd8:	469c      	mov	ip, r3
 8002fda:	4460      	add	r0, ip
 8002fdc:	6861      	ldr	r1, [r4, #4]
 8002fde:	f7fd f893 	bl	8000108 <__udivsi3>
 8002fe2:	0403      	lsls	r3, r0, #16
 8002fe4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe6:	2000      	movs	r0, #0
        break;
 8002fe8:	e7e8      	b.n	8002fbc <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fea:	f7fe fe57 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fee:	6863      	ldr	r3, [r4, #4]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	1818      	adds	r0, r3, r0
 8002ff4:	6861      	ldr	r1, [r4, #4]
 8002ff6:	f7fd f887 	bl	8000108 <__udivsi3>
 8002ffa:	0403      	lsls	r3, r0, #16
 8002ffc:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ffe:	2000      	movs	r0, #0
        break;
 8003000:	e7dc      	b.n	8002fbc <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8003002:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003004:	2300      	movs	r3, #0
 8003006:	e7d9      	b.n	8002fbc <UART_SetConfig+0x154>
      ret = HAL_ERROR;
 8003008:	2001      	movs	r0, #1
 800300a:	e7de      	b.n	8002fca <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 800300c:	2001      	movs	r0, #1
 800300e:	e7dc      	b.n	8002fca <UART_SetConfig+0x162>
 8003010:	ffff69f3 	.word	0xffff69f3
 8003014:	ffffcfff 	.word	0xffffcfff
 8003018:	fffff4ff 	.word	0xfffff4ff
 800301c:	40021000 	.word	0x40021000
 8003020:	0000ffef 	.word	0x0000ffef
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200

0800302c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800302e:	07db      	lsls	r3, r3, #31
 8003030:	d506      	bpl.n	8003040 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003032:	6802      	ldr	r2, [r0, #0]
 8003034:	6853      	ldr	r3, [r2, #4]
 8003036:	492c      	ldr	r1, [pc, #176]	; (80030e8 <UART_AdvFeatureConfig+0xbc>)
 8003038:	400b      	ands	r3, r1
 800303a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800303c:	430b      	orrs	r3, r1
 800303e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003040:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003042:	079b      	lsls	r3, r3, #30
 8003044:	d506      	bpl.n	8003054 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003046:	6802      	ldr	r2, [r0, #0]
 8003048:	6853      	ldr	r3, [r2, #4]
 800304a:	4928      	ldr	r1, [pc, #160]	; (80030ec <UART_AdvFeatureConfig+0xc0>)
 800304c:	400b      	ands	r3, r1
 800304e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003050:	430b      	orrs	r3, r1
 8003052:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003056:	075b      	lsls	r3, r3, #29
 8003058:	d506      	bpl.n	8003068 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800305a:	6802      	ldr	r2, [r0, #0]
 800305c:	6853      	ldr	r3, [r2, #4]
 800305e:	4924      	ldr	r1, [pc, #144]	; (80030f0 <UART_AdvFeatureConfig+0xc4>)
 8003060:	400b      	ands	r3, r1
 8003062:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003064:	430b      	orrs	r3, r1
 8003066:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003068:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800306a:	071b      	lsls	r3, r3, #28
 800306c:	d506      	bpl.n	800307c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800306e:	6802      	ldr	r2, [r0, #0]
 8003070:	6853      	ldr	r3, [r2, #4]
 8003072:	4920      	ldr	r1, [pc, #128]	; (80030f4 <UART_AdvFeatureConfig+0xc8>)
 8003074:	400b      	ands	r3, r1
 8003076:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003078:	430b      	orrs	r3, r1
 800307a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800307c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800307e:	06db      	lsls	r3, r3, #27
 8003080:	d506      	bpl.n	8003090 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003082:	6802      	ldr	r2, [r0, #0]
 8003084:	6893      	ldr	r3, [r2, #8]
 8003086:	491c      	ldr	r1, [pc, #112]	; (80030f8 <UART_AdvFeatureConfig+0xcc>)
 8003088:	400b      	ands	r3, r1
 800308a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800308c:	430b      	orrs	r3, r1
 800308e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	d506      	bpl.n	80030a4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003096:	6802      	ldr	r2, [r0, #0]
 8003098:	6893      	ldr	r3, [r2, #8]
 800309a:	4918      	ldr	r1, [pc, #96]	; (80030fc <UART_AdvFeatureConfig+0xd0>)
 800309c:	400b      	ands	r3, r1
 800309e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030a6:	065b      	lsls	r3, r3, #25
 80030a8:	d50b      	bpl.n	80030c2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030aa:	6802      	ldr	r2, [r0, #0]
 80030ac:	6853      	ldr	r3, [r2, #4]
 80030ae:	4914      	ldr	r1, [pc, #80]	; (8003100 <UART_AdvFeatureConfig+0xd4>)
 80030b0:	400b      	ands	r3, r1
 80030b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	035b      	lsls	r3, r3, #13
 80030bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80030be:	429a      	cmp	r2, r3
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	d506      	bpl.n	80030d6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030c8:	6802      	ldr	r2, [r0, #0]
 80030ca:	6853      	ldr	r3, [r2, #4]
 80030cc:	490d      	ldr	r1, [pc, #52]	; (8003104 <UART_AdvFeatureConfig+0xd8>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]
}
 80030d6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030d8:	6802      	ldr	r2, [r0, #0]
 80030da:	6853      	ldr	r3, [r2, #4]
 80030dc:	490a      	ldr	r1, [pc, #40]	; (8003108 <UART_AdvFeatureConfig+0xdc>)
 80030de:	400b      	ands	r3, r1
 80030e0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80030e2:	430b      	orrs	r3, r1
 80030e4:	6053      	str	r3, [r2, #4]
 80030e6:	e7ec      	b.n	80030c2 <UART_AdvFeatureConfig+0x96>
 80030e8:	fffdffff 	.word	0xfffdffff
 80030ec:	fffeffff 	.word	0xfffeffff
 80030f0:	fffbffff 	.word	0xfffbffff
 80030f4:	ffff7fff 	.word	0xffff7fff
 80030f8:	ffffefff 	.word	0xffffefff
 80030fc:	ffffdfff 	.word	0xffffdfff
 8003100:	ffefffff 	.word	0xffefffff
 8003104:	fff7ffff 	.word	0xfff7ffff
 8003108:	ff9fffff 	.word	0xff9fffff

0800310c <UART_WaitOnFlagUntilTimeout>:
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	46c6      	mov	lr, r8
 8003110:	b500      	push	{lr}
 8003112:	0005      	movs	r5, r0
 8003114:	000c      	movs	r4, r1
 8003116:	0017      	movs	r7, r2
 8003118:	4698      	mov	r8, r3
 800311a:	9e06      	ldr	r6, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4023      	ands	r3, r4
 8003122:	1b1b      	subs	r3, r3, r4
 8003124:	425a      	negs	r2, r3
 8003126:	4153      	adcs	r3, r2
 8003128:	42bb      	cmp	r3, r7
 800312a:	d13a      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 800312c:	1c73      	adds	r3, r6, #1
 800312e:	d0f5      	beq.n	800311c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003130:	f7fe f934 	bl	800139c <HAL_GetTick>
 8003134:	4643      	mov	r3, r8
 8003136:	1ac0      	subs	r0, r0, r3
 8003138:	42b0      	cmp	r0, r6
 800313a:	d81f      	bhi.n	800317c <UART_WaitOnFlagUntilTimeout+0x70>
 800313c:	2e00      	cmp	r6, #0
 800313e:	d01d      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	0752      	lsls	r2, r2, #29
 8003146:	d5e9      	bpl.n	800311c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	0512      	lsls	r2, r2, #20
 800314c:	d5e6      	bpl.n	800311c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003154:	682a      	ldr	r2, [r5, #0]
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	4914      	ldr	r1, [pc, #80]	; (80031ac <UART_WaitOnFlagUntilTimeout+0xa0>)
 800315a:	400b      	ands	r3, r1
 800315c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315e:	682a      	ldr	r2, [r5, #0]
 8003160:	6893      	ldr	r3, [r2, #8]
 8003162:	31a3      	adds	r1, #163	; 0xa3
 8003164:	31ff      	adds	r1, #255	; 0xff
 8003166:	438b      	bics	r3, r1
 8003168:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800316a:	2320      	movs	r3, #32
 800316c:	676b      	str	r3, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800316e:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003170:	67eb      	str	r3, [r5, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003172:	3350      	adds	r3, #80	; 0x50
 8003174:	2200      	movs	r2, #0
 8003176:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8003178:	2003      	movs	r0, #3
 800317a:	e013      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317c:	682a      	ldr	r2, [r5, #0]
 800317e:	6813      	ldr	r3, [r2, #0]
 8003180:	490a      	ldr	r1, [pc, #40]	; (80031ac <UART_WaitOnFlagUntilTimeout+0xa0>)
 8003182:	400b      	ands	r3, r1
 8003184:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003186:	682a      	ldr	r2, [r5, #0]
 8003188:	6893      	ldr	r3, [r2, #8]
 800318a:	31a3      	adds	r1, #163	; 0xa3
 800318c:	31ff      	adds	r1, #255	; 0xff
 800318e:	438b      	bics	r3, r1
 8003190:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003192:	2320      	movs	r3, #32
 8003194:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003196:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8003198:	3350      	adds	r3, #80	; 0x50
 800319a:	2200      	movs	r2, #0
 800319c:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 800319e:	2003      	movs	r0, #3
 80031a0:	e000      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 80031a2:	2000      	movs	r0, #0
}
 80031a4:	bc04      	pop	{r2}
 80031a6:	4690      	mov	r8, r2
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	fffffe5f 	.word	0xfffffe5f

080031b0 <UART_CheckIdleState>:
{
 80031b0:	b530      	push	{r4, r5, lr}
 80031b2:	b083      	sub	sp, #12
 80031b4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80031ba:	f7fe f8ef 	bl	800139c <HAL_GetTick>
 80031be:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	d40c      	bmi.n	80031e2 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	075b      	lsls	r3, r3, #29
 80031ce:	d415      	bmi.n	80031fc <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 80031d0:	2320      	movs	r3, #32
 80031d2:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031d4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80031d6:	3350      	adds	r3, #80	; 0x50
 80031d8:	2200      	movs	r2, #0
 80031da:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80031dc:	2000      	movs	r0, #0
}
 80031de:	b003      	add	sp, #12
 80031e0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <UART_CheckIdleState+0x68>)
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	0003      	movs	r3, r0
 80031ea:	2200      	movs	r2, #0
 80031ec:	0389      	lsls	r1, r1, #14
 80031ee:	0020      	movs	r0, r4
 80031f0:	f7ff ff8c 	bl	800310c <UART_WaitOnFlagUntilTimeout>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d0e7      	beq.n	80031c8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80031f8:	2003      	movs	r0, #3
 80031fa:	e7f0      	b.n	80031de <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <UART_CheckIdleState+0x68>)
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	002b      	movs	r3, r5
 8003204:	2200      	movs	r2, #0
 8003206:	03c9      	lsls	r1, r1, #15
 8003208:	0020      	movs	r0, r4
 800320a:	f7ff ff7f 	bl	800310c <UART_WaitOnFlagUntilTimeout>
 800320e:	2800      	cmp	r0, #0
 8003210:	d0de      	beq.n	80031d0 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8003212:	2003      	movs	r0, #3
 8003214:	e7e3      	b.n	80031de <UART_CheckIdleState+0x2e>
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	01ffffff 	.word	0x01ffffff

0800321c <HAL_UART_Init>:
{
 800321c:	b510      	push	{r4, lr}
 800321e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003220:	d02e      	beq.n	8003280 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003224:	2b00      	cmp	r3, #0
 8003226:	d021      	beq.n	800326c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003228:	2324      	movs	r3, #36	; 0x24
 800322a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	6813      	ldr	r3, [r2, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	438b      	bics	r3, r1
 8003234:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003236:	0020      	movs	r0, r4
 8003238:	f7ff fe16 	bl	8002e68 <UART_SetConfig>
 800323c:	2801      	cmp	r0, #1
 800323e:	d014      	beq.n	800326a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d118      	bne.n	8003278 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	6853      	ldr	r3, [r2, #4]
 800324a:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_UART_Init+0x68>)
 800324c:	400b      	ands	r3, r1
 800324e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	6893      	ldr	r3, [r2, #8]
 8003254:	2108      	movs	r1, #8
 8003256:	438b      	bics	r3, r1
 8003258:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	3907      	subs	r1, #7
 8003260:	430b      	orrs	r3, r1
 8003262:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003264:	0020      	movs	r0, r4
 8003266:	f7ff ffa3 	bl	80031b0 <UART_CheckIdleState>
}
 800326a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800326c:	3370      	adds	r3, #112	; 0x70
 800326e:	2200      	movs	r2, #0
 8003270:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003272:	f7fd ffbb 	bl	80011ec <HAL_UART_MspInit>
 8003276:	e7d7      	b.n	8003228 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8003278:	0020      	movs	r0, r4
 800327a:	f7ff fed7 	bl	800302c <UART_AdvFeatureConfig>
 800327e:	e7e2      	b.n	8003246 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8003280:	2001      	movs	r0, #1
 8003282:	e7f2      	b.n	800326a <HAL_UART_Init+0x4e>
 8003284:	fffff7ff 	.word	0xfffff7ff

08003288 <HAL_MultiProcessor_Init>:
{
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	0004      	movs	r4, r0
 800328c:	000d      	movs	r5, r1
 800328e:	0016      	movs	r6, r2
  if (huart == NULL)
 8003290:	2800      	cmp	r0, #0
 8003292:	d040      	beq.n	8003316 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003294:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003296:	2b00      	cmp	r3, #0
 8003298:	d02b      	beq.n	80032f2 <HAL_MultiProcessor_Init+0x6a>
  huart->gState = HAL_UART_STATE_BUSY;
 800329a:	2324      	movs	r3, #36	; 0x24
 800329c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	6813      	ldr	r3, [r2, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	438b      	bics	r3, r1
 80032a6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a8:	0020      	movs	r0, r4
 80032aa:	f7ff fddd 	bl	8002e68 <UART_SetConfig>
 80032ae:	2801      	cmp	r0, #1
 80032b0:	d01e      	beq.n	80032f0 <HAL_MultiProcessor_Init+0x68>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d122      	bne.n	80032fe <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	6853      	ldr	r3, [r2, #4]
 80032bc:	4917      	ldr	r1, [pc, #92]	; (800331c <HAL_MultiProcessor_Init+0x94>)
 80032be:	400b      	ands	r3, r1
 80032c0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80032c2:	6822      	ldr	r2, [r4, #0]
 80032c4:	6893      	ldr	r3, [r2, #8]
 80032c6:	2108      	movs	r1, #8
 80032c8:	438b      	bics	r3, r1
 80032ca:	6093      	str	r3, [r2, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	429e      	cmp	r6, r3
 80032d2:	d018      	beq.n	8003306 <HAL_MultiProcessor_Init+0x7e>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4910      	ldr	r1, [pc, #64]	; (800331c <HAL_MultiProcessor_Init+0x94>)
 80032da:	400a      	ands	r2, r1
 80032dc:	4332      	orrs	r2, r6
 80032de:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	6813      	ldr	r3, [r2, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	430b      	orrs	r3, r1
 80032e8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80032ea:	0020      	movs	r0, r4
 80032ec:	f7ff ff60 	bl	80031b0 <UART_CheckIdleState>
}
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 80032f2:	3370      	adds	r3, #112	; 0x70
 80032f4:	2200      	movs	r2, #0
 80032f6:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80032f8:	f7fd ff78 	bl	80011ec <HAL_UART_MspInit>
 80032fc:	e7cd      	b.n	800329a <HAL_MultiProcessor_Init+0x12>
    UART_AdvFeatureConfig(huart);
 80032fe:	0020      	movs	r0, r4
 8003300:	f7ff fe94 	bl	800302c <UART_AdvFeatureConfig>
 8003304:	e7d8      	b.n	80032b8 <HAL_MultiProcessor_Init+0x30>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6853      	ldr	r3, [r2, #4]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	062d      	lsls	r5, r5, #24
 8003310:	431d      	orrs	r5, r3
 8003312:	6055      	str	r5, [r2, #4]
 8003314:	e7de      	b.n	80032d4 <HAL_MultiProcessor_Init+0x4c>
    return HAL_ERROR;
 8003316:	2001      	movs	r0, #1
 8003318:	e7ea      	b.n	80032f0 <HAL_MultiProcessor_Init+0x68>
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	fffff7ff 	.word	0xfffff7ff

08003320 <HAL_MultiProcessor_EnableMuteMode>:
{
 8003320:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8003322:	2370      	movs	r3, #112	; 0x70
 8003324:	5cc3      	ldrb	r3, [r0, r3]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d00f      	beq.n	800334a <HAL_MultiProcessor_EnableMuteMode+0x2a>
 800332a:	2370      	movs	r3, #112	; 0x70
 800332c:	2201      	movs	r2, #1
 800332e:	54c2      	strb	r2, [r0, r3]
  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	3b4c      	subs	r3, #76	; 0x4c
 8003332:	6743      	str	r3, [r0, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 8003334:	6802      	ldr	r2, [r0, #0]
 8003336:	6811      	ldr	r1, [r2, #0]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	019b      	lsls	r3, r3, #6
 800333c:	430b      	orrs	r3, r1
 800333e:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003340:	2320      	movs	r3, #32
 8003342:	6743      	str	r3, [r0, #116]	; 0x74
  return (UART_CheckIdleState(huart));
 8003344:	f7ff ff34 	bl	80031b0 <UART_CheckIdleState>
}
 8003348:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800334a:	2002      	movs	r0, #2
 800334c:	e7fc      	b.n	8003348 <HAL_MultiProcessor_EnableMuteMode+0x28>
	...

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	2600      	movs	r6, #0
 8003354:	4d0c      	ldr	r5, [pc, #48]	; (8003388 <__libc_init_array+0x38>)
 8003356:	4c0d      	ldr	r4, [pc, #52]	; (800338c <__libc_init_array+0x3c>)
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	42a6      	cmp	r6, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	2600      	movs	r6, #0
 8003362:	f000 f821 	bl	80033a8 <_init>
 8003366:	4d0a      	ldr	r5, [pc, #40]	; (8003390 <__libc_init_array+0x40>)
 8003368:	4c0a      	ldr	r4, [pc, #40]	; (8003394 <__libc_init_array+0x44>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	42a6      	cmp	r6, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	00b3      	lsls	r3, r6, #2
 8003376:	58eb      	ldr	r3, [r5, r3]
 8003378:	4798      	blx	r3
 800337a:	3601      	adds	r6, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	00b3      	lsls	r3, r6, #2
 8003380:	58eb      	ldr	r3, [r5, r3]
 8003382:	4798      	blx	r3
 8003384:	3601      	adds	r6, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	08003538 	.word	0x08003538
 800338c:	08003538 	.word	0x08003538
 8003390:	08003538 	.word	0x08003538
 8003394:	0800353c 	.word	0x0800353c

08003398 <memset>:
 8003398:	0003      	movs	r3, r0
 800339a:	1812      	adds	r2, r2, r0
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	7019      	strb	r1, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
